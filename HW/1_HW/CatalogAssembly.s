   1              		.file	"Catalog.cpp"
   2              	# GNU C++14 (Ubuntu 8.3.0-6ubuntu1) version 8.3.0 (x86_64-linux-gnu)
   3              	#	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   4              	
   5              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   6              	# options passed:  -imultiarch x86_64-linux-gnu -D_GNU_SOURCE Catalog.cpp
   7              	# -mtune=generic -march=x86-64 -g -O0 -fverbose-asm
   8              	# -fstack-protector-strong -Wformat -Wformat-security
   9              	# options enabled:  -fPIC -fPIE -faggressive-loop-optimizations
  10              	# -fasynchronous-unwind-tables -fauto-inc-dec -fchkp-check-incomplete-type
  11              	# -fchkp-check-read -fchkp-check-write -fchkp-instrument-calls
  12              	# -fchkp-narrow-bounds -fchkp-optimize -fchkp-store-bounds
  13              	# -fchkp-use-static-bounds -fchkp-use-static-const-bounds
  14              	# -fchkp-use-wrappers -fcommon -fdelete-null-pointer-checks
  15              	# -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  16              	# -fexceptions -ffp-int-builtin-inexact -ffunction-cse -fgcse-lm
  17              	# -fgnu-runtime -fgnu-unique -fident -finline-atomics -fira-hoist-pressure
  18              	# -fira-share-save-slots -fira-share-spill-slots -fivopts
  19              	# -fkeep-static-consts -fleading-underscore -flifetime-dse
  20              	# -flto-odr-type-merging -fmath-errno -fmerge-debug-strings -fpeephole
  21              	# -fplt -fprefetch-loop-arrays -freg-struct-return
  22              	# -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  23              	# -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  24              	# -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  25              	# -fsched-stalled-insns-dep -fschedule-fusion -fsemantic-interposition
  26              	# -fshow-column -fshrink-wrap-separate -fsigned-zeros
  27              	# -fsplit-ivs-in-unroller -fssa-backprop -fstack-protector-strong
  28              	# -fstdarg-opt -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
  29              	# -ftree-cselim -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im
  30              	# -ftree-loop-ivcanon -ftree-loop-optimize -ftree-parallelize-loops=
  31              	# -ftree-phiprop -ftree-reassoc -ftree-scev-cprop -funit-at-a-time
  32              	# -funwind-tables -fverbose-asm -fzero-initialized-in-bss
  33              	# -m128bit-long-double -m64 -m80387 -malign-stringops
  34              	# -mavx256-split-unaligned-load -mavx256-split-unaligned-store
  35              	# -mfancy-math-387 -mfp-ret-in-387 -mfxsr -mglibc -mieee-fp
  36              	# -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone -msse -msse2
  37              	# -mstv -mtls-direct-seg-refs -mvzeroupper
  38              	
  39              		.text
  40              	.Ltext0:
  41              		.section	.rodata
  44              	_ZStL19piecewise_construct:
  45 0000 00       		.zero	1
  46              		.section	.text._ZStorSt13_Ios_OpenmodeS_,"axG",@progbits,_ZStorSt13_Ios_OpenmodeS_,comdat
  47              		.weak	_ZStorSt13_Ios_OpenmodeS_
  49              	_ZStorSt13_Ios_OpenmodeS_:
  50              	.LFB1118:
  51              		.file 1 "/usr/include/c++/8/bits/ios_base.h"
   1:/usr/include/c++/8/bits/ios_base.h **** // Iostreams base classes -*- C++ -*-
   2:/usr/include/c++/8/bits/ios_base.h **** 
   3:/usr/include/c++/8/bits/ios_base.h **** // Copyright (C) 1997-2018 Free Software Foundation, Inc.
   4:/usr/include/c++/8/bits/ios_base.h **** //
   5:/usr/include/c++/8/bits/ios_base.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/8/bits/ios_base.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/8/bits/ios_base.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/8/bits/ios_base.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/8/bits/ios_base.h **** // any later version.
  10:/usr/include/c++/8/bits/ios_base.h **** 
  11:/usr/include/c++/8/bits/ios_base.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/8/bits/ios_base.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/8/bits/ios_base.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/8/bits/ios_base.h **** // GNU General Public License for more details.
  15:/usr/include/c++/8/bits/ios_base.h **** 
  16:/usr/include/c++/8/bits/ios_base.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/8/bits/ios_base.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/8/bits/ios_base.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/8/bits/ios_base.h **** 
  20:/usr/include/c++/8/bits/ios_base.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/8/bits/ios_base.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/8/bits/ios_base.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/8/bits/ios_base.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/8/bits/ios_base.h **** 
  25:/usr/include/c++/8/bits/ios_base.h **** /** @file bits/ios_base.h
  26:/usr/include/c++/8/bits/ios_base.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/8/bits/ios_base.h ****  *  Do not attempt to use it directly. @headername{ios}
  28:/usr/include/c++/8/bits/ios_base.h ****  */
  29:/usr/include/c++/8/bits/ios_base.h **** 
  30:/usr/include/c++/8/bits/ios_base.h **** //
  31:/usr/include/c++/8/bits/ios_base.h **** // ISO C++ 14882: 27.4  Iostreams base classes
  32:/usr/include/c++/8/bits/ios_base.h **** //
  33:/usr/include/c++/8/bits/ios_base.h **** 
  34:/usr/include/c++/8/bits/ios_base.h **** #ifndef _IOS_BASE_H
  35:/usr/include/c++/8/bits/ios_base.h **** #define _IOS_BASE_H 1
  36:/usr/include/c++/8/bits/ios_base.h **** 
  37:/usr/include/c++/8/bits/ios_base.h **** #pragma GCC system_header
  38:/usr/include/c++/8/bits/ios_base.h **** 
  39:/usr/include/c++/8/bits/ios_base.h **** #include <ext/atomicity.h>
  40:/usr/include/c++/8/bits/ios_base.h **** #include <bits/localefwd.h>
  41:/usr/include/c++/8/bits/ios_base.h **** #include <bits/locale_classes.h>
  42:/usr/include/c++/8/bits/ios_base.h **** 
  43:/usr/include/c++/8/bits/ios_base.h **** #if __cplusplus < 201103L
  44:/usr/include/c++/8/bits/ios_base.h **** # include <stdexcept>
  45:/usr/include/c++/8/bits/ios_base.h **** #else
  46:/usr/include/c++/8/bits/ios_base.h **** # include <system_error>
  47:/usr/include/c++/8/bits/ios_base.h **** #endif
  48:/usr/include/c++/8/bits/ios_base.h **** 
  49:/usr/include/c++/8/bits/ios_base.h **** namespace std _GLIBCXX_VISIBILITY(default)
  50:/usr/include/c++/8/bits/ios_base.h **** {
  51:/usr/include/c++/8/bits/ios_base.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  52:/usr/include/c++/8/bits/ios_base.h **** 
  53:/usr/include/c++/8/bits/ios_base.h ****   // The following definitions of bitmask types are enums, not ints,
  54:/usr/include/c++/8/bits/ios_base.h ****   // as permitted (but not required) in the standard, in order to provide
  55:/usr/include/c++/8/bits/ios_base.h ****   // better type safety in iostream calls.  A side effect is that in C++98
  56:/usr/include/c++/8/bits/ios_base.h ****   // expressions involving them are not compile-time constants.
  57:/usr/include/c++/8/bits/ios_base.h ****   enum _Ios_Fmtflags 
  58:/usr/include/c++/8/bits/ios_base.h ****     { 
  59:/usr/include/c++/8/bits/ios_base.h ****       _S_boolalpha 	= 1L << 0,
  60:/usr/include/c++/8/bits/ios_base.h ****       _S_dec 		= 1L << 1,
  61:/usr/include/c++/8/bits/ios_base.h ****       _S_fixed 		= 1L << 2,
  62:/usr/include/c++/8/bits/ios_base.h ****       _S_hex 		= 1L << 3,
  63:/usr/include/c++/8/bits/ios_base.h ****       _S_internal 	= 1L << 4,
  64:/usr/include/c++/8/bits/ios_base.h ****       _S_left 		= 1L << 5,
  65:/usr/include/c++/8/bits/ios_base.h ****       _S_oct 		= 1L << 6,
  66:/usr/include/c++/8/bits/ios_base.h ****       _S_right 		= 1L << 7,
  67:/usr/include/c++/8/bits/ios_base.h ****       _S_scientific 	= 1L << 8,
  68:/usr/include/c++/8/bits/ios_base.h ****       _S_showbase 	= 1L << 9,
  69:/usr/include/c++/8/bits/ios_base.h ****       _S_showpoint 	= 1L << 10,
  70:/usr/include/c++/8/bits/ios_base.h ****       _S_showpos 	= 1L << 11,
  71:/usr/include/c++/8/bits/ios_base.h ****       _S_skipws 	= 1L << 12,
  72:/usr/include/c++/8/bits/ios_base.h ****       _S_unitbuf 	= 1L << 13,
  73:/usr/include/c++/8/bits/ios_base.h ****       _S_uppercase 	= 1L << 14,
  74:/usr/include/c++/8/bits/ios_base.h ****       _S_adjustfield 	= _S_left | _S_right | _S_internal,
  75:/usr/include/c++/8/bits/ios_base.h ****       _S_basefield 	= _S_dec | _S_oct | _S_hex,
  76:/usr/include/c++/8/bits/ios_base.h ****       _S_floatfield 	= _S_scientific | _S_fixed,
  77:/usr/include/c++/8/bits/ios_base.h ****       _S_ios_fmtflags_end = 1L << 16,
  78:/usr/include/c++/8/bits/ios_base.h ****       _S_ios_fmtflags_max = __INT_MAX__,
  79:/usr/include/c++/8/bits/ios_base.h ****       _S_ios_fmtflags_min = ~__INT_MAX__
  80:/usr/include/c++/8/bits/ios_base.h ****     };
  81:/usr/include/c++/8/bits/ios_base.h **** 
  82:/usr/include/c++/8/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  83:/usr/include/c++/8/bits/ios_base.h ****   operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  84:/usr/include/c++/8/bits/ios_base.h ****   { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }
  85:/usr/include/c++/8/bits/ios_base.h **** 
  86:/usr/include/c++/8/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  87:/usr/include/c++/8/bits/ios_base.h ****   operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  88:/usr/include/c++/8/bits/ios_base.h ****   { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }
  89:/usr/include/c++/8/bits/ios_base.h **** 
  90:/usr/include/c++/8/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  91:/usr/include/c++/8/bits/ios_base.h ****   operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  92:/usr/include/c++/8/bits/ios_base.h ****   { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }
  93:/usr/include/c++/8/bits/ios_base.h **** 
  94:/usr/include/c++/8/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  95:/usr/include/c++/8/bits/ios_base.h ****   operator~(_Ios_Fmtflags __a)
  96:/usr/include/c++/8/bits/ios_base.h ****   { return _Ios_Fmtflags(~static_cast<int>(__a)); }
  97:/usr/include/c++/8/bits/ios_base.h **** 
  98:/usr/include/c++/8/bits/ios_base.h ****   inline const _Ios_Fmtflags&
  99:/usr/include/c++/8/bits/ios_base.h ****   operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
 100:/usr/include/c++/8/bits/ios_base.h ****   { return __a = __a | __b; }
 101:/usr/include/c++/8/bits/ios_base.h **** 
 102:/usr/include/c++/8/bits/ios_base.h ****   inline const _Ios_Fmtflags&
 103:/usr/include/c++/8/bits/ios_base.h ****   operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
 104:/usr/include/c++/8/bits/ios_base.h ****   { return __a = __a & __b; }
 105:/usr/include/c++/8/bits/ios_base.h **** 
 106:/usr/include/c++/8/bits/ios_base.h ****   inline const _Ios_Fmtflags&
 107:/usr/include/c++/8/bits/ios_base.h ****   operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
 108:/usr/include/c++/8/bits/ios_base.h ****   { return __a = __a ^ __b; }
 109:/usr/include/c++/8/bits/ios_base.h **** 
 110:/usr/include/c++/8/bits/ios_base.h **** 
 111:/usr/include/c++/8/bits/ios_base.h ****   enum _Ios_Openmode 
 112:/usr/include/c++/8/bits/ios_base.h ****     { 
 113:/usr/include/c++/8/bits/ios_base.h ****       _S_app 		= 1L << 0,
 114:/usr/include/c++/8/bits/ios_base.h ****       _S_ate 		= 1L << 1,
 115:/usr/include/c++/8/bits/ios_base.h ****       _S_bin 		= 1L << 2,
 116:/usr/include/c++/8/bits/ios_base.h ****       _S_in 		= 1L << 3,
 117:/usr/include/c++/8/bits/ios_base.h ****       _S_out 		= 1L << 4,
 118:/usr/include/c++/8/bits/ios_base.h ****       _S_trunc 		= 1L << 5,
 119:/usr/include/c++/8/bits/ios_base.h ****       _S_ios_openmode_end = 1L << 16,
 120:/usr/include/c++/8/bits/ios_base.h ****       _S_ios_openmode_max = __INT_MAX__,
 121:/usr/include/c++/8/bits/ios_base.h ****       _S_ios_openmode_min = ~__INT_MAX__
 122:/usr/include/c++/8/bits/ios_base.h ****     };
 123:/usr/include/c++/8/bits/ios_base.h **** 
 124:/usr/include/c++/8/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 125:/usr/include/c++/8/bits/ios_base.h ****   operator&(_Ios_Openmode __a, _Ios_Openmode __b)
 126:/usr/include/c++/8/bits/ios_base.h ****   { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }
 127:/usr/include/c++/8/bits/ios_base.h **** 
 128:/usr/include/c++/8/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 129:/usr/include/c++/8/bits/ios_base.h ****   operator|(_Ios_Openmode __a, _Ios_Openmode __b)
 130:/usr/include/c++/8/bits/ios_base.h ****   { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }
  52              		.loc 1 130 3
  53              		.cfi_startproc
  54 0000 55       		pushq	%rbp	#
  55              		.cfi_def_cfa_offset 16
  56              		.cfi_offset 6, -16
  57 0001 4889E5   		movq	%rsp, %rbp	#,
  58              		.cfi_def_cfa_register 6
  59 0004 897DFC   		movl	%edi, -4(%rbp)	# __a, __a
  60 0007 8975F8   		movl	%esi, -8(%rbp)	# __b, __b
  61              	# /usr/include/c++/8/bits/ios_base.h:130:   { return _Ios_Openmode(static_cast<int>(__a) | static_c
  62              		.loc 1 130 71
  63 000a 8B45FC   		movl	-4(%rbp), %eax	# __a, tmp89
  64 000d 0B45F8   		orl	-8(%rbp), %eax	# __b, _3
  65              	# /usr/include/c++/8/bits/ios_base.h:130:   { return _Ios_Openmode(static_cast<int>(__a) | static_c
  66              		.loc 1 130 74
  67 0010 5D       		popq	%rbp	#
  68              		.cfi_def_cfa 7, 8
  69 0011 C3       		ret	
  70              		.cfi_endproc
  71              	.LFE1118:
  73              		.local	_ZStL8__ioinit
  74              		.comm	_ZStL8__ioinit,1,1
  75              		.globl	INIT_COUNT
  76              		.data
  77              		.align 32
  80              	INIT_COUNT:
  81              	# letter:
  82 0000 41       		.byte	65
  83              	# frequency:
  84 0001 000000   		.zero	3
  85 0004 00000000 		.long	0
  86              	# letter:
  87 0008 42       		.byte	66
  88              	# frequency:
  89 0009 000000   		.zero	3
  90 000c 00000000 		.long	0
  91              	# letter:
  92 0010 43       		.byte	67
  93              	# frequency:
  94 0011 000000   		.zero	3
  95 0014 00000000 		.long	0
  96              	# letter:
  97 0018 44       		.byte	68
  98              	# frequency:
  99 0019 000000   		.zero	3
 100 001c 00000000 		.long	0
 101              	# letter:
 102 0020 45       		.byte	69
 103              	# frequency:
 104 0021 000000   		.zero	3
 105 0024 00000000 		.long	0
 106              	# letter:
 107 0028 46       		.byte	70
 108              	# frequency:
 109 0029 000000   		.zero	3
 110 002c 00000000 		.long	0
 111              	# letter:
 112 0030 47       		.byte	71
 113              	# frequency:
 114 0031 000000   		.zero	3
 115 0034 00000000 		.long	0
 116              	# letter:
 117 0038 48       		.byte	72
 118              	# frequency:
 119 0039 000000   		.zero	3
 120 003c 00000000 		.long	0
 121              	# letter:
 122 0040 49       		.byte	73
 123              	# frequency:
 124 0041 000000   		.zero	3
 125 0044 00000000 		.long	0
 126              	# letter:
 127 0048 4A       		.byte	74
 128              	# frequency:
 129 0049 000000   		.zero	3
 130 004c 00000000 		.long	0
 131              	# letter:
 132 0050 4B       		.byte	75
 133              	# frequency:
 134 0051 000000   		.zero	3
 135 0054 00000000 		.long	0
 136              	# letter:
 137 0058 4C       		.byte	76
 138              	# frequency:
 139 0059 000000   		.zero	3
 140 005c 00000000 		.long	0
 141              	# letter:
 142 0060 4D       		.byte	77
 143              	# frequency:
 144 0061 000000   		.zero	3
 145 0064 00000000 		.long	0
 146              	# letter:
 147 0068 4E       		.byte	78
 148              	# frequency:
 149 0069 000000   		.zero	3
 150 006c 00000000 		.long	0
 151              	# letter:
 152 0070 4F       		.byte	79
 153              	# frequency:
 154 0071 000000   		.zero	3
 155 0074 00000000 		.long	0
 156              	# letter:
 157 0078 50       		.byte	80
 158              	# frequency:
 159 0079 000000   		.zero	3
 160 007c 00000000 		.long	0
 161              	# letter:
 162 0080 51       		.byte	81
 163              	# frequency:
 164 0081 000000   		.zero	3
 165 0084 00000000 		.long	0
 166              	# letter:
 167 0088 52       		.byte	82
 168              	# frequency:
 169 0089 000000   		.zero	3
 170 008c 00000000 		.long	0
 171              	# letter:
 172 0090 53       		.byte	83
 173              	# frequency:
 174 0091 000000   		.zero	3
 175 0094 00000000 		.long	0
 176              	# letter:
 177 0098 54       		.byte	84
 178              	# frequency:
 179 0099 000000   		.zero	3
 180 009c 00000000 		.long	0
 181              	# letter:
 182 00a0 55       		.byte	85
 183              	# frequency:
 184 00a1 000000   		.zero	3
 185 00a4 00000000 		.long	0
 186              	# letter:
 187 00a8 56       		.byte	86
 188              	# frequency:
 189 00a9 000000   		.zero	3
 190 00ac 00000000 		.long	0
 191              	# letter:
 192 00b0 57       		.byte	87
 193              	# frequency:
 194 00b1 000000   		.zero	3
 195 00b4 00000000 		.long	0
 196              	# letter:
 197 00b8 53       		.byte	83
 198              	# frequency:
 199 00b9 000000   		.zero	3
 200 00bc 00000000 		.long	0
 201              	# letter:
 202 00c0 59       		.byte	89
 203              	# frequency:
 204 00c1 000000   		.zero	3
 205 00c4 00000000 		.long	0
 206              	# letter:
 207 00c8 5A       		.byte	90
 208              	# frequency:
 209 00c9 000000   		.zero	3
 210 00cc 00000000 		.long	0
 211              		.section	.text._ZN7CatalogC2Ev,"axG",@progbits,_ZN7CatalogC5Ev,comdat
 212              		.align 2
 213              		.weak	_ZN7CatalogC2Ev
 215              	_ZN7CatalogC2Ev:
 216              	.LFB2155:
 217              		.file 2 "Catalog.cpp"
   1:Catalog.cpp   **** 
   2:Catalog.cpp   **** #include <stdio.h>
   3:Catalog.cpp   **** #include <iostream>
   4:Catalog.cpp   **** #include <string>
   5:Catalog.cpp   **** #include <fstream>
   6:Catalog.cpp   **** #include <algorithm>
   7:Catalog.cpp   **** #include <ctype.h>
   8:Catalog.cpp   **** #include <sstream>
   9:Catalog.cpp   **** 
  10:Catalog.cpp   **** using namespace std;
  11:Catalog.cpp   **** 
  12:Catalog.cpp   **** struct Letter_Count {
  13:Catalog.cpp   **** 
  14:Catalog.cpp   ****     char letter;
  15:Catalog.cpp   ****     int frequency;
  16:Catalog.cpp   **** 
  17:Catalog.cpp   **** };
  18:Catalog.cpp   **** Letter_Count INIT_COUNT[26] = \
  19:Catalog.cpp   **** {
  20:Catalog.cpp   ****     {'A', 0},
  21:Catalog.cpp   ****     {'B', 0},
  22:Catalog.cpp   ****     {'C', 0},
  23:Catalog.cpp   ****     {'D', 0},
  24:Catalog.cpp   ****     {'E', 0}, 
  25:Catalog.cpp   ****     {'F', 0},
  26:Catalog.cpp   ****     {'G', 0},
  27:Catalog.cpp   ****     {'H', 0},
  28:Catalog.cpp   ****     {'I', 0},
  29:Catalog.cpp   ****     {'J', 0},
  30:Catalog.cpp   ****     {'K', 0},
  31:Catalog.cpp   ****     {'L', 0},
  32:Catalog.cpp   ****     {'M', 0},
  33:Catalog.cpp   ****     {'N', 0},
  34:Catalog.cpp   ****     {'O', 0},
  35:Catalog.cpp   ****     {'P', 0},
  36:Catalog.cpp   ****     {'Q', 0},
  37:Catalog.cpp   ****     {'R', 0},
  38:Catalog.cpp   ****     {'S', 0},
  39:Catalog.cpp   ****     {'T', 0},
  40:Catalog.cpp   ****     {'U', 0},
  41:Catalog.cpp   ****     {'V', 0},
  42:Catalog.cpp   ****     {'W', 0},
  43:Catalog.cpp   ****     {'S', 0},
  44:Catalog.cpp   ****     {'Y', 0},
  45:Catalog.cpp   ****     {'Z', 0}
  46:Catalog.cpp   **** 
  47:Catalog.cpp   **** };
  48:Catalog.cpp   **** struct Catalog {
 218              		.loc 2 48 8
 219              		.cfi_startproc
 220 0000 55       		pushq	%rbp	#
 221              		.cfi_def_cfa_offset 16
 222              		.cfi_offset 6, -16
 223 0001 4889E5   		movq	%rsp, %rbp	#,
 224              		.cfi_def_cfa_register 6
 225 0004 4883EC10 		subq	$16, %rsp	#,
 226 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 227              	.LBB2:
 228              	# Catalog.cpp:48: struct Catalog {
 229              		.loc 2 48 8
 230 000c 488B45F8 		movq	-8(%rbp), %rax	# this, _1
 231 0010 4889C7   		movq	%rax, %rdi	# _1,
 232 0013 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@PLT	#
 232      00
 233 0018 488B45F8 		movq	-8(%rbp), %rax	# this, tmp93
 234 001c 4883C020 		addq	$32, %rax	#, _2
 235 0020 4889C7   		movq	%rax, %rdi	# _2,
 236 0023 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@PLT	#
 236      00
 237 0028 488B45F8 		movq	-8(%rbp), %rax	# this, tmp94
 238 002c 4883C040 		addq	$64, %rax	#, _3
 239 0030 4889C7   		movq	%rax, %rdi	# _3,
 240 0033 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@PLT	#
 240      00
 241 0038 488B45F8 		movq	-8(%rbp), %rax	# this, tmp95
 242 003c C7406000 		movl	$0, 96(%rax)	#, this_7(D)->word_count
 242      000000
 243 0043 488B45F8 		movq	-8(%rbp), %rax	# this, tmp96
 244 0047 C7803401 		movl	$0, 308(%rax)	#, this_7(D)->line_count
 244      00000000 
 244      0000
 245              	.LBE2:
 246 0051 90       		nop	
 247 0052 C9       		leave	
 248              		.cfi_def_cfa 7, 8
 249 0053 C3       		ret	
 250              		.cfi_endproc
 251              	.LFE2155:
 253              		.weak	_ZN7CatalogC1Ev
 254              		.set	_ZN7CatalogC1Ev,_ZN7CatalogC2Ev
 255              		.section	.text._ZN7CatalogD2Ev,"axG",@progbits,_ZN7CatalogD5Ev,comdat
 256              		.align 2
 257              		.weak	_ZN7CatalogD2Ev
 259              	_ZN7CatalogD2Ev:
 260              	.LFB2158:
 261              		.loc 2 48 8
 262              		.cfi_startproc
 263 0000 55       		pushq	%rbp	#
 264              		.cfi_def_cfa_offset 16
 265              		.cfi_offset 6, -16
 266 0001 4889E5   		movq	%rsp, %rbp	#,
 267              		.cfi_def_cfa_register 6
 268 0004 4883EC10 		subq	$16, %rsp	#,
 269 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 270              	.LBB3:
 271              	# Catalog.cpp:48: struct Catalog {
 272              		.loc 2 48 8
 273 000c 488B45F8 		movq	-8(%rbp), %rax	# this, tmp90
 274 0010 4883C040 		addq	$64, %rax	#, _1
 275 0014 4889C7   		movq	%rax, %rdi	# _1,
 276 0017 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 276      00
 277 001c 488B45F8 		movq	-8(%rbp), %rax	# this, tmp91
 278 0020 4883C020 		addq	$32, %rax	#, _2
 279 0024 4889C7   		movq	%rax, %rdi	# _2,
 280 0027 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 280      00
 281 002c 488B45F8 		movq	-8(%rbp), %rax	# this, _3
 282 0030 4889C7   		movq	%rax, %rdi	# _3,
 283 0033 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 283      00
 284              	.LBE3:
 285 0038 90       		nop	
 286 0039 C9       		leave	
 287              		.cfi_def_cfa 7, 8
 288 003a C3       		ret	
 289              		.cfi_endproc
 290              	.LFE2158:
 292              		.weak	_ZN7CatalogD1Ev
 293              		.set	_ZN7CatalogD1Ev,_ZN7CatalogD2Ev
 294              		.section	.text._ZN7CatalogaSEOS_,"axG",@progbits,_ZN7CatalogaSEOS_,comdat
 295              		.align 2
 296              		.weak	_ZN7CatalogaSEOS_
 298              	_ZN7CatalogaSEOS_:
 299              	.LFB2163:
 300              		.loc 2 48 8
 301              		.cfi_startproc
 302 0000 55       		pushq	%rbp	#
 303              		.cfi_def_cfa_offset 16
 304              		.cfi_offset 6, -16
 305 0001 4889E5   		movq	%rsp, %rbp	#,
 306              		.cfi_def_cfa_register 6
 307 0004 53       		pushq	%rbx	#
 308 0005 4883EC18 		subq	$24, %rsp	#,
 309              		.cfi_offset 3, -24
 310 0009 48897DE8 		movq	%rdi, -24(%rbp)	# this, this
 311 000d 488975E0 		movq	%rsi, -32(%rbp)	# D.46695, D.46695
 312              	# Catalog.cpp:48: struct Catalog {
 313              		.loc 2 48 8
 314 0011 488B55E0 		movq	-32(%rbp), %rdx	# D.46695, _1
 315 0015 488B45E8 		movq	-24(%rbp), %rax	# this, _2
 316 0019 4889D6   		movq	%rdx, %rsi	# _1,
 317 001c 4889C7   		movq	%rax, %rdi	# _2,
 318 001f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@PLT	#
 318      00
 319 0024 488B45E0 		movq	-32(%rbp), %rax	# D.46695, tmp97
 320 0028 488D5020 		leaq	32(%rax), %rdx	#, _3
 321 002c 488B45E8 		movq	-24(%rbp), %rax	# this, tmp98
 322 0030 4883C020 		addq	$32, %rax	#, _4
 323 0034 4889D6   		movq	%rdx, %rsi	# _3,
 324 0037 4889C7   		movq	%rax, %rdi	# _4,
 325 003a E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@PLT	#
 325      00
 326 003f 488B45E0 		movq	-32(%rbp), %rax	# D.46695, tmp99
 327 0043 488D5040 		leaq	64(%rax), %rdx	#, _5
 328 0047 488B45E8 		movq	-24(%rbp), %rax	# this, tmp100
 329 004b 4883C040 		addq	$64, %rax	#, _6
 330 004f 4889D6   		movq	%rdx, %rsi	# _5,
 331 0052 4889C7   		movq	%rax, %rdi	# _6,
 332 0055 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@PLT	#
 332      00
 333 005a 488B45E0 		movq	-32(%rbp), %rax	# D.46695, tmp101
 334 005e 8B5060   		movl	96(%rax), %edx	# _9(D)->word_count, _7
 335 0061 488B45E8 		movq	-24(%rbp), %rax	# this, tmp102
 336 0065 895060   		movl	%edx, 96(%rax)	# _7, this_10(D)->word_count
 337 0068 488B45E8 		movq	-24(%rbp), %rax	# this, tmp103
 338 006c 488B55E0 		movq	-32(%rbp), %rdx	# D.46695, tmp104
 339 0070 488B4A64 		movq	100(%rdx), %rcx	# _9(D)->count, tmp105
 340 0074 488B5A6C 		movq	108(%rdx), %rbx	# _9(D)->count,
 341 0078 48894864 		movq	%rcx, 100(%rax)	# tmp105, this_10(D)->count
 342 007c 4889586C 		movq	%rbx, 108(%rax)	#, this_10(D)->count
 343 0080 488B4A74 		movq	116(%rdx), %rcx	# _9(D)->count, tmp106
 344 0084 488B5A7C 		movq	124(%rdx), %rbx	# _9(D)->count,
 345 0088 48894874 		movq	%rcx, 116(%rax)	# tmp106, this_10(D)->count
 346 008c 4889587C 		movq	%rbx, 124(%rax)	#, this_10(D)->count
 347 0090 488B8A84 		movq	132(%rdx), %rcx	# _9(D)->count, tmp107
 347      000000
 348 0097 488B9A8C 		movq	140(%rdx), %rbx	# _9(D)->count,
 348      000000
 349 009e 48898884 		movq	%rcx, 132(%rax)	# tmp107, this_10(D)->count
 349      000000
 350 00a5 4889988C 		movq	%rbx, 140(%rax)	#, this_10(D)->count
 350      000000
 351 00ac 488B8A94 		movq	148(%rdx), %rcx	# _9(D)->count, tmp108
 351      000000
 352 00b3 488B9A9C 		movq	156(%rdx), %rbx	# _9(D)->count,
 352      000000
 353 00ba 48898894 		movq	%rcx, 148(%rax)	# tmp108, this_10(D)->count
 353      000000
 354 00c1 4889989C 		movq	%rbx, 156(%rax)	#, this_10(D)->count
 354      000000
 355 00c8 488B8AA4 		movq	164(%rdx), %rcx	# _9(D)->count, tmp109
 355      000000
 356 00cf 488B9AAC 		movq	172(%rdx), %rbx	# _9(D)->count,
 356      000000
 357 00d6 488988A4 		movq	%rcx, 164(%rax)	# tmp109, this_10(D)->count
 357      000000
 358 00dd 488998AC 		movq	%rbx, 172(%rax)	#, this_10(D)->count
 358      000000
 359 00e4 488B8AB4 		movq	180(%rdx), %rcx	# _9(D)->count, tmp110
 359      000000
 360 00eb 488B9ABC 		movq	188(%rdx), %rbx	# _9(D)->count,
 360      000000
 361 00f2 488988B4 		movq	%rcx, 180(%rax)	# tmp110, this_10(D)->count
 361      000000
 362 00f9 488998BC 		movq	%rbx, 188(%rax)	#, this_10(D)->count
 362      000000
 363 0100 488B8AC4 		movq	196(%rdx), %rcx	# _9(D)->count, tmp111
 363      000000
 364 0107 488B9ACC 		movq	204(%rdx), %rbx	# _9(D)->count,
 364      000000
 365 010e 488988C4 		movq	%rcx, 196(%rax)	# tmp111, this_10(D)->count
 365      000000
 366 0115 488998CC 		movq	%rbx, 204(%rax)	#, this_10(D)->count
 366      000000
 367 011c 488B8AD4 		movq	212(%rdx), %rcx	# _9(D)->count, tmp112
 367      000000
 368 0123 488B9ADC 		movq	220(%rdx), %rbx	# _9(D)->count,
 368      000000
 369 012a 488988D4 		movq	%rcx, 212(%rax)	# tmp112, this_10(D)->count
 369      000000
 370 0131 488998DC 		movq	%rbx, 220(%rax)	#, this_10(D)->count
 370      000000
 371 0138 488B8AE4 		movq	228(%rdx), %rcx	# _9(D)->count, tmp113
 371      000000
 372 013f 488B9AEC 		movq	236(%rdx), %rbx	# _9(D)->count,
 372      000000
 373 0146 488988E4 		movq	%rcx, 228(%rax)	# tmp113, this_10(D)->count
 373      000000
 374 014d 488998EC 		movq	%rbx, 236(%rax)	#, this_10(D)->count
 374      000000
 375 0154 488B8AF4 		movq	244(%rdx), %rcx	# _9(D)->count, tmp114
 375      000000
 376 015b 488B9AFC 		movq	252(%rdx), %rbx	# _9(D)->count,
 376      000000
 377 0162 488988F4 		movq	%rcx, 244(%rax)	# tmp114, this_10(D)->count
 377      000000
 378 0169 488998FC 		movq	%rbx, 252(%rax)	#, this_10(D)->count
 378      000000
 379 0170 488B8A04 		movq	260(%rdx), %rcx	# _9(D)->count, tmp115
 379      010000
 380 0177 488B9A0C 		movq	268(%rdx), %rbx	# _9(D)->count,
 380      010000
 381 017e 48898804 		movq	%rcx, 260(%rax)	# tmp115, this_10(D)->count
 381      010000
 382 0185 4889980C 		movq	%rbx, 268(%rax)	#, this_10(D)->count
 382      010000
 383 018c 488B8A14 		movq	276(%rdx), %rcx	# _9(D)->count, tmp116
 383      010000
 384 0193 488B9A1C 		movq	284(%rdx), %rbx	# _9(D)->count,
 384      010000
 385 019a 48898814 		movq	%rcx, 276(%rax)	# tmp116, this_10(D)->count
 385      010000
 386 01a1 4889981C 		movq	%rbx, 284(%rax)	#, this_10(D)->count
 386      010000
 387 01a8 488B8A2C 		movq	300(%rdx), %rcx	# _9(D)->count,
 387      010000
 388 01af 488B9224 		movq	292(%rdx), %rdx	# _9(D)->count, tmp117
 388      010000
 389 01b6 48899024 		movq	%rdx, 292(%rax)	# tmp117, this_10(D)->count
 389      010000
 390 01bd 4889882C 		movq	%rcx, 300(%rax)	#, this_10(D)->count
 390      010000
 391 01c4 488B45E0 		movq	-32(%rbp), %rax	# D.46695, tmp118
 392 01c8 8B903401 		movl	308(%rax), %edx	# _9(D)->line_count, _8
 392      0000
 393 01ce 488B45E8 		movq	-24(%rbp), %rax	# this, tmp119
 394 01d2 89903401 		movl	%edx, 308(%rax)	# _8, this_10(D)->line_count
 394      0000
 395 01d8 488B45E8 		movq	-24(%rbp), %rax	# this, _18
 396 01dc 4883C418 		addq	$24, %rsp	#,
 397 01e0 5B       		popq	%rbx	#
 398 01e1 5D       		popq	%rbp	#
 399              		.cfi_def_cfa 7, 8
 400 01e2 C3       		ret	
 401              		.cfi_endproc
 402              	.LFE2163:
 404              		.section	.rodata
 405              	.LC0:
 406 0001 43617461 		.string	"Catalog output:\n"
 406      6C6F6720 
 406      6F757470 
 406      75743A0A 
 406      00
 407              		.text
 408              		.globl	main
 410              	main:
 411              	.LFB2153:
  49:Catalog.cpp   **** 
  50:Catalog.cpp   ****     string title;
  51:Catalog.cpp   ****     string first_name;
  52:Catalog.cpp   ****     string last_name;
  53:Catalog.cpp   ****     int word_count = 0;
  54:Catalog.cpp   ****     Letter_Count count[26];
  55:Catalog.cpp   ****     int line_count = 0;
  56:Catalog.cpp   **** 
  57:Catalog.cpp   **** };
  58:Catalog.cpp   **** 
  59:Catalog.cpp   **** // Opens file
  60:Catalog.cpp   **** void get_file(fstream*);
  61:Catalog.cpp   **** // Fills catalog struct
  62:Catalog.cpp   **** Catalog fill_catalog(fstream *);
  63:Catalog.cpp   **** // Checks if char is puncuation or a space
  64:Catalog.cpp   **** bool word_check(char);
  65:Catalog.cpp   **** // Returns a formated string from the structure of Catalog
  66:Catalog.cpp   **** string catalog_card(Catalog &);
  67:Catalog.cpp   **** // Saves the catalog to a file
  68:Catalog.cpp   **** void output_catalog(string&);
  69:Catalog.cpp   **** 
  70:Catalog.cpp   **** //Returns if the user wants to continue
  71:Catalog.cpp   **** bool continue_entry();
  72:Catalog.cpp   **** // Returns total letter count
  73:Catalog.cpp   **** int letter_total(Catalog&);
  74:Catalog.cpp   **** // Prints the letter frequency percent
  75:Catalog.cpp   **** void letter_output(Catalog&);
  76:Catalog.cpp   **** 
  77:Catalog.cpp   **** int main() {
 412              		.loc 2 77 12
 413              		.cfi_startproc
 414              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 415              		.cfi_lsda 0x1b,.LLSDA2153
 416 0000 55       		pushq	%rbp	#
 417              		.cfi_def_cfa_offset 16
 418              		.cfi_offset 6, -16
 419 0001 4889E5   		movq	%rsp, %rbp	#,
 420              		.cfi_def_cfa_register 6
 421 0004 53       		pushq	%rbx	#
 422 0005 4881ECE8 		subq	$1256, %rsp	#,
 422      040000
 423              		.cfi_offset 3, -24
 424              	# Catalog.cpp:77: int main() {
 425              		.loc 2 77 12
 426 000c 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp125
 426      25280000 
 426      00
 427 0015 488945E8 		movq	%rax, -24(%rbp)	# tmp125, D.51539
 428 0019 31C0     		xorl	%eax, %eax	# tmp125
 429              	.L9:
 430              	.LBB4:
 431              	# Catalog.cpp:81:         fstream ifile;
  78:Catalog.cpp   **** 
  79:Catalog.cpp   ****     do {
  80:Catalog.cpp   ****         //create empty file stream object
  81:Catalog.cpp   ****         fstream ifile;
 432              		.loc 2 81 17
 433 001b 488D85D0 		leaq	-560(%rbp), %rax	#, tmp93
 433      FDFFFF
 434 0022 4889C7   		movq	%rax, %rdi	# tmp93,
 435              	.LEHB0:
 436 0025 E8000000 		call	_ZNSt13basic_fstreamIcSt11char_traitsIcEEC1Ev@PLT	#
 436      00
 437              	.LEHE0:
 438              	# Catalog.cpp:83:         Catalog entry;
  82:Catalog.cpp   ****         //create empty Catalog object for use
  83:Catalog.cpp   ****         Catalog entry;
 439              		.loc 2 83 17
 440 002a 488D8550 		leaq	-1200(%rbp), %rax	#, tmp94
 440      FBFFFF
 441 0031 4889C7   		movq	%rax, %rdi	# tmp94,
 442 0034 E8000000 		call	_ZN7CatalogC1Ev	#
 442      00
 443              	# Catalog.cpp:85:         string ostring;
  84:Catalog.cpp   ****         //create empty string for output and entry into
  85:Catalog.cpp   ****         string ostring;
 444              		.loc 2 85 16
 445 0039 488D8510 		leaq	-1264(%rbp), %rax	#, tmp95
 445      FBFFFF
 446 0040 4889C7   		movq	%rax, %rdi	# tmp95,
 447 0043 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@PLT	#
 447      00
 448              	# Catalog.cpp:88:         get_file(&ifile);
  86:Catalog.cpp   **** 
  87:Catalog.cpp   ****         //open the file in new stream
  88:Catalog.cpp   ****         get_file(&ifile);
 449              		.loc 2 88 17
 450 0048 488D85D0 		leaq	-560(%rbp), %rax	#, tmp96
 450      FDFFFF
 451 004f 4889C7   		movq	%rax, %rdi	# tmp96,
 452              	.LEHB1:
 453 0052 E8000000 		call	_Z8get_filePSt13basic_fstreamIcSt11char_traitsIcEE	#
 453      00
 454              	# Catalog.cpp:90:         entry = fill_catalog(&ifile);
  89:Catalog.cpp   ****         //fill catalog from file stream and close
  90:Catalog.cpp   ****         entry = fill_catalog(&ifile);
 455              		.loc 2 90 29
 456 0057 488D8590 		leaq	-880(%rbp), %rax	#, tmp97
 456      FCFFFF
 457 005e 488D95D0 		leaq	-560(%rbp), %rdx	#, tmp98
 457      FDFFFF
 458 0065 4889D6   		movq	%rdx, %rsi	# tmp98,
 459 0068 4889C7   		movq	%rax, %rdi	# tmp97,
 460 006b E8000000 		call	_Z12fill_catalogPSt13basic_fstreamIcSt11char_traitsIcEE	#
 460      00
 461              	# Catalog.cpp:90:         entry = fill_catalog(&ifile);
 462              		.loc 2 90 36 discriminator 1
 463 0070 488D9590 		leaq	-880(%rbp), %rdx	#, tmp99
 463      FCFFFF
 464 0077 488D8550 		leaq	-1200(%rbp), %rax	#, tmp100
 464      FBFFFF
 465 007e 4889D6   		movq	%rdx, %rsi	# tmp99,
 466 0081 4889C7   		movq	%rax, %rdi	# tmp100,
 467 0084 E8000000 		call	_ZN7CatalogaSEOS_	#
 467      00
 468              	# Catalog.cpp:90:         entry = fill_catalog(&ifile);
 469              		.loc 2 90 29 discriminator 1
 470 0089 488D8590 		leaq	-880(%rbp), %rax	#, tmp101
 470      FCFFFF
 471 0090 4889C7   		movq	%rax, %rdi	# tmp101,
 472 0093 E8000000 		call	_ZN7CatalogD1Ev	#
 472      00
 473              	# Catalog.cpp:91:         ifile.close();
  91:Catalog.cpp   ****         ifile.close();
 474              		.loc 2 91 20 discriminator 1
 475 0098 488D85D0 		leaq	-560(%rbp), %rax	#, tmp102
 475      FDFFFF
 476 009f 4889C7   		movq	%rax, %rdi	# tmp102,
 477 00a2 E8000000 		call	_ZNSt13basic_fstreamIcSt11char_traitsIcEE5closeEv@PLT	#
 477      00
 478              	# Catalog.cpp:94:         ostring = catalog_card(entry);
  92:Catalog.cpp   **** 
  93:Catalog.cpp   ****         //Create String from the Catalog
  94:Catalog.cpp   ****         ostring = catalog_card(entry);
 479              		.loc 2 94 31
 480 00a7 488D8530 		leaq	-1232(%rbp), %rax	#, tmp103
 480      FBFFFF
 481 00ae 488D9550 		leaq	-1200(%rbp), %rdx	#, tmp104
 481      FBFFFF
 482 00b5 4889D6   		movq	%rdx, %rsi	# tmp104,
 483 00b8 4889C7   		movq	%rax, %rdi	# tmp103,
 484 00bb E8000000 		call	_Z12catalog_cardB5cxx11R7Catalog	#
 484      00
 485              	# Catalog.cpp:94:         ostring = catalog_card(entry);
 486              		.loc 2 94 37 discriminator 1
 487 00c0 488D9530 		leaq	-1232(%rbp), %rdx	#, tmp105
 487      FBFFFF
 488 00c7 488D8510 		leaq	-1264(%rbp), %rax	#, tmp106
 488      FBFFFF
 489 00ce 4889D6   		movq	%rdx, %rsi	# tmp105,
 490 00d1 4889C7   		movq	%rax, %rdi	# tmp106,
 491 00d4 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@PLT	#
 491      00
 492              	# Catalog.cpp:94:         ostring = catalog_card(entry);
 493              		.loc 2 94 31 discriminator 1
 494 00d9 488D8530 		leaq	-1232(%rbp), %rax	#, tmp107
 494      FBFFFF
 495 00e0 4889C7   		movq	%rax, %rdi	# tmp107,
 496 00e3 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 496      00
 497              	# Catalog.cpp:97:         cout << "Catalog output:\n" << ostring << endl;
  95:Catalog.cpp   **** 
  96:Catalog.cpp   ****         //output this entry
  97:Catalog.cpp   ****         cout << "Catalog output:\n" << ostring << endl;
 498              		.loc 2 97 40 discriminator 1
 499 00e8 488D3500 		leaq	.LC0(%rip), %rsi	#,
 499      000000
 500 00ef 488D3D00 		leaq	_ZSt4cout(%rip), %rdi	#,
 500      000000
 501 00f6 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 501      00
 502 00fb 4889C2   		movq	%rax, %rdx	#, _1
 503 00fe 488D8510 		leaq	-1264(%rbp), %rax	#, tmp108
 503      FBFFFF
 504 0105 4889C6   		movq	%rax, %rsi	# tmp108,
 505 0108 4889D7   		movq	%rdx, %rdi	# _1,
 506 010b E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 506      00
 507 0110 4889C2   		movq	%rax, %rdx	#, _2
 508              	# Catalog.cpp:97:         cout << "Catalog output:\n" << ostring << endl;
 509              		.loc 2 97 51 discriminator 1
 510 0113 488B0500 		movq	_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GOTPCREL(%rip), %rax	#, tmp109
 510      000000
 511 011a 4889C6   		movq	%rax, %rsi	# tmp109,
 512 011d 4889D7   		movq	%rdx, %rdi	# _2,
 513 0120 E8000000 		call	_ZNSolsEPFRSoS_E@PLT	#
 513      00
 514              	# Catalog.cpp:100:         letter_output(entry);
  98:Catalog.cpp   **** 
  99:Catalog.cpp   ****         //output the letter frequency if they want
 100:Catalog.cpp   ****         letter_output(entry);
 515              		.loc 2 100 22
 516 0125 488D8550 		leaq	-1200(%rbp), %rax	#, tmp110
 516      FBFFFF
 517 012c 4889C7   		movq	%rax, %rdi	# tmp110,
 518 012f E8000000 		call	_Z13letter_outputR7Catalog	#
 518      00
 519              	# Catalog.cpp:103:         output_catalog(ostring);
 101:Catalog.cpp   **** 
 102:Catalog.cpp   ****         //Output into file
 103:Catalog.cpp   ****         output_catalog(ostring);
 520              		.loc 2 103 23
 521 0134 488D8510 		leaq	-1264(%rbp), %rax	#, tmp111
 521      FBFFFF
 522 013b 4889C7   		movq	%rax, %rdi	# tmp111,
 523 013e E8000000 		call	_Z14output_catalogRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE	#
 523      00
 524              	.LEHE1:
 525              	# Catalog.cpp:85:         string ostring;
  85:Catalog.cpp   **** 
 526              		.loc 2 85 16
 527 0143 488D8510 		leaq	-1264(%rbp), %rax	#, tmp112
 527      FBFFFF
 528 014a 4889C7   		movq	%rax, %rdi	# tmp112,
 529 014d E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 529      00
 530              	# Catalog.cpp:83:         Catalog entry;
  83:Catalog.cpp   ****         //create empty string for output and entry into
 531              		.loc 2 83 17
 532 0152 488D8550 		leaq	-1200(%rbp), %rax	#, tmp113
 532      FBFFFF
 533 0159 4889C7   		movq	%rax, %rdi	# tmp113,
 534 015c E8000000 		call	_ZN7CatalogD1Ev	#
 534      00
 535              	# Catalog.cpp:81:         fstream ifile;
  81:Catalog.cpp   ****         //create empty Catalog object for use
 536              		.loc 2 81 17
 537 0161 488D85D0 		leaq	-560(%rbp), %rax	#, tmp114
 537      FDFFFF
 538 0168 4889C7   		movq	%rax, %rdi	# tmp114,
 539 016b E8000000 		call	_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@PLT	#
 539      00
 540              	.LEHB2:
 541              	.LBE4:
 542              	# Catalog.cpp:105:     } while(continue_entry());
 104:Catalog.cpp   **** 
 105:Catalog.cpp   ****     } while(continue_entry());
 543              		.loc 2 105 27
 544 0170 E8000000 		call	_Z14continue_entryv	#
 544      00
 545 0175 84C0     		testb	%al, %al	# _34
 546 0177 7405     		je	.L8	#,
 547              	# Catalog.cpp:79:     do {
  79:Catalog.cpp   ****         //create empty file stream object
 548              		.loc 2 79 5
 549 0179 E99DFEFF 		jmp	.L9	#
 549      FF
 550              	.L8:
 551              	# Catalog.cpp:106:     return 0;
 106:Catalog.cpp   ****     return 0;
 552              		.loc 2 106 12
 553 017e B8000000 		movl	$0, %eax	#, _36
 553      00
 554              	# Catalog.cpp:107: }
 107:Catalog.cpp   **** }
 555              		.loc 2 107 1
 556 0183 488B4DE8 		movq	-24(%rbp), %rcx	# D.51539, tmp126
 557 0187 6448330C 		xorq	%fs:40, %rcx	# MEM[(<address-space-1> long unsigned int *)40B], tmp126
 557      25280000 
 557      00
 558 0190 7442     		je	.L12	#,
 559 0192 EB3B     		jmp	.L14	#
 560              	.L13:
 561 0194 4889C3   		movq	%rax, %rbx	#, tmp118
 562              	.LBB5:
 563              	# Catalog.cpp:85:         string ostring;
  85:Catalog.cpp   **** 
 564              		.loc 2 85 16
 565 0197 488D8510 		leaq	-1264(%rbp), %rax	#, tmp116
 565      FBFFFF
 566 019e 4889C7   		movq	%rax, %rdi	# tmp116,
 567 01a1 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 567      00
 568              	# Catalog.cpp:83:         Catalog entry;
  83:Catalog.cpp   ****         //create empty string for output and entry into
 569              		.loc 2 83 17
 570 01a6 488D8550 		leaq	-1200(%rbp), %rax	#, tmp121
 570      FBFFFF
 571 01ad 4889C7   		movq	%rax, %rdi	# tmp121,
 572 01b0 E8000000 		call	_ZN7CatalogD1Ev	#
 572      00
 573              	# Catalog.cpp:81:         fstream ifile;
  81:Catalog.cpp   ****         //create empty Catalog object for use
 574              		.loc 2 81 17
 575 01b5 488D85D0 		leaq	-560(%rbp), %rax	#, tmp124
 575      FDFFFF
 576 01bc 4889C7   		movq	%rax, %rdi	# tmp124,
 577 01bf E8000000 		call	_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@PLT	#
 577      00
 578 01c4 4889D8   		movq	%rbx, %rax	# tmp122, D.51538
 579 01c7 4889C7   		movq	%rax, %rdi	# D.51538,
 580 01ca E8000000 		call	_Unwind_Resume@PLT	#
 580      00
 581              	.LEHE2:
 582              	.L14:
 583              	.LBE5:
 584              	# Catalog.cpp:107: }
 585              		.loc 2 107 1
 586 01cf E8000000 		call	__stack_chk_fail@PLT	#
 586      00
 587              	.L12:
 588 01d4 4881C4E8 		addq	$1256, %rsp	#,
 588      040000
 589 01db 5B       		popq	%rbx	#
 590 01dc 5D       		popq	%rbp	#
 591              		.cfi_def_cfa 7, 8
 592 01dd C3       		ret	
 593              		.cfi_endproc
 594              	.LFE2153:
 595              		.globl	__gxx_personality_v0
 596              		.section	.gcc_except_table,"a",@progbits
 597              	.LLSDA2153:
 598 0000 FF       		.byte	0xff
 599 0001 FF       		.byte	0xff
 600 0002 01       		.byte	0x1
 601 0003 0F       		.uleb128 .LLSDACSE2153-.LLSDACSB2153
 602              	.LLSDACSB2153:
 603 0004 25       		.uleb128 .LEHB0-.LFB2153
 604 0005 05       		.uleb128 .LEHE0-.LEHB0
 605 0006 00       		.uleb128 0
 606 0007 00       		.uleb128 0
 607 0008 52       		.uleb128 .LEHB1-.LFB2153
 608 0009 F101     		.uleb128 .LEHE1-.LEHB1
 609 000b 9403     		.uleb128 .L13-.LFB2153
 610 000d 00       		.uleb128 0
 611 000e F002     		.uleb128 .LEHB2-.LFB2153
 612 0010 5F       		.uleb128 .LEHE2-.LEHB2
 613 0011 00       		.uleb128 0
 614 0012 00       		.uleb128 0
 615              	.LLSDACSE2153:
 616              		.text
 618              		.section	.text._ZNSt9exceptionC2ERKS_,"axG",@progbits,_ZNSt9exceptionC5ERKS_,comdat
 619              		.align 2
 620              		.weak	_ZNSt9exceptionC2ERKS_
 622              	_ZNSt9exceptionC2ERKS_:
 623              	.LFB2166:
 624              		.file 3 "/usr/include/c++/8/bits/exception.h"
   1:/usr/include/c++/8/bits/exception.h **** // Exception Handling support header for -*- C++ -*-
   2:/usr/include/c++/8/bits/exception.h **** 
   3:/usr/include/c++/8/bits/exception.h **** // Copyright (C) 2016-2018 Free Software Foundation, Inc.
   4:/usr/include/c++/8/bits/exception.h **** //
   5:/usr/include/c++/8/bits/exception.h **** // This file is part of GCC.
   6:/usr/include/c++/8/bits/exception.h **** //
   7:/usr/include/c++/8/bits/exception.h **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/include/c++/8/bits/exception.h **** // it under the terms of the GNU General Public License as published by
   9:/usr/include/c++/8/bits/exception.h **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/8/bits/exception.h **** // any later version.
  11:/usr/include/c++/8/bits/exception.h **** //
  12:/usr/include/c++/8/bits/exception.h **** // GCC is distributed in the hope that it will be useful,
  13:/usr/include/c++/8/bits/exception.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/8/bits/exception.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/8/bits/exception.h **** // GNU General Public License for more details.
  16:/usr/include/c++/8/bits/exception.h **** //
  17:/usr/include/c++/8/bits/exception.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/8/bits/exception.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/8/bits/exception.h **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/8/bits/exception.h **** 
  21:/usr/include/c++/8/bits/exception.h **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/8/bits/exception.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/8/bits/exception.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/8/bits/exception.h **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/8/bits/exception.h **** 
  26:/usr/include/c++/8/bits/exception.h **** /** @file bits/exception.h
  27:/usr/include/c++/8/bits/exception.h ****  *  This is an internal header file, included by other library headers.
  28:/usr/include/c++/8/bits/exception.h ****  *  Do not attempt to use it directly.
  29:/usr/include/c++/8/bits/exception.h ****  */
  30:/usr/include/c++/8/bits/exception.h **** 
  31:/usr/include/c++/8/bits/exception.h **** #ifndef __EXCEPTION_H
  32:/usr/include/c++/8/bits/exception.h **** #define __EXCEPTION_H 1
  33:/usr/include/c++/8/bits/exception.h **** 
  34:/usr/include/c++/8/bits/exception.h **** #pragma GCC system_header
  35:/usr/include/c++/8/bits/exception.h **** 
  36:/usr/include/c++/8/bits/exception.h **** #pragma GCC visibility push(default)
  37:/usr/include/c++/8/bits/exception.h **** 
  38:/usr/include/c++/8/bits/exception.h **** #include <bits/c++config.h>
  39:/usr/include/c++/8/bits/exception.h **** 
  40:/usr/include/c++/8/bits/exception.h **** extern "C++" {
  41:/usr/include/c++/8/bits/exception.h **** 
  42:/usr/include/c++/8/bits/exception.h **** namespace std
  43:/usr/include/c++/8/bits/exception.h **** {
  44:/usr/include/c++/8/bits/exception.h ****   /**
  45:/usr/include/c++/8/bits/exception.h ****    * @defgroup exceptions Exceptions
  46:/usr/include/c++/8/bits/exception.h ****    * @ingroup diagnostics
  47:/usr/include/c++/8/bits/exception.h ****    *
  48:/usr/include/c++/8/bits/exception.h ****    * Classes and functions for reporting errors via exception classes.
  49:/usr/include/c++/8/bits/exception.h ****    * @{
  50:/usr/include/c++/8/bits/exception.h ****    */
  51:/usr/include/c++/8/bits/exception.h **** 
  52:/usr/include/c++/8/bits/exception.h ****   /**
  53:/usr/include/c++/8/bits/exception.h ****    *  @brief Base class for all library exceptions.
  54:/usr/include/c++/8/bits/exception.h ****    *
  55:/usr/include/c++/8/bits/exception.h ****    *  This is the base class for all exceptions thrown by the standard
  56:/usr/include/c++/8/bits/exception.h ****    *  library, and by certain language expressions.  You are free to derive
  57:/usr/include/c++/8/bits/exception.h ****    *  your own %exception classes, or use a different hierarchy, or to
  58:/usr/include/c++/8/bits/exception.h ****    *  throw non-class data (e.g., fundamental types).
  59:/usr/include/c++/8/bits/exception.h ****    */
  60:/usr/include/c++/8/bits/exception.h ****   class exception
 625              		.loc 3 60 9
 626              		.cfi_startproc
 627 0000 55       		pushq	%rbp	#
 628              		.cfi_def_cfa_offset 16
 629              		.cfi_offset 6, -16
 630 0001 4889E5   		movq	%rsp, %rbp	#,
 631              		.cfi_def_cfa_register 6
 632 0004 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 633 0008 488975F0 		movq	%rsi, -16(%rbp)	# D.3628, D.3628
 634              	.LBB6:
 635              	# /usr/include/c++/8/bits/exception.h:60:   class exception
 636              		.loc 3 60 9
 637 000c 488D1500 		leaq	16+_ZTVSt9exception(%rip), %rdx	#, _1
 637      000000
 638 0013 488B45F8 		movq	-8(%rbp), %rax	# this, tmp88
 639 0017 488910   		movq	%rdx, (%rax)	# _1, this_3(D)->_vptr.exception
 640              	.LBE6:
 641 001a 90       		nop	
 642 001b 5D       		popq	%rbp	#
 643              		.cfi_def_cfa 7, 8
 644 001c C3       		ret	
 645              		.cfi_endproc
 646              	.LFE2166:
 648              		.weak	_ZNSt9exceptionC1ERKS_
 649              		.set	_ZNSt9exceptionC1ERKS_,_ZNSt9exceptionC2ERKS_
 650              		.section	.rodata
 651 0012 00000000 		.align 8
 651      0000
 652              	.LC1:
 653 0018 506C6561 		.string	"Please input the file name to catalog: "
 653      73652069 
 653      6E707574 
 653      20746865 
 653      2066696C 
 654              	.LC2:
 655 0040 2A2A2A46 		.string	"***File read error***"
 655      696C6520 
 655      72656164 
 655      20657272 
 655      6F722A2A 
 656              		.text
 657              		.globl	_Z8get_filePSt13basic_fstreamIcSt11char_traitsIcEE
 659              	_Z8get_filePSt13basic_fstreamIcSt11char_traitsIcEE:
 660              	.LFB2164:
 108:Catalog.cpp   **** 
 109:Catalog.cpp   **** void get_file(fstream *ifile) {
 661              		.loc 2 109 31
 662              		.cfi_startproc
 663              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 664              		.cfi_lsda 0x1b,.LLSDA2164
 665 01de 55       		pushq	%rbp	#
 666              		.cfi_def_cfa_offset 16
 667              		.cfi_offset 6, -16
 668 01df 4889E5   		movq	%rsp, %rbp	#,
 669              		.cfi_def_cfa_register 6
 670 01e2 4154     		pushq	%r12	#
 671 01e4 53       		pushq	%rbx	#
 672 01e5 4881EC60 		subq	$608, %rsp	#,
 672      020000
 673              		.cfi_offset 12, -24
 674              		.cfi_offset 3, -32
 675 01ec 4889BD98 		movq	%rdi, -616(%rbp)	# ifile, ifile
 675      FDFFFF
 676              	# Catalog.cpp:109: void get_file(fstream *ifile) {
 677              		.loc 2 109 31
 678 01f3 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp123
 678      25280000 
 678      00
 679 01fc 488945E8 		movq	%rax, -24(%rbp)	# tmp123, D.51547
 680 0200 31C0     		xorl	%eax, %eax	# tmp123
 681              	.L18:
 682              	.LBB7:
 683              	# Catalog.cpp:115:         string input;
 110:Catalog.cpp   **** 
 111:Catalog.cpp   ****     //Continues until file opening is completed
 112:Catalog.cpp   ****     do {
 113:Catalog.cpp   **** 
 114:Catalog.cpp   ****         // Reads input from user as to the name of the file to be opened
 115:Catalog.cpp   ****         string input;
 684              		.loc 2 115 16
 685 0202 488D85B0 		leaq	-592(%rbp), %rax	#, tmp98
 685      FDFFFF
 686 0209 4889C7   		movq	%rax, %rdi	# tmp98,
 687 020c E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@PLT	#
 687      00
 688              	# Catalog.cpp:116:         cout << "Please input the file name to catalog: ";
 116:Catalog.cpp   ****         cout << "Please input the file name to catalog: ";
 689              		.loc 2 116 17
 690 0211 488D3500 		leaq	.LC1(%rip), %rsi	#,
 690      000000
 691 0218 488D3D00 		leaq	_ZSt4cout(%rip), %rdi	#,
 691      000000
 692              	.LEHB3:
 693 021f E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 693      00
 694              	# Catalog.cpp:117:         cin >> input;
 117:Catalog.cpp   ****         cin >> input;
 695              		.loc 2 117 16
 696 0224 488D85B0 		leaq	-592(%rbp), %rax	#, tmp99
 696      FDFFFF
 697 022b 4889C6   		movq	%rax, %rsi	# tmp99,
 698 022e 488D3D00 		leaq	_ZSt3cin(%rip), %rdi	#,
 698      000000
 699 0235 E8000000 		call	_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_
 699      00
 700              	# Catalog.cpp:118:         cin.ignore();
 118:Catalog.cpp   ****         cin.ignore();
 701              		.loc 2 118 20
 702 023a 488D3D00 		leaq	_ZSt3cin(%rip), %rdi	#,
 702      000000
 703 0241 E8000000 		call	_ZNSi6ignoreEv@PLT	#
 703      00
 704              	.LEHE3:
 705              	# Catalog.cpp:123:             *ifile = fstream(input, ios::in);
 119:Catalog.cpp   ****         
 120:Catalog.cpp   ****         try {
 121:Catalog.cpp   ****             // Attempts to open the by creating a new fstream
 122:Catalog.cpp   ****             // Honestly unsure whether this may leak memory
 123:Catalog.cpp   ****             *ifile = fstream(input, ios::in);
 706              		.loc 2 123 22
 707 0246 488D8DB0 		leaq	-592(%rbp), %rcx	#, tmp100
 707      FDFFFF
 708 024d 488D85D0 		leaq	-560(%rbp), %rax	#, tmp101
 708      FDFFFF
 709 0254 BA080000 		movl	$8, %edx	#,
 709      00
 710 0259 4889CE   		movq	%rcx, %rsi	# tmp100,
 711 025c 4889C7   		movq	%rax, %rdi	# tmp101,
 712              	.LEHB4:
 713 025f E8000000 		call	_ZNSt13basic_fstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_O
 713      00
 714              	.LEHE4:
 715              	# Catalog.cpp:123:             *ifile = fstream(input, ios::in);
 716              		.loc 2 123 44 discriminator 1
 717 0264 488D95D0 		leaq	-560(%rbp), %rdx	#, tmp102
 717      FDFFFF
 718 026b 488B8598 		movq	-616(%rbp), %rax	# ifile, tmp103
 718      FDFFFF
 719 0272 4889D6   		movq	%rdx, %rsi	# tmp102,
 720 0275 4889C7   		movq	%rax, %rdi	# tmp103,
 721              	.LEHB5:
 722 0278 E8000000 		call	_ZNSt13basic_fstreamIcSt11char_traitsIcEEaSEOS2_@PLT	#
 722      00
 723              	.LEHE5:
 724              	# Catalog.cpp:123:             *ifile = fstream(input, ios::in);
 725              		.loc 2 123 22 discriminator 3
 726 027d 488D85D0 		leaq	-560(%rbp), %rax	#, tmp104
 726      FDFFFF
 727 0284 4889C7   		movq	%rax, %rdi	# tmp104,
 728 0287 E8000000 		call	_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@PLT	#
 728      00
 729              	.L23:
 730              	# Catalog.cpp:115:         string input;
 115:Catalog.cpp   ****         cout << "Please input the file name to catalog: ";
 731              		.loc 2 115 16
 732 028c 488D85B0 		leaq	-592(%rbp), %rax	#, tmp105
 732      FDFFFF
 733 0293 4889C7   		movq	%rax, %rdi	# tmp105,
 734 0296 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 734      00
 735              	.LBE7:
 736              	# Catalog.cpp:130:     }while(ifile->fail());
 124:Catalog.cpp   ****         }
 125:Catalog.cpp   ****         catch(exception) {
 126:Catalog.cpp   ****             // If it fails then rinse and repeat the file opening process
 127:Catalog.cpp   ****             cout << "***File read error***";
 128:Catalog.cpp   ****         }
 129:Catalog.cpp   ****     
 130:Catalog.cpp   ****     }while(ifile->fail());
 737              		.loc 2 130 23
 738 029b 488B8598 		movq	-616(%rbp), %rax	# ifile, tmp106
 738      FDFFFF
 739 02a2 488B00   		movq	(%rax), %rax	# ifile_19(D)->D.39185.D.35367._vptr.basic_istream, _4
 740 02a5 4883E818 		subq	$24, %rax	#, _5
 741 02a9 488B00   		movq	(%rax), %rax	# MEM[(long int *)_5], _6
 742 02ac 4889C2   		movq	%rax, %rdx	# _6, _7
 743 02af 488B8598 		movq	-616(%rbp), %rax	# ifile, tmp107
 743      FDFFFF
 744 02b6 4801D0   		addq	%rdx, %rax	# _7, _8
 745 02b9 4889C7   		movq	%rax, %rdi	# _8,
 746              	.LEHB6:
 747 02bc E8000000 		call	_ZNKSt9basic_iosIcSt11char_traitsIcEE4failEv@PLT	#
 747      00
 748              	.LEHE6:
 749 02c1 84C0     		testb	%al, %al	# _28
 750 02c3 0F84BA00 		je	.L30	#,
 750      0000
 751              	# Catalog.cpp:112:     do {
 112:Catalog.cpp   **** 
 752              		.loc 2 112 5
 753 02c9 E934FFFF 		jmp	.L18	#
 753      FF
 754              	.L28:
 755 02ce 4889C3   		movq	%rax, %rbx	#, tmp110
 756 02d1 4989D4   		movq	%rdx, %r12	#, tmp112
 757              	.LBB9:
 758              	# Catalog.cpp:123:             *ifile = fstream(input, ios::in);
 123:Catalog.cpp   ****         }
 759              		.loc 2 123 22
 760 02d4 488D85D0 		leaq	-560(%rbp), %rax	#, tmp108
 760      FDFFFF
 761 02db 4889C7   		movq	%rax, %rdi	# tmp108,
 762 02de E8000000 		call	_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@PLT	#
 762      00
 763 02e3 4C89E0   		movq	%r12, %rax	# tmp112, tmp111
 764 02e6 EB06     		jmp	.L20	#
 765              	.L27:
 766 02e8 4889C3   		movq	%rax, %rbx	#, tmp109
 767 02eb 4889D0   		movq	%rdx, %rax	#, tmp111
 768              	.L20:
 769 02ee 4883F801 		cmpq	$1, %rax	#, D.51545
 770 02f2 7402     		je	.L21	#,
 771 02f4 EB73     		jmp	.L22	#
 772              	.L21:
 773              	.LBB8:
 774              	# Catalog.cpp:125:         catch(exception) {
 125:Catalog.cpp   ****             // If it fails then rinse and repeat the file opening process
 775              		.loc 2 125 15
 776 02f6 4889D8   		movq	%rbx, %rax	# tmp109, _1
 777 02f9 4889C7   		movq	%rax, %rdi	# _1,
 778 02fc E8000000 		call	__cxa_get_exception_ptr@PLT	#
 778      00
 779 0301 4889C2   		movq	%rax, %rdx	#, _2
 780 0304 488D85A8 		leaq	-600(%rbp), %rax	#, tmp115
 780      FDFFFF
 781 030b 4889D6   		movq	%rdx, %rsi	# _2,
 782 030e 4889C7   		movq	%rax, %rdi	# tmp115,
 783 0311 E8000000 		call	_ZNSt9exceptionC1ERKS_	#
 783      00
 784 0316 4889D8   		movq	%rbx, %rax	# tmp109, _3
 785 0319 4889C7   		movq	%rax, %rdi	# _3,
 786 031c E8000000 		call	__cxa_begin_catch@PLT	#
 786      00
 787              	# Catalog.cpp:127:             cout << "***File read error***";
 127:Catalog.cpp   ****         }
 788              		.loc 2 127 21
 789 0321 488D3500 		leaq	.LC2(%rip), %rsi	#,
 789      000000
 790 0328 488D3D00 		leaq	_ZSt4cout(%rip), %rdi	#,
 790      000000
 791              	.LEHB7:
 792 032f E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 792      00
 793              	.LEHE7:
 794              	# Catalog.cpp:125:         catch(exception) {
 125:Catalog.cpp   ****             // If it fails then rinse and repeat the file opening process
 795              		.loc 2 125 15
 796 0334 488D85A8 		leaq	-600(%rbp), %rax	#, tmp116
 796      FDFFFF
 797 033b 4889C7   		movq	%rax, %rdi	# tmp116,
 798 033e E8000000 		call	_ZNSt9exceptionD1Ev@PLT	#
 798      00
 799 0343 E8000000 		call	__cxa_end_catch@PLT	#
 799      00
 800 0348 E93FFFFF 		jmp	.L23	#
 800      FF
 801              	.L29:
 802 034d 4889C3   		movq	%rax, %rbx	#, tmp119
 803 0350 488D85A8 		leaq	-600(%rbp), %rax	#, tmp117
 803      FDFFFF
 804 0357 4889C7   		movq	%rax, %rdi	# tmp117,
 805 035a E8000000 		call	_ZNSt9exceptionD1Ev@PLT	#
 805      00
 806 035f E8000000 		call	__cxa_end_catch@PLT	#
 806      00
 807 0364 EB03     		jmp	.L22	#
 808              	.L26:
 809 0366 4889C3   		movq	%rax, %rbx	#, tmp113
 810              	.L22:
 811              	.LBE8:
 812              	# Catalog.cpp:115:         string input;
 115:Catalog.cpp   ****         cout << "Please input the file name to catalog: ";
 813              		.loc 2 115 16
 814 0369 488D85B0 		leaq	-592(%rbp), %rax	#, tmp122
 814      FDFFFF
 815 0370 4889C7   		movq	%rax, %rdi	# tmp122,
 816 0373 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 816      00
 817 0378 4889D8   		movq	%rbx, %rax	# tmp113, D.51546
 818 037b 4889C7   		movq	%rax, %rdi	# D.51546,
 819              	.LEHB8:
 820 037e E8000000 		call	_Unwind_Resume@PLT	#
 820      00
 821              	.LEHE8:
 822              	.L30:
 823              	.LBE9:
 824              	# Catalog.cpp:131: }
 131:Catalog.cpp   **** }
 825              		.loc 2 131 1
 826 0383 90       		nop	
 827 0384 488B45E8 		movq	-24(%rbp), %rax	# D.51547, tmp124
 828 0388 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp124
 828      25280000 
 828      00
 829 0391 7405     		je	.L25	#,
 830 0393 E8000000 		call	__stack_chk_fail@PLT	#
 830      00
 831              	.L25:
 832 0398 4881C460 		addq	$608, %rsp	#,
 832      020000
 833 039f 5B       		popq	%rbx	#
 834 03a0 415C     		popq	%r12	#
 835 03a2 5D       		popq	%rbp	#
 836              		.cfi_def_cfa 7, 8
 837 03a3 C3       		ret	
 838              		.cfi_endproc
 839              	.LFE2164:
 840              		.section	.gcc_except_table
 841 0013 00       		.align 4
 842              	.LLSDA2164:
 843 0014 FF       		.byte	0xff
 844 0015 9B       		.byte	0x9b
 845 0016 2D       		.uleb128 .LLSDATT2164-.LLSDATTD2164
 846              	.LLSDATTD2164:
 847 0017 01       		.byte	0x1
 848 0018 21       		.uleb128 .LLSDACSE2164-.LLSDACSB2164
 849              	.LLSDACSB2164:
 850 0019 41       		.uleb128 .LEHB3-.LFB2164
 851 001a 27       		.uleb128 .LEHE3-.LEHB3
 852 001b 8803     		.uleb128 .L26-.LFB2164
 853 001d 00       		.uleb128 0
 854 001e 8101     		.uleb128 .LEHB4-.LFB2164
 855 0020 05       		.uleb128 .LEHE4-.LEHB4
 856 0021 8A02     		.uleb128 .L27-.LFB2164
 857 0023 03       		.uleb128 0x3
 858 0024 9A01     		.uleb128 .LEHB5-.LFB2164
 859 0026 05       		.uleb128 .LEHE5-.LEHB5
 860 0027 F001     		.uleb128 .L28-.LFB2164
 861 0029 03       		.uleb128 0x3
 862 002a DE01     		.uleb128 .LEHB6-.LFB2164
 863 002c 05       		.uleb128 .LEHE6-.LEHB6
 864 002d 00       		.uleb128 0
 865 002e 00       		.uleb128 0
 866 002f D102     		.uleb128 .LEHB7-.LFB2164
 867 0031 05       		.uleb128 .LEHE7-.LEHB7
 868 0032 EF02     		.uleb128 .L29-.LFB2164
 869 0034 00       		.uleb128 0
 870 0035 A003     		.uleb128 .LEHB8-.LFB2164
 871 0037 05       		.uleb128 .LEHE8-.LEHB8
 872 0038 00       		.uleb128 0
 873 0039 00       		.uleb128 0
 874              	.LLSDACSE2164:
 875 003a 00       		.byte	0
 876 003b 00       		.byte	0
 877 003c 01       		.byte	0x1
 878 003d 7D       		.byte	0x7d
 879 003e 0000     		.align 4
 880 0040 00000000 		.long	DW.ref._ZTISt9exception-.
 881              	.LLSDATT2164:
 882              		.text
 884              		.section	.rodata
 885              	.LC3:
 886 0056 436F6E74 		.string	"Contents:"
 886      656E7473 
 886      3A00
 887              		.text
 888              		.globl	_Z12fill_catalogPSt13basic_fstreamIcSt11char_traitsIcEE
 890              	_Z12fill_catalogPSt13basic_fstreamIcSt11char_traitsIcEE:
 891              	.LFB2168:
 132:Catalog.cpp   **** 
 133:Catalog.cpp   **** Catalog fill_catalog(fstream *ifile) {
 892              		.loc 2 133 38
 893              		.cfi_startproc
 894              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 895              		.cfi_lsda 0x1b,.LLSDA2168
 896 03a4 55       		pushq	%rbp	#
 897              		.cfi_def_cfa_offset 16
 898              		.cfi_offset 6, -16
 899 03a5 4889E5   		movq	%rsp, %rbp	#,
 900              		.cfi_def_cfa_register 6
 901 03a8 4154     		pushq	%r12	#
 902 03aa 53       		pushq	%rbx	#
 903 03ab 4881ECA0 		subq	$160, %rsp	#,
 903      000000
 904              		.cfi_offset 12, -24
 905              		.cfi_offset 3, -32
 906 03b2 4889BD58 		movq	%rdi, -168(%rbp)	# .result_ptr, .result_ptr
 906      FFFFFF
 907 03b9 4889B550 		movq	%rsi, -176(%rbp)	# ifile, ifile
 907      FFFFFF
 908              	# Catalog.cpp:133: Catalog fill_catalog(fstream *ifile) {
 909              		.loc 2 133 38
 910 03c0 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp215
 910      25280000 
 910      00
 911 03c9 488945E8 		movq	%rax, -24(%rbp)	# tmp215, D.51554
 912 03cd 31C0     		xorl	%eax, %eax	# tmp215
 913              	# Catalog.cpp:136:     Catalog output;
 134:Catalog.cpp   ****     
 135:Catalog.cpp   ****     //init the output catalog
 136:Catalog.cpp   ****     Catalog output;
 914              		.loc 2 136 13
 915 03cf 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp142
 915      FFFFFF
 916 03d6 4889C7   		movq	%rax, %rdi	# tmp142,
 917 03d9 E8000000 		call	_ZN7CatalogC1Ev	#
 917      00
 918              	.LBB10:
 919              	# Catalog.cpp:139:     for(int i = 0; i < 26; i++) {
 137:Catalog.cpp   **** 
 138:Catalog.cpp   ****     //init letter counter
 139:Catalog.cpp   ****     for(int i = 0; i < 26; i++) {
 920              		.loc 2 139 13
 921 03de C7856CFF 		movl	$0, -148(%rbp)	#, i
 921      FFFF0000 
 921      0000
 922              	.L33:
 923              	# Catalog.cpp:139:     for(int i = 0; i < 26; i++) {
 924              		.loc 2 139 22 discriminator 3
 925 03e8 83BD6CFF 		cmpl	$25, -148(%rbp)	#, i
 925      FFFF19
 926 03ef 7F3E     		jg	.L32	#,
 927              	# Catalog.cpp:140:         output.count[i] = INIT_COUNT[i];
 140:Catalog.cpp   ****         output.count[i] = INIT_COUNT[i];
 928              		.loc 2 140 25 discriminator 2
 929 03f1 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp143
 929      FFFFFF
 930 03f8 8B956CFF 		movl	-148(%rbp), %edx	# i, tmp145
 930      FFFF
 931 03fe 4863D2   		movslq	%edx, %rdx	# tmp145, tmp144
 932 0401 488D4A0C 		leaq	12(%rdx), %rcx	#, tmp146
 933 0405 8B956CFF 		movl	-148(%rbp), %edx	# i, tmp148
 933      FFFF
 934 040b 4863D2   		movslq	%edx, %rdx	# tmp148, tmp147
 935 040e 488D34D5 		leaq	0(,%rdx,8), %rsi	#, tmp149
 935      00000000 
 936 0416 488D1500 		leaq	INIT_COUNT(%rip), %rdx	#, tmp150
 936      000000
 937 041d 488B1416 		movq	(%rsi,%rdx), %rdx	# INIT_COUNT, tmp151
 938 0421 488954C8 		movq	%rdx, 4(%rax,%rcx,8)	# tmp151, output_62(D)->count
 938      04
 939              	# Catalog.cpp:139:     for(int i = 0; i < 26; i++) {
 139:Catalog.cpp   ****         output.count[i] = INIT_COUNT[i];
 940              		.loc 2 139 5 discriminator 2
 941 0426 83856CFF 		addl	$1, -148(%rbp)	#, i
 941      FFFF01
 942 042d EBB9     		jmp	.L33	#
 943              	.L32:
 944              	.LBE10:
 945              	# Catalog.cpp:144:     getline(*ifile, output.title, '\r');
 141:Catalog.cpp   ****     }
 142:Catalog.cpp   **** 
 143:Catalog.cpp   ****     //get line which contains the title
 144:Catalog.cpp   ****     getline(*ifile, output.title, '\r');
 946              		.loc 2 144 28
 947 042f 488B8D58 		movq	-168(%rbp), %rcx	# <retval>, _1
 947      FFFFFF
 948              	# Catalog.cpp:144:     getline(*ifile, output.title, '\r');
 949              		.loc 2 144 39
 950 0436 488B8550 		movq	-176(%rbp), %rax	# ifile, _2
 950      FFFFFF
 951 043d BA0D0000 		movl	$13, %edx	#,
 951      00
 952 0442 4889CE   		movq	%rcx, %rsi	# _1,
 953 0445 4889C7   		movq	%rax, %rdi	# _2,
 954              	.LEHB9:
 955 0448 E8000000 		call	_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringI
 955      00
 956              	# Catalog.cpp:145:     ifile -> ignore();
 145:Catalog.cpp   ****     ifile -> ignore();
 957              		.loc 2 145 21
 958 044d 488B8550 		movq	-176(%rbp), %rax	# ifile, _3
 958      FFFFFF
 959 0454 4889C7   		movq	%rax, %rdi	# _3,
 960 0457 E8000000 		call	_ZNSi6ignoreEv@PLT	#
 960      00
 961              	# Catalog.cpp:148:     getline(*ifile, output.first_name, '\r');
 146:Catalog.cpp   **** 
 147:Catalog.cpp   ****     //get line which contains the authors name
 148:Catalog.cpp   ****     getline(*ifile, output.first_name, '\r');
 962              		.loc 2 148 28
 963 045c 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp152
 963      FFFFFF
 964 0463 488D4820 		leaq	32(%rax), %rcx	#, _4
 965              	# Catalog.cpp:148:     getline(*ifile, output.first_name, '\r');
 966              		.loc 2 148 44
 967 0467 488B8550 		movq	-176(%rbp), %rax	# ifile, _5
 967      FFFFFF
 968 046e BA0D0000 		movl	$13, %edx	#,
 968      00
 969 0473 4889CE   		movq	%rcx, %rsi	# _4,
 970 0476 4889C7   		movq	%rax, %rdi	# _5,
 971 0479 E8000000 		call	_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringI
 971      00
 972              	# Catalog.cpp:149:     ifile -> ignore();
 149:Catalog.cpp   ****     ifile -> ignore();
 973              		.loc 2 149 21
 974 047e 488B8550 		movq	-176(%rbp), %rax	# ifile, _6
 974      FFFFFF
 975 0485 4889C7   		movq	%rax, %rdi	# _6,
 976 0488 E8000000 		call	_ZNSi6ignoreEv@PLT	#
 976      00
 977              	# Catalog.cpp:151:     output.last_name = output.first_name.substr(output.first_name.find(' ')+1);
 150:Catalog.cpp   ****     //splits the string at the space and gets the first and last name of the author
 151:Catalog.cpp   ****     output.last_name = output.first_name.substr(output.first_name.find(' ')+1);
 978              		.loc 2 151 48
 979 048d 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp153
 979      FFFFFF
 980 0494 488D5820 		leaq	32(%rax), %rbx	#, _7
 981              	# Catalog.cpp:151:     output.last_name = output.first_name.substr(output.first_name.find(' ')+1);
 982              		.loc 2 151 71
 983 0498 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp154
 983      FFFFFF
 984 049f 4883C020 		addq	$32, %rax	#, _8
 985 04a3 BA000000 		movl	$0, %edx	#,
 985      00
 986 04a8 BE200000 		movl	$32, %esi	#,
 986      00
 987 04ad 4889C7   		movq	%rax, %rdi	# _8,
 988 04b0 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm@PLT	#
 988      00
 989              	# Catalog.cpp:151:     output.last_name = output.first_name.substr(output.first_name.find(' ')+1);
 990              		.loc 2 151 48
 991 04b5 488D5001 		leaq	1(%rax), %rdx	#, _10
 992 04b9 488D4580 		leaq	-128(%rbp), %rax	#, tmp155
 993 04bd 48C7C1FF 		movq	$-1, %rcx	#,
 993      FFFFFF
 994 04c4 4889DE   		movq	%rbx, %rsi	# _7,
 995 04c7 4889C7   		movq	%rax, %rdi	# tmp155,
 996 04ca E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@PLT	#
 996      00
 997              	# Catalog.cpp:151:     output.last_name = output.first_name.substr(output.first_name.find(' ')+1);
 998              		.loc 2 151 78 discriminator 1
 999 04cf 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp156
 999      FFFFFF
 1000 04d6 488D5040 		leaq	64(%rax), %rdx	#, _11
 1001 04da 488D4580 		leaq	-128(%rbp), %rax	#, tmp157
 1002 04de 4889C6   		movq	%rax, %rsi	# tmp157,
 1003 04e1 4889D7   		movq	%rdx, %rdi	# _11,
 1004 04e4 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@PLT	#
 1004      00
 1005              	# Catalog.cpp:151:     output.last_name = output.first_name.substr(output.first_name.find(' ')+1);
 1006              		.loc 2 151 48 discriminator 1
 1007 04e9 488D4580 		leaq	-128(%rbp), %rax	#, tmp158
 1008 04ed 4889C7   		movq	%rax, %rdi	# tmp158,
 1009 04f0 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 1009      00
 1010              	# Catalog.cpp:152:     output.first_name = output.first_name.erase(output.first_name.find(' '));
 152:Catalog.cpp   ****     output.first_name = output.first_name.erase(output.first_name.find(' '));
 1011              		.loc 2 152 76 discriminator 1
 1012 04f5 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp159
 1012      FFFFFF
 1013 04fc 488D5820 		leaq	32(%rax), %rbx	#, _12
 1014 0500 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp160
 1014      FFFFFF
 1015 0507 4883C020 		addq	$32, %rax	#, _13
 1016 050b BA000000 		movl	$0, %edx	#,
 1016      00
 1017 0510 BE200000 		movl	$32, %esi	#,
 1017      00
 1018 0515 4889C7   		movq	%rax, %rdi	# _13,
 1019 0518 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm@PLT	#
 1019      00
 1020 051d 48C7C2FF 		movq	$-1, %rdx	#,
 1020      FFFFFF
 1021 0524 4889C6   		movq	%rax, %rsi	# _14,
 1022 0527 4889DF   		movq	%rbx, %rdi	# _12,
 1023 052a E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEmm@PLT	#
 1023      00
 1024 052f 4889C2   		movq	%rax, %rdx	#, _15
 1025 0532 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp161
 1025      FFFFFF
 1026 0539 4883C020 		addq	$32, %rax	#, _16
 1027 053d 4889D6   		movq	%rdx, %rsi	# _15,
 1028 0540 4889C7   		movq	%rax, %rdi	# _16,
 1029 0543 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_@PLT	#
 1029      00
 1030              	.LEHE9:
 1031              	# Catalog.cpp:155:     string temp;
 153:Catalog.cpp   **** 
 154:Catalog.cpp   ****     //Find Beginning of the content
 155:Catalog.cpp   ****     string temp;
 1032              		.loc 2 155 12
 1033 0548 488D45A0 		leaq	-96(%rbp), %rax	#, tmp162
 1034 054c 4889C7   		movq	%rax, %rdi	# tmp162,
 1035 054f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@PLT	#
 1035      00
 1036              	.L35:
 1037              	# Catalog.cpp:158:         getline(*ifile, temp);
 156:Catalog.cpp   ****     do{
 157:Catalog.cpp   ****         //get line ending on the return character
 158:Catalog.cpp   ****         getline(*ifile, temp);
 1038              		.loc 2 158 29
 1039 0554 488B8550 		movq	-176(%rbp), %rax	# ifile, _17
 1039      FFFFFF
 1040 055b 488D55A0 		leaq	-96(%rbp), %rdx	#, tmp163
 1041 055f 4889D6   		movq	%rdx, %rsi	# tmp163,
 1042 0562 4889C7   		movq	%rax, %rdi	# _17,
 1043              	.LEHB10:
 1044 0565 E8000000 		call	_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringI
 1044      00
 1045              	# Catalog.cpp:161:     } while(!(temp.substr(0,9) == "Contents:"));
 159:Catalog.cpp   ****         //ignore any excess stream string
 160:Catalog.cpp   ****         //continues if the line is not contents
 161:Catalog.cpp   ****     } while(!(temp.substr(0,9) == "Contents:"));
 1046              		.loc 2 161 26
 1047 056a 488D45C0 		leaq	-64(%rbp), %rax	#, tmp164
 1048 056e 488D75A0 		leaq	-96(%rbp), %rsi	#, tmp165
 1049 0572 B9090000 		movl	$9, %ecx	#,
 1049      00
 1050 0577 BA000000 		movl	$0, %edx	#,
 1050      00
 1051 057c 4889C7   		movq	%rax, %rdi	# tmp164,
 1052 057f E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@PLT	#
 1052      00
 1053              	# Catalog.cpp:161:     } while(!(temp.substr(0,9) == "Contents:"));
 1054              		.loc 2 161 32 discriminator 1
 1055 0584 488D45C0 		leaq	-64(%rbp), %rax	#, tmp166
 1056 0588 488D3500 		leaq	.LC3(%rip), %rsi	#,
 1056      000000
 1057 058f 4889C7   		movq	%rax, %rdi	# tmp166,
 1058 0592 E8000000 		call	_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_	#
 1058      00
 1059              	# Catalog.cpp:161:     } while(!(temp.substr(0,9) == "Contents:"));
 1060              		.loc 2 161 13 discriminator 1
 1061 0597 83F001   		xorl	$1, %eax	#, _18
 1062 059a 89C3     		movl	%eax, %ebx	# _18, retval.2_85
 1063              	# Catalog.cpp:161:     } while(!(temp.substr(0,9) == "Contents:"));
 1064              		.loc 2 161 26 discriminator 1
 1065 059c 488D45C0 		leaq	-64(%rbp), %rax	#, tmp167
 1066 05a0 4889C7   		movq	%rax, %rdi	# tmp167,
 1067 05a3 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 1067      00
 1068              	# Catalog.cpp:161:     } while(!(temp.substr(0,9) == "Contents:"));
 1069              		.loc 2 161 13 discriminator 1
 1070 05a8 84DB     		testb	%bl, %bl	# retval.2_85
 1071 05aa 7402     		je	.L34	#,
 1072              	# Catalog.cpp:156:     do{
 156:Catalog.cpp   ****     do{
 1073              		.loc 2 156 5
 1074 05ac EBA6     		jmp	.L35	#
 1075              	.L34:
 1076              	# Catalog.cpp:165:     while(!(ifile->eof())) {
 162:Catalog.cpp   **** 
 163:Catalog.cpp   **** 
 164:Catalog.cpp   ****     //while not end of file
 165:Catalog.cpp   ****     while(!(ifile->eof())) {
 1077              		.loc 2 165 23
 1078 05ae 488B8550 		movq	-176(%rbp), %rax	# ifile, tmp168
 1078      FFFFFF
 1079 05b5 488B00   		movq	(%rax), %rax	# ifile_67(D)->D.39185.D.35367._vptr.basic_istream, _19
 1080 05b8 4883E818 		subq	$24, %rax	#, _20
 1081 05bc 488B00   		movq	(%rax), %rax	# MEM[(long int *)_20], _21
 1082 05bf 4889C2   		movq	%rax, %rdx	# _21, _22
 1083 05c2 488B8550 		movq	-176(%rbp), %rax	# ifile, tmp169
 1083      FFFFFF
 1084 05c9 4801D0   		addq	%rdx, %rax	# _22, _23
 1085 05cc 4889C7   		movq	%rax, %rdi	# _23,
 1086 05cf E8000000 		call	_ZNKSt9basic_iosIcSt11char_traitsIcEE3eofEv@PLT	#
 1086      00
 1087              	.LEHE10:
 1088              	# Catalog.cpp:165:     while(!(ifile->eof())) {
 1089              		.loc 2 165 11
 1090 05d4 83F001   		xorl	$1, %eax	#, retval.3_90
 1091 05d7 84C0     		testb	%al, %al	# retval.3_90
 1092 05d9 0F84F601 		je	.L57	#,
 1092      0000
 1093              	.LBB11:
 1094              	# Catalog.cpp:168:         char past= ' ';
 166:Catalog.cpp   ****         
 167:Catalog.cpp   ****         //Temp char array which will handle word detection
 168:Catalog.cpp   ****         char past= ' ';
 1095              		.loc 2 168 14
 1096 05df C6856AFF 		movb	$32, -150(%rbp)	#, past
 1096      FFFF20
 1097              	# Catalog.cpp:171:         string temp;
 169:Catalog.cpp   **** 
 170:Catalog.cpp   ****         //create temporary stream of each file line
 171:Catalog.cpp   ****         string temp;
 1098              		.loc 2 171 16
 1099 05e6 488D45C0 		leaq	-64(%rbp), %rax	#, tmp170
 1100 05ea 4889C7   		movq	%rax, %rdi	# tmp170,
 1101 05ed E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@PLT	#
 1101      00
 1102              	# Catalog.cpp:172:         getline(*ifile, temp);
 172:Catalog.cpp   ****         getline(*ifile, temp);
 1103              		.loc 2 172 29
 1104 05f2 488B8550 		movq	-176(%rbp), %rax	# ifile, _25
 1104      FFFFFF
 1105 05f9 488D55C0 		leaq	-64(%rbp), %rdx	#, tmp171
 1106 05fd 4889D6   		movq	%rdx, %rsi	# tmp171,
 1107 0600 4889C7   		movq	%rax, %rdi	# _25,
 1108              	.LEHB11:
 1109 0603 E8000000 		call	_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringI
 1109      00
 1110              	# Catalog.cpp:173:         ifile -> ignore();
 173:Catalog.cpp   ****         ifile -> ignore();
 1111              		.loc 2 173 25
 1112 0608 488B8550 		movq	-176(%rbp), %rax	# ifile, _26
 1112      FFFFFF
 1113 060f 4889C7   		movq	%rax, %rdi	# _26,
 1114 0612 E8000000 		call	_ZNSi6ignoreEv@PLT	#
 1114      00
 1115              	.LEHE11:
 1116              	# Catalog.cpp:177:             temp.erase(temp.find('\r'));
 174:Catalog.cpp   **** 
 175:Catalog.cpp   ****         try{
 176:Catalog.cpp   ****             // Clean the string of escapes
 177:Catalog.cpp   ****             temp.erase(temp.find('\r'));
 1117              		.loc 2 177 39
 1118 0617 488D45C0 		leaq	-64(%rbp), %rax	#, tmp172
 1119 061b BA000000 		movl	$0, %edx	#,
 1119      00
 1120 0620 BE0D0000 		movl	$13, %esi	#,
 1120      00
 1121 0625 4889C7   		movq	%rax, %rdi	# tmp172,
 1122 0628 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm@PLT	#
 1122      00
 1123 062d 4889C1   		movq	%rax, %rcx	#, _27
 1124 0630 488D45C0 		leaq	-64(%rbp), %rax	#, tmp173
 1125 0634 48C7C2FF 		movq	$-1, %rdx	#,
 1125      FFFFFF
 1126 063b 4889CE   		movq	%rcx, %rsi	# _27,
 1127 063e 4889C7   		movq	%rax, %rdi	# tmp173,
 1128              	.LEHB12:
 1129 0641 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEmm@PLT	#
 1129      00
 1130              	.LEHE12:
 1131              	.L47:
 1132              	# Catalog.cpp:180:         output.line_count++;
 178:Catalog.cpp   ****         } catch(exception) {}
 179:Catalog.cpp   ****         //Iterate line counter
 180:Catalog.cpp   ****         output.line_count++;
 1133              		.loc 2 180 16
 1134 0646 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp174
 1134      FFFFFF
 1135 064d 8B803401 		movl	308(%rax), %eax	# output_62(D)->line_count, _31
 1135      0000
 1136              	# Catalog.cpp:180:         output.line_count++;
 1137              		.loc 2 180 26
 1138 0653 8D5001   		leal	1(%rax), %edx	#, _32
 1139 0656 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp175
 1139      FFFFFF
 1140 065d 89903401 		movl	%edx, 308(%rax)	# _32, output_62(D)->line_count
 1140      0000
 1141              	.LBB12:
 1142              	# Catalog.cpp:184:         for(int i = 0; i < temp.size(); i++) {
 181:Catalog.cpp   **** 
 182:Catalog.cpp   ****         
 183:Catalog.cpp   ****         //iterate word and letter counters
 184:Catalog.cpp   ****         for(int i = 0; i < temp.size(); i++) {
 1143              		.loc 2 184 17
 1144 0663 C78570FF 		movl	$0, -144(%rbp)	#, i
 1144      FFFF0000 
 1144      0000
 1145              	.L42:
 1146              	# Catalog.cpp:184:         for(int i = 0; i < temp.size(); i++) {
 1147              		.loc 2 184 26 discriminator 1
 1148 066d 8B8570FF 		movl	-144(%rbp), %eax	# i, tmp176
 1148      FFFF
 1149 0673 4863D8   		movslq	%eax, %rbx	# tmp176, _33
 1150              	# Catalog.cpp:184:         for(int i = 0; i < temp.size(); i++) {
 1151              		.loc 2 184 37 discriminator 1
 1152 0676 488D45C0 		leaq	-64(%rbp), %rax	#, tmp177
 1153 067a 4889C7   		movq	%rax, %rdi	# tmp177,
 1154 067d E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv@PLT	#
 1154      00
 1155              	# Catalog.cpp:184:         for(int i = 0; i < temp.size(); i++) {
 1156              		.loc 2 184 26 discriminator 1
 1157 0682 4839C3   		cmpq	%rax, %rbx	# _34, _33
 1158 0685 0F92C0   		setb	%al	#, retval.4_100
 1159 0688 84C0     		testb	%al, %al	# retval.4_100
 1160 068a 0F843401 		je	.L37	#,
 1160      0000
 1161              	.LBB13:
 1162              	# Catalog.cpp:187:             transform(temp.begin(), temp.end(), temp.begin(), ::toupper);
 185:Catalog.cpp   ****             
 186:Catalog.cpp   ****             //inputs character from line as uppercase for consistency
 187:Catalog.cpp   ****             transform(temp.begin(), temp.end(), temp.begin(), ::toupper);
 1163              		.loc 2 187 72
 1164 0690 488D45C0 		leaq	-64(%rbp), %rax	#, tmp178
 1165 0694 4889C7   		movq	%rax, %rdi	# tmp178,
 1166 0697 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv@PLT	#
 1166      00
 1167 069c 4989C4   		movq	%rax, %r12	#, D.51399
 1168 069f 488D45C0 		leaq	-64(%rbp), %rax	#, tmp179
 1169 06a3 4889C7   		movq	%rax, %rdi	# tmp179,
 1170 06a6 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv@PLT	#
 1170      00
 1171 06ab 4889C3   		movq	%rax, %rbx	#, D.51400
 1172 06ae 488D45C0 		leaq	-64(%rbp), %rax	#, tmp180
 1173 06b2 4889C7   		movq	%rax, %rdi	# tmp180,
 1174 06b5 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv@PLT	#
 1174      00
 1175 06ba 4889C7   		movq	%rax, %rdi	#, D.51401
 1176 06bd 488B0500 		movq	toupper@GOTPCREL(%rip), %rax	#, tmp181
 1176      000000
 1177 06c4 4889C1   		movq	%rax, %rcx	# tmp181,
 1178 06c7 4C89E2   		movq	%r12, %rdx	# D.51399,
 1179 06ca 4889DE   		movq	%rbx, %rsi	# D.51400,
 1180              	.LEHB13:
 1181 06cd E8000000 		call	_ZSt9transformIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 1181      00
 1182              	# Catalog.cpp:188:             char current = temp[i];
 188:Catalog.cpp   ****             char current = temp[i];
 1183              		.loc 2 188 34
 1184 06d2 8B8570FF 		movl	-144(%rbp), %eax	# i, tmp182
 1184      FFFF
 1185 06d8 4863D0   		movslq	%eax, %rdx	# tmp182, _35
 1186 06db 488D45C0 		leaq	-64(%rbp), %rax	#, tmp183
 1187 06df 4889D6   		movq	%rdx, %rsi	# _35,
 1188 06e2 4889C7   		movq	%rax, %rdi	# tmp183,
 1189 06e5 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm@PLT	#
 1189      00
 1190              	.LEHE13:
 1191 06ea 0FB600   		movzbl	(%rax), %eax	# *_36, tmp184
 1192 06ed 88856BFF 		movb	%al, -149(%rbp)	# tmp184, current
 1192      FFFF
 1193              	.LBB14:
 1194              	# Catalog.cpp:190:             for(int j = 0; j < 26; j++) {
 189:Catalog.cpp   ****             //Check for each letter
 190:Catalog.cpp   ****             for(int j = 0; j < 26; j++) {
 1195              		.loc 2 190 21
 1196 06f3 C78574FF 		movl	$0, -140(%rbp)	#, j
 1196      FFFF0000 
 1196      0000
 1197              	.L40:
 1198              	# Catalog.cpp:190:             for(int j = 0; j < 26; j++) {
 1199              		.loc 2 190 30 discriminator 1
 1200 06fd 83BD74FF 		cmpl	$25, -140(%rbp)	#, j
 1200      FFFF19
 1201 0704 7F67     		jg	.L38	#,
 1202              	# Catalog.cpp:192:                 if(current == output.count[j].letter) {
 191:Catalog.cpp   ****                 //Check for matching letter in array
 192:Catalog.cpp   ****                 if(current == output.count[j].letter) {
 1203              		.loc 2 192 47
 1204 0706 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp185
 1204      FFFFFF
 1205 070d 8B9574FF 		movl	-140(%rbp), %edx	# j, tmp187
 1205      FFFF
 1206 0713 4863D2   		movslq	%edx, %rdx	# tmp187, tmp186
 1207 0716 4883C20C 		addq	$12, %rdx	#, tmp188
 1208 071a 0FB644D0 		movzbl	4(%rax,%rdx,8), %eax	# output_62(D)->count[j_48].letter, _37
 1208      04
 1209              	# Catalog.cpp:192:                 if(current == output.count[j].letter) {
 1210              		.loc 2 192 17
 1211 071f 38856BFF 		cmpb	%al, -149(%rbp)	# _37, current
 1211      FFFF
 1212 0725 753D     		jne	.L39	#,
 1213              	# Catalog.cpp:194:                     output.count[j].frequency++;
 193:Catalog.cpp   ****                     //increase frequency
 194:Catalog.cpp   ****                     output.count[j].frequency++;
 1214              		.loc 2 194 37
 1215 0727 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp189
 1215      FFFFFF
 1216 072e 8B9574FF 		movl	-140(%rbp), %edx	# j, tmp191
 1216      FFFF
 1217 0734 4863D2   		movslq	%edx, %rdx	# tmp191, tmp190
 1218 0737 4883C20C 		addq	$12, %rdx	#, tmp192
 1219 073b 8B44D008 		movl	8(%rax,%rdx,8), %eax	# output_62(D)->count[j_48].frequency, _38
 1220              	# Catalog.cpp:194:                     output.count[j].frequency++;
 1221              		.loc 2 194 46
 1222 073f 8D4801   		leal	1(%rax), %ecx	#, _39
 1223 0742 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp193
 1223      FFFFFF
 1224 0749 8B9574FF 		movl	-140(%rbp), %edx	# j, tmp195
 1224      FFFF
 1225 074f 4863D2   		movslq	%edx, %rdx	# tmp195, tmp194
 1226 0752 4883C20C 		addq	$12, %rdx	#, tmp196
 1227 0756 894CD008 		movl	%ecx, 8(%rax,%rdx,8)	# _39, output_62(D)->count[j_48].frequency
 1228              	# Catalog.cpp:196:                     j = 26;
 195:Catalog.cpp   ****                     //will end the for loop
 196:Catalog.cpp   ****                     j = 26;
 1229              		.loc 2 196 23
 1230 075a C78574FF 		movl	$26, -140(%rbp)	#, j
 1230      FFFF1A00 
 1230      0000
 1231              	.L39:
 1232              	# Catalog.cpp:190:             for(int j = 0; j < 26; j++) {
 190:Catalog.cpp   ****                 //Check for matching letter in array
 1233              		.loc 2 190 13 discriminator 2
 1234 0764 838574FF 		addl	$1, -140(%rbp)	#, j
 1234      FFFF01
 1235 076b EB90     		jmp	.L40	#
 1236              	.L38:
 1237              	.LBE14:
 1238              	# Catalog.cpp:202:             if(word_check(current)) {
 197:Catalog.cpp   ****                 }
 198:Catalog.cpp   ****             }
 199:Catalog.cpp   **** 
 200:Catalog.cpp   ****             //Check for whether there should be a word
 201:Catalog.cpp   ****             //First check for if current is a space, the initial case for a word
 202:Catalog.cpp   ****             if(word_check(current)) {
 1239              		.loc 2 202 26
 1240 076d 0FBE856B 		movsbl	-149(%rbp), %eax	# current, _40
 1240      FFFFFF
 1241 0774 89C7     		movl	%eax, %edi	# _40,
 1242 0776 E8000000 		call	_Z10word_checkc	#
 1242      00
 1243              	# Catalog.cpp:202:             if(word_check(current)) {
 1244              		.loc 2 202 13
 1245 077b 84C0     		testb	%al, %al	# retval.5_113
 1246 077d 742C     		je	.L41	#,
 1247              	# Catalog.cpp:204:                 if(!word_check(past)){
 203:Catalog.cpp   ****                 //Check to make sure the last two characters are not punctuation or a space
 204:Catalog.cpp   ****                 if(!word_check(past)){
 1248              		.loc 2 204 31
 1249 077f 0FBE856A 		movsbl	-150(%rbp), %eax	# past, _41
 1249      FFFFFF
 1250 0786 89C7     		movl	%eax, %edi	# _41,
 1251 0788 E8000000 		call	_Z10word_checkc	#
 1251      00
 1252              	# Catalog.cpp:204:                 if(!word_check(past)){
 1253              		.loc 2 204 20
 1254 078d 83F001   		xorl	$1, %eax	#, retval.6_115
 1255              	# Catalog.cpp:204:                 if(!word_check(past)){
 1256              		.loc 2 204 17
 1257 0790 84C0     		testb	%al, %al	# retval.6_115
 1258 0792 7417     		je	.L41	#,
 1259              	# Catalog.cpp:206:                     output.word_count++;
 205:Catalog.cpp   ****                     //increase word count
 206:Catalog.cpp   ****                     output.word_count++;
 1260              		.loc 2 206 28
 1261 0794 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp197
 1261      FFFFFF
 1262 079b 8B4060   		movl	96(%rax), %eax	# output_62(D)->word_count, _43
 1263              	# Catalog.cpp:206:                     output.word_count++;
 1264              		.loc 2 206 38
 1265 079e 8D5001   		leal	1(%rax), %edx	#, _44
 1266 07a1 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp198
 1266      FFFFFF
 1267 07a8 895060   		movl	%edx, 96(%rax)	# _44, output_62(D)->word_count
 1268              	.L41:
 1269              	# Catalog.cpp:209:             past = current;
 207:Catalog.cpp   ****                 }
 208:Catalog.cpp   ****             }
 209:Catalog.cpp   ****             past = current;
 1270              		.loc 2 209 18 discriminator 2
 1271 07ab 0FB6856B 		movzbl	-149(%rbp), %eax	# current, tmp199
 1271      FFFFFF
 1272 07b2 88856AFF 		movb	%al, -150(%rbp)	# tmp199, past
 1272      FFFF
 1273              	.LBE13:
 1274              	# Catalog.cpp:184:         for(int i = 0; i < temp.size(); i++) {
 184:Catalog.cpp   ****             
 1275              		.loc 2 184 9 discriminator 2
 1276 07b8 838570FF 		addl	$1, -144(%rbp)	#, i
 1276      FFFF01
 1277 07bf E9A9FEFF 		jmp	.L42	#
 1277      FF
 1278              	.L37:
 1279              	.LBE12:
 1280              	# Catalog.cpp:171:         string temp;
 171:Catalog.cpp   ****         getline(*ifile, temp);
 1281              		.loc 2 171 16
 1282 07c4 488D45C0 		leaq	-64(%rbp), %rax	#, tmp200
 1283 07c8 4889C7   		movq	%rax, %rdi	# tmp200,
 1284 07cb E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 1284      00
 1285              	.LBE11:
 1286              	# Catalog.cpp:165:     while(!(ifile->eof())) {
 165:Catalog.cpp   ****         
 1287              		.loc 2 165 5
 1288 07d0 E9D9FDFF 		jmp	.L34	#
 1288      FF
 1289              	.L57:
 1290              	# Catalog.cpp:213:     return output;
 210:Catalog.cpp   ****         }
 211:Catalog.cpp   ****     }
 212:Catalog.cpp   **** 
 213:Catalog.cpp   ****     return output;
 1291              		.loc 2 213 12
 1292 07d5 90       		nop	
 1293              	# Catalog.cpp:155:     string temp;
 155:Catalog.cpp   ****     do{
 1294              		.loc 2 155 12
 1295 07d6 488D45A0 		leaq	-96(%rbp), %rax	#, tmp201
 1296 07da 4889C7   		movq	%rax, %rdi	# tmp201,
 1297 07dd E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 1297      00
 1298              	# Catalog.cpp:213:     return output;
 1299              		.loc 2 213 12
 1300 07e2 90       		nop	
 1301              	# Catalog.cpp:214: }
 214:Catalog.cpp   **** }
 1302              		.loc 2 214 1
 1303 07e3 488B8558 		movq	-168(%rbp), %rax	# <retval>,
 1303      FFFFFF
 1304 07ea 488B4DE8 		movq	-24(%rbp), %rcx	# D.51554, tmp216
 1305 07ee 6448330C 		xorq	%fs:40, %rcx	# MEM[(<address-space-1> long unsigned int *)40B], tmp216
 1305      25280000 
 1305      00
 1306 07f7 0F849B00 		je	.L50	#,
 1306      0000
 1307 07fd E9910000 		jmp	.L56	#
 1307      00
 1308              	.L54:
 1309 0802 4889C3   		movq	%rax, %rbx	#, tmp204
 1310 0805 4889D0   		movq	%rdx, %rax	#, tmp202
 1311 0808 4883F801 		cmpq	$1, %rax	#, D.51551
 1312 080c 7402     		je	.L45	#,
 1313 080e EB47     		jmp	.L46	#
 1314              	.L45:
 1315              	.LBB16:
 1316              	.LBB15:
 1317              	# Catalog.cpp:178:         } catch(exception) {}
 178:Catalog.cpp   ****         //Iterate line counter
 1318              		.loc 2 178 17
 1319 0810 4889D8   		movq	%rbx, %rax	# tmp204, _28
 1320 0813 4889C7   		movq	%rax, %rdi	# _28,
 1321 0816 E8000000 		call	__cxa_get_exception_ptr@PLT	#
 1321      00
 1322 081b 4889C2   		movq	%rax, %rdx	#, _29
 1323 081e 488D8578 		leaq	-136(%rbp), %rax	#, tmp206
 1323      FFFFFF
 1324 0825 4889D6   		movq	%rdx, %rsi	# _29,
 1325 0828 4889C7   		movq	%rax, %rdi	# tmp206,
 1326 082b E8000000 		call	_ZNSt9exceptionC1ERKS_	#
 1326      00
 1327 0830 4889D8   		movq	%rbx, %rax	# tmp204, _30
 1328 0833 4889C7   		movq	%rax, %rdi	# _30,
 1329 0836 E8000000 		call	__cxa_begin_catch@PLT	#
 1329      00
 1330 083b 488D8578 		leaq	-136(%rbp), %rax	#, tmp207
 1330      FFFFFF
 1331 0842 4889C7   		movq	%rax, %rdi	# tmp207,
 1332 0845 E8000000 		call	_ZNSt9exceptionD1Ev@PLT	#
 1332      00
 1333 084a E8000000 		call	__cxa_end_catch@PLT	#
 1333      00
 1334 084f E9F2FDFF 		jmp	.L47	#
 1334      FF
 1335              	.L53:
 1336 0854 4889C3   		movq	%rax, %rbx	#, tmp203
 1337              	.L46:
 1338              	.LBE15:
 1339              	# Catalog.cpp:171:         string temp;
 171:Catalog.cpp   ****         getline(*ifile, temp);
 1340              		.loc 2 171 16
 1341 0857 488D45C0 		leaq	-64(%rbp), %rax	#, tmp208
 1342 085b 4889C7   		movq	%rax, %rdi	# tmp208,
 1343 085e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 1343      00
 1344 0863 EB03     		jmp	.L48	#
 1345              	.L52:
 1346 0865 4889C3   		movq	%rax, %rbx	#, tmp209
 1347              	.L48:
 1348              	.LBE16:
 1349              	# Catalog.cpp:155:     string temp;
 155:Catalog.cpp   ****     do{
 1350              		.loc 2 155 12
 1351 0868 488D45A0 		leaq	-96(%rbp), %rax	#, tmp211
 1352 086c 4889C7   		movq	%rax, %rdi	# tmp211,
 1353 086f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 1353      00
 1354 0874 EB03     		jmp	.L49	#
 1355              	.L51:
 1356 0876 4889C3   		movq	%rax, %rbx	#, tmp212
 1357              	.L49:
 1358 0879 488B8558 		movq	-168(%rbp), %rax	# <retval>, tmp214
 1358      FFFFFF
 1359 0880 4889C7   		movq	%rax, %rdi	# tmp214,
 1360 0883 E8000000 		call	_ZN7CatalogD1Ev	#
 1360      00
 1361 0888 4889D8   		movq	%rbx, %rax	# tmp212, D.51552
 1362 088b 4889C7   		movq	%rax, %rdi	# D.51552,
 1363              	.LEHB14:
 1364 088e E8000000 		call	_Unwind_Resume@PLT	#
 1364      00
 1365              	.LEHE14:
 1366              	.L56:
 1367              	# Catalog.cpp:214: }
 1368              		.loc 2 214 1
 1369 0893 E8000000 		call	__stack_chk_fail@PLT	#
 1369      00
 1370              	.L50:
 1371 0898 4881C4A0 		addq	$160, %rsp	#,
 1371      000000
 1372 089f 5B       		popq	%rbx	#
 1373 08a0 415C     		popq	%r12	#
 1374 08a2 5D       		popq	%rbp	#
 1375              		.cfi_def_cfa 7, 8
 1376 08a3 C3       		ret	
 1377              		.cfi_endproc
 1378              	.LFE2168:
 1379              		.section	.gcc_except_table
 1380              		.align 4
 1381              	.LLSDA2168:
 1382 0044 FF       		.byte	0xff
 1383 0045 9B       		.byte	0x9b
 1384 0046 31       		.uleb128 .LLSDATT2168-.LLSDATTD2168
 1385              	.LLSDATTD2168:
 1386 0047 01       		.byte	0x1
 1387 0048 24       		.uleb128 .LLSDACSE2168-.LLSDACSB2168
 1388              	.LLSDACSB2168:
 1389 0049 A401     		.uleb128 .LEHB9-.LFB2168
 1390 004b 8002     		.uleb128 .LEHE9-.LEHB9
 1391 004d D209     		.uleb128 .L51-.LFB2168
 1392 004f 00       		.uleb128 0
 1393 0050 C103     		.uleb128 .LEHB10-.LFB2168
 1394 0052 6F       		.uleb128 .LEHE10-.LEHB10
 1395 0053 C109     		.uleb128 .L52-.LFB2168
 1396 0055 00       		.uleb128 0
 1397 0056 DF04     		.uleb128 .LEHB11-.LFB2168
 1398 0058 14       		.uleb128 .LEHE11-.LEHB11
 1399 0059 B009     		.uleb128 .L53-.LFB2168
 1400 005b 00       		.uleb128 0
 1401 005c 9D05     		.uleb128 .LEHB12-.LFB2168
 1402 005e 05       		.uleb128 .LEHE12-.LEHB12
 1403 005f DE08     		.uleb128 .L54-.LFB2168
 1404 0061 03       		.uleb128 0x3
 1405 0062 A906     		.uleb128 .LEHB13-.LFB2168
 1406 0064 1D       		.uleb128 .LEHE13-.LEHB13
 1407 0065 B009     		.uleb128 .L53-.LFB2168
 1408 0067 00       		.uleb128 0
 1409 0068 EA09     		.uleb128 .LEHB14-.LFB2168
 1410 006a 05       		.uleb128 .LEHE14-.LEHB14
 1411 006b 00       		.uleb128 0
 1412 006c 00       		.uleb128 0
 1413              	.LLSDACSE2168:
 1414 006d 00       		.byte	0
 1415 006e 00       		.byte	0
 1416 006f 01       		.byte	0x1
 1417 0070 7D       		.byte	0x7d
 1418 0071 000000   		.align 4
 1419 0074 00000000 		.long	DW.ref._ZTISt9exception-.
 1420              	.LLSDATT2168:
 1421              		.text
 1423              		.globl	_Z10word_checkc
 1425              	_Z10word_checkc:
 1426              	.LFB2172:
 215:Catalog.cpp   **** 
 216:Catalog.cpp   **** bool word_check(char in) {
 1427              		.loc 2 216 26
 1428              		.cfi_startproc
 1429 08a4 55       		pushq	%rbp	#
 1430              		.cfi_def_cfa_offset 16
 1431              		.cfi_offset 6, -16
 1432 08a5 4889E5   		movq	%rsp, %rbp	#,
 1433              		.cfi_def_cfa_register 6
 1434 08a8 4883EC30 		subq	$48, %rsp	#,
 1435 08ac 89F8     		movl	%edi, %eax	# in, tmp90
 1436 08ae 8845DC   		movb	%al, -36(%rbp)	# tmp91, in
 1437              	# Catalog.cpp:216: bool word_check(char in) {
 1438              		.loc 2 216 26
 1439 08b1 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp96
 1439      25280000 
 1439      00
 1440 08ba 488945F8 		movq	%rax, -8(%rbp)	# tmp96, D.51559
 1441 08be 31C0     		xorl	%eax, %eax	# tmp96
 1442              	# Catalog.cpp:218:     int check_length = 7;
 217:Catalog.cpp   ****     // length of checker array
 218:Catalog.cpp   ****     int check_length = 7;
 1443              		.loc 2 218 9
 1444 08c0 C745EC07 		movl	$7, -20(%rbp)	#, check_length
 1444      000000
 1445              	# Catalog.cpp:220:     char checker[] = {' ', ',', '.', '!', ';', ':', '-'};
 219:Catalog.cpp   ****     //array of letters to check for
 220:Catalog.cpp   ****     char checker[] = {' ', ',', '.', '!', ';', ':', '-'};
 1446              		.loc 2 220 10
 1447 08c7 C645F120 		movb	$32, -15(%rbp)	#, checker
 1448 08cb C645F22C 		movb	$44, -14(%rbp)	#, checker
 1449 08cf C645F32E 		movb	$46, -13(%rbp)	#, checker
 1450 08d3 C645F421 		movb	$33, -12(%rbp)	#, checker
 1451 08d7 C645F53B 		movb	$59, -11(%rbp)	#, checker
 1452 08db C645F63A 		movb	$58, -10(%rbp)	#, checker
 1453 08df C645F72D 		movb	$45, -9(%rbp)	#, checker
 1454              	.LBB17:
 1455              	# Catalog.cpp:222:     for(int i = 0; i < check_length; i++) {
 221:Catalog.cpp   **** 
 222:Catalog.cpp   ****     for(int i = 0; i < check_length; i++) {
 1456              		.loc 2 222 13
 1457 08e3 C745E800 		movl	$0, -24(%rbp)	#, i
 1457      000000
 1458              	.L62:
 1459              	# Catalog.cpp:222:     for(int i = 0; i < check_length; i++) {
 1460              		.loc 2 222 22 discriminator 1
 1461 08ea 8B45E8   		movl	-24(%rbp), %eax	# i, tmp92
 1462 08ed 3B45EC   		cmpl	-20(%rbp), %eax	# check_length, tmp92
 1463 08f0 7D1C     		jge	.L59	#,
 1464              	# Catalog.cpp:224:         if(in == checker[i]) return true;
 223:Catalog.cpp   ****         //will return if any of these are actually a word ender
 224:Catalog.cpp   ****         if(in == checker[i]) return true;
 1465              		.loc 2 224 27
 1466 08f2 8B45E8   		movl	-24(%rbp), %eax	# i, tmp94
 1467 08f5 4898     		cltq
 1468 08f7 0FB64405 		movzbl	-15(%rbp,%rax), %eax	# checker, _1
 1468      F1
 1469              	# Catalog.cpp:224:         if(in == checker[i]) return true;
 1470              		.loc 2 224 9
 1471 08fc 3845DC   		cmpb	%al, -36(%rbp)	# _1, in
 1472 08ff 7507     		jne	.L60	#,
 1473              	# Catalog.cpp:224:         if(in == checker[i]) return true;
 1474              		.loc 2 224 37 discriminator 1
 1475 0901 B8010000 		movl	$1, %eax	#, _3
 1475      00
 1476 0906 EB0B     		jmp	.L63	#
 1477              	.L60:
 1478              	# Catalog.cpp:222:     for(int i = 0; i < check_length; i++) {
 222:Catalog.cpp   ****         //will return if any of these are actually a word ender
 1479              		.loc 2 222 5 discriminator 2
 1480 0908 8345E801 		addl	$1, -24(%rbp)	#, i
 1481 090c EBDC     		jmp	.L62	#
 1482              	.L59:
 1483              	.LBE17:
 1484              	# Catalog.cpp:227:     return false;
 225:Catalog.cpp   ****     }
 226:Catalog.cpp   ****     //otherwise return as false
 227:Catalog.cpp   ****     return false;
 1485              		.loc 2 227 12
 1486 090e B8000000 		movl	$0, %eax	#, _3
 1486      00
 1487              	.L63:
 1488              	# Catalog.cpp:228: }
 228:Catalog.cpp   **** }
 1489              		.loc 2 228 1 discriminator 1
 1490 0913 488B55F8 		movq	-8(%rbp), %rdx	# D.51559, tmp97
 1491 0917 64483314 		xorq	%fs:40, %rdx	# MEM[(<address-space-1> long unsigned int *)40B], tmp97
 1491      25280000 
 1491      00
 1492 0920 7405     		je	.L64	#,
 1493              	# Catalog.cpp:228: }
 1494              		.loc 2 228 1 is_stmt 0
 1495 0922 E8000000 		call	__stack_chk_fail@PLT	#
 1495      00
 1496              	.L64:
 1497 0927 C9       		leave	
 1498              		.cfi_def_cfa 7, 8
 1499 0928 C3       		ret	
 1500              		.cfi_endproc
 1501              	.LFE2172:
 1503              		.section	.rodata
 1504              		.align 8
 1505              	.LC4:
 1506 0060 0A0A2A2A 		.string	"\n\n***Would you like to enter in another file entry?(y/n): "
 1506      2A576F75 
 1506      6C642079 
 1506      6F75206C 
 1506      696B6520 
 1507              	.LC5:
 1508 009b 4E657720 		.string	"New Entry\n\n\n"
 1508      456E7472 
 1508      790A0A0A 
 1508      00
 1509              	.LC6:
 1510 00a8 4259450A 		.string	"BYE\n\n"
 1510      0A00
 1511              		.text
 1512              		.globl	_Z14continue_entryv
 1514              	_Z14continue_entryv:
 1515              	.LFB2173:
 229:Catalog.cpp   **** 
 230:Catalog.cpp   **** bool continue_entry() {
 1516              		.loc 2 230 23 is_stmt 1
 1517              		.cfi_startproc
 1518 0929 55       		pushq	%rbp	#
 1519              		.cfi_def_cfa_offset 16
 1520              		.cfi_offset 6, -16
 1521 092a 4889E5   		movq	%rsp, %rbp	#,
 1522              		.cfi_def_cfa_register 6
 1523 092d 4883EC10 		subq	$16, %rsp	#,
 1524              	# Catalog.cpp:230: bool continue_entry() {
 1525              		.loc 2 230 23
 1526 0931 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp92
 1526      25280000 
 1526      00
 1527 093a 488945F8 		movq	%rax, -8(%rbp)	# tmp92, D.51560
 1528 093e 31C0     		xorl	%eax, %eax	# tmp92
 1529              	# Catalog.cpp:232:     cout << "\n\n***Would you like to enter in another file entry?(y/n): ";
 231:Catalog.cpp   ****     //Prompt for another go at the program
 232:Catalog.cpp   ****     cout << "\n\n***Would you like to enter in another file entry?(y/n): ";
 1530              		.loc 2 232 13
 1531 0940 488D3500 		leaq	.LC4(%rip), %rsi	#,
 1531      000000
 1532 0947 488D3D00 		leaq	_ZSt4cout(%rip), %rdi	#,
 1532      000000
 1533 094e E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1533      00
 1534              	# Catalog.cpp:235:     cin >> input;
 233:Catalog.cpp   ****     char input;
 234:Catalog.cpp   ****     //collect user input
 235:Catalog.cpp   ****     cin >> input;
 1535              		.loc 2 235 12
 1536 0953 488D45F7 		leaq	-9(%rbp), %rax	#, tmp90
 1537 0957 4889C6   		movq	%rax, %rsi	# tmp90,
 1538 095a 488D3D00 		leaq	_ZSt3cin(%rip), %rdi	#,
 1538      000000
 1539 0961 E8000000 		call	_ZStrsIcSt11char_traitsIcEERSt13basic_istreamIT_T0_ES6_RS3_@PLT	#
 1539      00
 1540              	# Catalog.cpp:238:     if(input == 'y') {
 236:Catalog.cpp   **** 
 237:Catalog.cpp   ****     //return and display result
 238:Catalog.cpp   ****     if(input == 'y') {
 1541              		.loc 2 238 14
 1542 0966 0FB645F7 		movzbl	-9(%rbp), %eax	# input, input.8_1
 1543              	# Catalog.cpp:238:     if(input == 'y') {
 1544              		.loc 2 238 5
 1545 096a 3C79     		cmpb	$121, %al	#, input.8_1
 1546 096c 751A     		jne	.L66	#,
 1547              	# Catalog.cpp:239:         cout << "New Entry\n\n\n";
 239:Catalog.cpp   ****         cout << "New Entry\n\n\n";
 1548              		.loc 2 239 17
 1549 096e 488D3500 		leaq	.LC5(%rip), %rsi	#,
 1549      000000
 1550 0975 488D3D00 		leaq	_ZSt4cout(%rip), %rdi	#,
 1550      000000
 1551 097c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1551      00
 1552              	# Catalog.cpp:240:         return true;
 240:Catalog.cpp   ****         return true;
 1553              		.loc 2 240 16
 1554 0981 B8010000 		movl	$1, %eax	#, _2
 1554      00
 1555 0986 EB18     		jmp	.L68	#
 1556              	.L66:
 1557              	# Catalog.cpp:243:         cout << "BYE\n\n";
 241:Catalog.cpp   ****     }
 242:Catalog.cpp   ****     else {
 243:Catalog.cpp   ****         cout << "BYE\n\n";
 1558              		.loc 2 243 17
 1559 0988 488D3500 		leaq	.LC6(%rip), %rsi	#,
 1559      000000
 1560 098f 488D3D00 		leaq	_ZSt4cout(%rip), %rdi	#,
 1560      000000
 1561 0996 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1561      00
 1562              	# Catalog.cpp:244:         return false;
 244:Catalog.cpp   ****         return false;
 1563              		.loc 2 244 16
 1564 099b B8000000 		movl	$0, %eax	#, _2
 1564      00
 1565              	.L68:
 1566              	# Catalog.cpp:246: }
 245:Catalog.cpp   ****     }
 246:Catalog.cpp   **** }
 1567              		.loc 2 246 1 discriminator 1
 1568 09a0 488B55F8 		movq	-8(%rbp), %rdx	# D.51560, tmp93
 1569 09a4 64483314 		xorq	%fs:40, %rdx	# MEM[(<address-space-1> long unsigned int *)40B], tmp93
 1569      25280000 
 1569      00
 1570 09ad 7405     		je	.L69	#,
 1571              	# Catalog.cpp:246: }
 1572              		.loc 2 246 1 is_stmt 0
 1573 09af E8000000 		call	__stack_chk_fail@PLT	#
 1573      00
 1574              	.L69:
 1575 09b4 C9       		leave	
 1576              		.cfi_def_cfa 7, 8
 1577 09b5 C3       		ret	
 1578              		.cfi_endproc
 1579              	.LFE2173:
 1581              		.globl	_Z12letter_countR7Catalog
 1583              	_Z12letter_countR7Catalog:
 1584              	.LFB2174:
 247:Catalog.cpp   **** 
 248:Catalog.cpp   **** int letter_count(Catalog &output) {
 1585              		.loc 2 248 35 is_stmt 1
 1586              		.cfi_startproc
 1587 09b6 55       		pushq	%rbp	#
 1588              		.cfi_def_cfa_offset 16
 1589              		.cfi_offset 6, -16
 1590 09b7 4889E5   		movq	%rsp, %rbp	#,
 1591              		.cfi_def_cfa_register 6
 1592 09ba 48897DC8 		movq	%rdi, -56(%rbp)	# output, output
 1593              	# Catalog.cpp:250:     int total = 0;
 249:Catalog.cpp   ****     //temp var
 250:Catalog.cpp   ****     int total = 0;
 1594              		.loc 2 250 9
 1595 09be C745DC00 		movl	$0, -36(%rbp)	#, total
 1595      000000
 1596              	.LBB18:
 1597              	# Catalog.cpp:252:     for(auto& i: output.count) {
 251:Catalog.cpp   ****     //iterate by using an iterator
 252:Catalog.cpp   ****     for(auto& i: output.count) {
 1598              		.loc 2 252 25
 1599 09c5 488B45C8 		movq	-56(%rbp), %rax	# output, tmp93
 1600 09c9 4883C064 		addq	$100, %rax	#, tmp92
 1601 09cd 488945E8 		movq	%rax, -24(%rbp)	# tmp92, __for_range
 1602 09d1 488B45E8 		movq	-24(%rbp), %rax	# __for_range, tmp94
 1603 09d5 488945E0 		movq	%rax, -32(%rbp)	# tmp94, __for_begin
 1604 09d9 488B45E8 		movq	-24(%rbp), %rax	# __for_range, tmp98
 1605 09dd 4805D000 		addq	$208, %rax	#, tmp97
 1605      0000
 1606 09e3 488945F0 		movq	%rax, -16(%rbp)	# tmp97, __for_end
 1607              	.L72:
 1608              	# Catalog.cpp:252:     for(auto& i: output.count) {
 1609              		.loc 2 252 25 is_stmt 0 discriminator 3
 1610 09e7 488B45E0 		movq	-32(%rbp), %rax	# __for_begin, tmp99
 1611 09eb 483B45F0 		cmpq	-16(%rbp), %rax	# __for_end, tmp99
 1612 09ef 7419     		je	.L71	#,
 1613              	# Catalog.cpp:252:     for(auto& i: output.count) {
 1614              		.loc 2 252 15 is_stmt 1 discriminator 2
 1615 09f1 488B45E0 		movq	-32(%rbp), %rax	# __for_begin, tmp100
 1616 09f5 488945F8 		movq	%rax, -8(%rbp)	# tmp100, i
 1617              	# Catalog.cpp:253:         total += i.frequency;
 253:Catalog.cpp   ****         total += i.frequency;
 1618              		.loc 2 253 20 discriminator 2
 1619 09f9 488B45F8 		movq	-8(%rbp), %rax	# i, tmp101
 1620 09fd 8B4004   		movl	4(%rax), %eax	# i_9->frequency, _1
 1621              	# Catalog.cpp:253:         total += i.frequency;
 1622              		.loc 2 253 15 discriminator 2
 1623 0a00 0145DC   		addl	%eax, -36(%rbp)	# _1, total
 1624              	# Catalog.cpp:252:     for(auto& i: output.count) {
 252:Catalog.cpp   ****         total += i.frequency;
 1625              		.loc 2 252 5 discriminator 2
 1626 0a03 488345E0 		addq	$8, -32(%rbp)	#, __for_begin
 1626      08
 1627 0a08 EBDD     		jmp	.L72	#
 1628              	.L71:
 1629              	.LBE18:
 1630              	# Catalog.cpp:255:     return total;
 254:Catalog.cpp   ****     }
 255:Catalog.cpp   ****     return total;
 1631              		.loc 2 255 12
 1632 0a0a 8B45DC   		movl	-36(%rbp), %eax	# total, _13
 1633              	# Catalog.cpp:256: }
 256:Catalog.cpp   **** }
 1634              		.loc 2 256 1
 1635 0a0d 5D       		popq	%rbp	#
 1636              		.cfi_def_cfa 7, 8
 1637 0a0e C3       		ret	
 1638              		.cfi_endproc
 1639              	.LFE2174:
 1641              		.section	.rodata
 1642 00ae 0000     		.align 8
 1643              	.LC7:
 1644 00b0 576F756C 		.string	"Would the user wish to see the percent use of letters?(y/n): "
 1644      64207468 
 1644      65207573 
 1644      65722077 
 1644      69736820 
 1645              	.LC8:
 1646 00ee 206C6574 		.string	" letter frequency: "
 1646      74657220 
 1646      66726571 
 1646      75656E63 
 1646      793A2000 
 1647              	.LC10:
 1648 0102 3A2000   		.string	": "
 1649              		.text
 1650              		.globl	_Z13letter_outputR7Catalog
 1652              	_Z13letter_outputR7Catalog:
 1653              	.LFB2175:
 257:Catalog.cpp   **** 
 258:Catalog.cpp   **** void letter_output(Catalog &output) {
 1654              		.loc 2 258 37
 1655              		.cfi_startproc
 1656 0a0f 55       		pushq	%rbp	#
 1657              		.cfi_def_cfa_offset 16
 1658              		.cfi_offset 6, -16
 1659 0a10 4889E5   		movq	%rsp, %rbp	#,
 1660              		.cfi_def_cfa_register 6
 1661 0a13 4883EC50 		subq	$80, %rsp	#,
 1662 0a17 48897DB8 		movq	%rdi, -72(%rbp)	# output, output
 1663              	# Catalog.cpp:258: void letter_output(Catalog &output) {
 1664              		.loc 2 258 37
 1665 0a1b 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp126
 1665      25280000 
 1665      00
 1666 0a24 488945F8 		movq	%rax, -8(%rbp)	# tmp126, D.51564
 1667 0a28 31C0     		xorl	%eax, %eax	# tmp126
 1668              	# Catalog.cpp:261:     cout  << "Would the user wish to see the percent use of letters?(y/n): ";
 259:Catalog.cpp   **** 
 260:Catalog.cpp   ****     //Get the input from user if they wish to see this
 261:Catalog.cpp   ****     cout  << "Would the user wish to see the percent use of letters?(y/n): ";
 1669              		.loc 2 261 14
 1670 0a2a 488D3500 		leaq	.LC7(%rip), %rsi	#,
 1670      000000
 1671 0a31 488D3D00 		leaq	_ZSt4cout(%rip), %rdi	#,
 1671      000000
 1672 0a38 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1672      00
 1673              	# Catalog.cpp:263:     cin >> decision;
 262:Catalog.cpp   ****     char decision;
 263:Catalog.cpp   ****     cin >> decision;
 1674              		.loc 2 263 12
 1675 0a3d 488D45CF 		leaq	-49(%rbp), %rax	#, tmp104
 1676 0a41 4889C6   		movq	%rax, %rsi	# tmp104,
 1677 0a44 488D3D00 		leaq	_ZSt3cin(%rip), %rdi	#,
 1677      000000
 1678 0a4b E8000000 		call	_ZStrsIcSt11char_traitsIcEERSt13basic_istreamIT_T0_ES6_RS3_@PLT	#
 1678      00
 1679              	# Catalog.cpp:264:     cin.ignore();
 264:Catalog.cpp   ****     cin.ignore();
 1680              		.loc 2 264 16
 1681 0a50 488D3D00 		leaq	_ZSt3cin(%rip), %rdi	#,
 1681      000000
 1682 0a57 E8000000 		call	_ZNSi6ignoreEv@PLT	#
 1682      00
 1683              	.LBB19:
 1684              	# Catalog.cpp:267:     if(decision == 'y') {
 265:Catalog.cpp   **** 
 266:Catalog.cpp   ****     //if yes
 267:Catalog.cpp   ****     if(decision == 'y') {
 1685              		.loc 2 267 17
 1686 0a5c 0FB645CF 		movzbl	-49(%rbp), %eax	# decision, decision.9_1
 1687              	# Catalog.cpp:267:     if(decision == 'y') {
 1688              		.loc 2 267 5
 1689 0a60 3C79     		cmpb	$121, %al	#, decision.9_1
 1690 0a62 0F853301 		jne	.L79	#,
 1690      0000
 1691              	.LBB20:
 1692              	# Catalog.cpp:269:         cout << endl << endl << output.title << " letter frequency: " << endl;
 268:Catalog.cpp   ****         //title
 269:Catalog.cpp   ****         cout << endl << endl << output.title << " letter frequency: " << endl;
 1693              		.loc 2 269 17
 1694 0a68 488B0500 		movq	_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GOTPCREL(%rip), %rax	#, tmp105
 1694      000000
 1695 0a6f 4889C6   		movq	%rax, %rsi	# tmp105,
 1696 0a72 488D3D00 		leaq	_ZSt4cout(%rip), %rdi	#,
 1696      000000
 1697 0a79 E8000000 		call	_ZNSolsEPFRSoS_E@PLT	#
 1697      00
 1698 0a7e 4889C2   		movq	%rax, %rdx	#, _2
 1699              	# Catalog.cpp:269:         cout << endl << endl << output.title << " letter frequency: " << endl;
 1700              		.loc 2 269 25
 1701 0a81 488B0500 		movq	_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GOTPCREL(%rip), %rax	#, tmp106
 1701      000000
 1702 0a88 4889C6   		movq	%rax, %rsi	# tmp106,
 1703 0a8b 4889D7   		movq	%rdx, %rdi	# _2,
 1704 0a8e E8000000 		call	_ZNSolsEPFRSoS_E@PLT	#
 1704      00
 1705 0a93 4889C2   		movq	%rax, %rdx	#, _3
 1706              	# Catalog.cpp:269:         cout << endl << endl << output.title << " letter frequency: " << endl;
 1707              		.loc 2 269 40
 1708 0a96 488B45B8 		movq	-72(%rbp), %rax	# output, _4
 1709              	# Catalog.cpp:269:         cout << endl << endl << output.title << " letter frequency: " << endl;
 1710              		.loc 2 269 49
 1711 0a9a 4889C6   		movq	%rax, %rsi	# _4,
 1712 0a9d 4889D7   		movq	%rdx, %rdi	# _3,
 1713 0aa0 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1713      00
 1714 0aa5 488D3500 		leaq	.LC8(%rip), %rsi	#,
 1714      000000
 1715 0aac 4889C7   		movq	%rax, %rdi	# _5,
 1716 0aaf E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1716      00
 1717 0ab4 4889C2   		movq	%rax, %rdx	#, _6
 1718              	# Catalog.cpp:269:         cout << endl << endl << output.title << " letter frequency: " << endl;
 1719              		.loc 2 269 74
 1720 0ab7 488B0500 		movq	_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GOTPCREL(%rip), %rax	#, tmp107
 1720      000000
 1721 0abe 4889C6   		movq	%rax, %rsi	# tmp107,
 1722 0ac1 4889D7   		movq	%rdx, %rdi	# _6,
 1723 0ac4 E8000000 		call	_ZNSolsEPFRSoS_E@PLT	#
 1723      00
 1724              	.LBB21:
 1725              	# Catalog.cpp:270:         for(auto& i: output.count) {
 270:Catalog.cpp   ****         for(auto& i: output.count) {
 1726              		.loc 2 270 29
 1727 0ac9 488B45B8 		movq	-72(%rbp), %rax	# output, tmp111
 1728 0acd 4883C064 		addq	$100, %rax	#, tmp110
 1729 0ad1 488945D8 		movq	%rax, -40(%rbp)	# tmp110, __for_range
 1730 0ad5 488B45D8 		movq	-40(%rbp), %rax	# __for_range, tmp112
 1731 0ad9 488945D0 		movq	%rax, -48(%rbp)	# tmp112, __for_begin
 1732 0add 488B45D8 		movq	-40(%rbp), %rax	# __for_range, tmp116
 1733 0ae1 4805D000 		addq	$208, %rax	#, tmp115
 1733      0000
 1734 0ae7 488945E0 		movq	%rax, -32(%rbp)	# tmp115, __for_end
 1735              	.L77:
 1736              	# Catalog.cpp:270:         for(auto& i: output.count) {
 1737              		.loc 2 270 29 is_stmt 0 discriminator 1
 1738 0aeb 488B45D0 		movq	-48(%rbp), %rax	# __for_begin, tmp117
 1739 0aef 483B45E0 		cmpq	-32(%rbp), %rax	# __for_end, tmp117
 1740 0af3 0F84A200 		je	.L79	#,
 1740      0000
 1741              	.LBB22:
 1742              	# Catalog.cpp:270:         for(auto& i: output.count) {
 1743              		.loc 2 270 19 is_stmt 1 discriminator 2
 1744 0af9 488B45D0 		movq	-48(%rbp), %rax	# __for_begin, tmp118
 1745 0afd 488945E8 		movq	%rax, -24(%rbp)	# tmp118, i
 1746              	# Catalog.cpp:272:             double percent = ((double)(i.frequency) / letter_count(output)) * 10
 271:Catalog.cpp   ****             //output each letter as a percent
 272:Catalog.cpp   ****             double percent = ((double)(i.frequency) / letter_count(output)) * 100;
 1747              		.loc 2 272 42 discriminator 2
 1748 0b01 488B45E8 		movq	-24(%rbp), %rax	# i, tmp119
 1749 0b05 8B4004   		movl	4(%rax), %eax	# i_39->frequency, _7
 1750              	# Catalog.cpp:272:             double percent = ((double)(i.frequency) / letter_count(output)) * 10
 1751              		.loc 2 272 31 discriminator 2
 1752 0b08 F20F2AD0 		cvtsi2sd	%eax, %xmm2	# _7, _8
 1753 0b0c F20F1155 		movsd	%xmm2, -80(%rbp)	# _8, %sfp
 1753      B0
 1754              	# Catalog.cpp:272:             double percent = ((double)(i.frequency) / letter_count(output)) * 10
 1755              		.loc 2 272 67 discriminator 2
 1756 0b11 488B45B8 		movq	-72(%rbp), %rax	# output, tmp120
 1757 0b15 4889C7   		movq	%rax, %rdi	# tmp120,
 1758 0b18 E8000000 		call	_Z12letter_countR7Catalog	#
 1758      00
 1759              	# Catalog.cpp:272:             double percent = ((double)(i.frequency) / letter_count(output)) * 10
 1760              		.loc 2 272 53 discriminator 2
 1761 0b1d F20F2AC0 		cvtsi2sd	%eax, %xmm0	# _9, _10
 1762 0b21 F20F104D 		movsd	-80(%rbp), %xmm1	# %sfp, _8
 1762      B0
 1763 0b26 F20F5EC8 		divsd	%xmm0, %xmm1	# _10, _8
 1764              	# Catalog.cpp:272:             double percent = ((double)(i.frequency) / letter_count(output)) * 10
 1765              		.loc 2 272 79 discriminator 2
 1766 0b2a F20F1005 		movsd	.LC9(%rip), %xmm0	#, tmp122
 1766      00000000 
 1767 0b32 F20F59C1 		mulsd	%xmm1, %xmm0	# _11, tmp121
 1768 0b36 F20F1145 		movsd	%xmm0, -16(%rbp)	# tmp121, percent
 1768      F0
 1769              	# Catalog.cpp:273:             cout << i.letter << ": " << percent << '%' << endl;            
 273:Catalog.cpp   ****             cout << i.letter << ": " << percent << '%' << endl;            
 1770              		.loc 2 273 23 discriminator 2
 1771 0b3b 488B45E8 		movq	-24(%rbp), %rax	# i, tmp123
 1772 0b3f 0FB600   		movzbl	(%rax), %eax	# i_39->letter, _12
 1773              	# Catalog.cpp:273:             cout << i.letter << ": " << percent << '%' << endl;            
 1774              		.loc 2 273 33 discriminator 2
 1775 0b42 0FBEC0   		movsbl	%al, %eax	# _12, _13
 1776 0b45 89C6     		movl	%eax, %esi	# _13,
 1777 0b47 488D3D00 		leaq	_ZSt4cout(%rip), %rdi	#,
 1777      000000
 1778 0b4e E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT	#
 1778      00
 1779 0b53 488D3500 		leaq	.LC10(%rip), %rsi	#,
 1779      000000
 1780 0b5a 4889C7   		movq	%rax, %rdi	# _14,
 1781 0b5d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1781      00
 1782              	# Catalog.cpp:273:             cout << i.letter << ": " << percent << '%' << endl;            
 1783              		.loc 2 273 41 discriminator 2
 1784 0b62 F20F1045 		movsd	-16(%rbp), %xmm0	# percent, tmp124
 1784      F0
 1785 0b67 4889C7   		movq	%rax, %rdi	# _15,
 1786 0b6a E8000000 		call	_ZNSolsEd@PLT	#
 1786      00
 1787              	# Catalog.cpp:273:             cout << i.letter << ": " << percent << '%' << endl;            
 1788              		.loc 2 273 52 discriminator 2
 1789 0b6f BE250000 		movl	$37, %esi	#,
 1789      00
 1790 0b74 4889C7   		movq	%rax, %rdi	# _16,
 1791 0b77 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT	#
 1791      00
 1792 0b7c 4889C2   		movq	%rax, %rdx	#, _17
 1793              	# Catalog.cpp:273:             cout << i.letter << ": " << percent << '%' << endl;            
 1794              		.loc 2 273 59 discriminator 2
 1795 0b7f 488B0500 		movq	_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GOTPCREL(%rip), %rax	#, tmp125
 1795      000000
 1796 0b86 4889C6   		movq	%rax, %rsi	# tmp125,
 1797 0b89 4889D7   		movq	%rdx, %rdi	# _17,
 1798 0b8c E8000000 		call	_ZNSolsEPFRSoS_E@PLT	#
 1798      00
 1799              	.LBE22:
 1800              	# Catalog.cpp:270:         for(auto& i: output.count) {
 270:Catalog.cpp   ****         for(auto& i: output.count) {
 1801              		.loc 2 270 9 discriminator 2
 1802 0b91 488345D0 		addq	$8, -48(%rbp)	#, __for_begin
 1802      08
 1803 0b96 E950FFFF 		jmp	.L77	#
 1803      FF
 1804              	.L79:
 1805              	.LBE21:
 1806              	.LBE20:
 1807              	.LBE19:
 1808              	# Catalog.cpp:277: }
 274:Catalog.cpp   ****         }
 275:Catalog.cpp   ****     }
 276:Catalog.cpp   **** 
 277:Catalog.cpp   **** }
 1809              		.loc 2 277 1
 1810 0b9b 90       		nop	
 1811 0b9c 488B45F8 		movq	-8(%rbp), %rax	# D.51564, tmp127
 1812 0ba0 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp127
 1812      25280000 
 1812      00
 1813 0ba9 7405     		je	.L78	#,
 1814 0bab E8000000 		call	__stack_chk_fail@PLT	#
 1814      00
 1815              	.L78:
 1816 0bb0 C9       		leave	
 1817              		.cfi_def_cfa 7, 8
 1818 0bb1 C3       		ret	
 1819              		.cfi_endproc
 1820              	.LFE2175:
 1822              		.section	.rodata
 1823              	.LC11:
 1824 0105 5469746C 		.string	"Title: "
 1824      653A2000 
 1825              	.LC12:
 1826 010d 46756C6C 		.string	"Full Name: "
 1826      204E616D 
 1826      653A2000 
 1827              	.LC13:
 1828 0119 46697273 		.string	"First Name: "
 1828      74204E61 
 1828      6D653A20 
 1828      00
 1829              	.LC14:
 1830 0126 4C617374 		.string	"Last Name: "
 1830      204E616D 
 1830      653A2000 
 1831              	.LC15:
 1832 0132 576F7264 		.string	"Word Count: "
 1832      20436F75 
 1832      6E743A20 
 1832      00
 1833              	.LC16:
 1834 013f 4C696E65 		.string	"Line Count: "
 1834      20436F75 
 1834      6E743A20 
 1834      00
 1835              		.text
 1836              		.globl	_Z12catalog_cardB5cxx11R7Catalog
 1838              	_Z12catalog_cardB5cxx11R7Catalog:
 1839              	.LFB2176:
 278:Catalog.cpp   **** 
 279:Catalog.cpp   **** 
 280:Catalog.cpp   **** string catalog_card(Catalog &output) {
 1840              		.loc 2 280 38
 1841              		.cfi_startproc
 1842              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1843              		.cfi_lsda 0x1b,.LLSDA2176
 1844 0bb2 55       		pushq	%rbp	#
 1845              		.cfi_def_cfa_offset 16
 1846              		.cfi_offset 6, -16
 1847 0bb3 4889E5   		movq	%rsp, %rbp	#,
 1848              		.cfi_def_cfa_register 6
 1849 0bb6 53       		pushq	%rbx	#
 1850 0bb7 4881EC98 		subq	$408, %rsp	#,
 1850      010000
 1851              		.cfi_offset 3, -24
 1852 0bbe 4889BD68 		movq	%rdi, -408(%rbp)	# .result_ptr, .result_ptr
 1852      FEFFFF
 1853 0bc5 4889B560 		movq	%rsi, -416(%rbp)	# output, output
 1853      FEFFFF
 1854              	# Catalog.cpp:280: string catalog_card(Catalog &output) {
 1855              		.loc 2 280 38
 1856 0bcc 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp128
 1856      25280000 
 1856      00
 1857 0bd5 488945E8 		movq	%rax, -24(%rbp)	# tmp128, D.51570
 1858 0bd9 31C0     		xorl	%eax, %eax	# tmp128
 1859              	# Catalog.cpp:281:     ostringstream ostring;
 281:Catalog.cpp   ****     ostringstream ostring;
 1860              		.loc 2 281 19
 1861 0bdb 488D8570 		leaq	-400(%rbp), %rax	#, tmp109
 1861      FEFFFF
 1862 0be2 BE100000 		movl	$16, %esi	#,
 1862      00
 1863 0be7 4889C7   		movq	%rax, %rdi	# tmp109,
 1864              	.LEHB15:
 1865 0bea E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@PLT	#
 1865      00
 1866              	.LEHE15:
 1867              	# Catalog.cpp:283:     ostring << "Title: " << output.title << endl;
 282:Catalog.cpp   **** 
 283:Catalog.cpp   ****     ostring << "Title: " << output.title << endl;
 1868              		.loc 2 283 36
 1869 0bef 488D8570 		leaq	-400(%rbp), %rax	#, tmp110
 1869      FEFFFF
 1870 0bf6 488D3500 		leaq	.LC11(%rip), %rsi	#,
 1870      000000
 1871 0bfd 4889C7   		movq	%rax, %rdi	# tmp110,
 1872              	.LEHB16:
 1873 0c00 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1873      00
 1874 0c05 4889C2   		movq	%rax, %rdx	#, _1
 1875 0c08 488B8560 		movq	-416(%rbp), %rax	# output, _2
 1875      FEFFFF
 1876 0c0f 4889C6   		movq	%rax, %rsi	# _2,
 1877 0c12 4889D7   		movq	%rdx, %rdi	# _1,
 1878 0c15 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1878      00
 1879              	# Catalog.cpp:283:     ostring << "Title: " << output.title << endl;
 1880              		.loc 2 283 36 is_stmt 0 discriminator 1
 1881 0c1a 4889C2   		movq	%rax, %rdx	#, _3
 1882              	# Catalog.cpp:283:     ostring << "Title: " << output.title << endl;
 1883              		.loc 2 283 45 is_stmt 1 discriminator 1
 1884 0c1d 488B0500 		movq	_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GOTPCREL(%rip), %rax	#, tmp111
 1884      000000
 1885 0c24 4889C6   		movq	%rax, %rsi	# tmp111,
 1886 0c27 4889D7   		movq	%rdx, %rdi	# _3,
 1887 0c2a E8000000 		call	_ZNSolsEPFRSoS_E@PLT	#
 1887      00
 1888              	# Catalog.cpp:284:     ostring << "Full Name: " << output.first_name << ' ' << output.last_name << 
 284:Catalog.cpp   ****     ostring << "Full Name: " << output.first_name << ' ' << output.last_name << '\n';
 1889              		.loc 2 284 81
 1890 0c2f 488D8570 		leaq	-400(%rbp), %rax	#, tmp112
 1890      FEFFFF
 1891 0c36 488D3500 		leaq	.LC12(%rip), %rsi	#,
 1891      000000
 1892 0c3d 4889C7   		movq	%rax, %rdi	# tmp112,
 1893 0c40 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1893      00
 1894 0c45 4889C2   		movq	%rax, %rdx	#, _4
 1895              	# Catalog.cpp:284:     ostring << "Full Name: " << output.first_name << ' ' << output.last_name << 
 1896              		.loc 2 284 40
 1897 0c48 488B8560 		movq	-416(%rbp), %rax	# output, tmp113
 1897      FEFFFF
 1898 0c4f 4883C020 		addq	$32, %rax	#, _5
 1899              	# Catalog.cpp:284:     ostring << "Full Name: " << output.first_name << ' ' << output.last_name << 
 1900              		.loc 2 284 81
 1901 0c53 4889C6   		movq	%rax, %rsi	# _5,
 1902 0c56 4889D7   		movq	%rdx, %rdi	# _4,
 1903 0c59 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1903      00
 1904              	# Catalog.cpp:284:     ostring << "Full Name: " << output.first_name << ' ' << output.last_name << 
 1905              		.loc 2 284 81 is_stmt 0 discriminator 1
 1906 0c5e BE200000 		movl	$32, %esi	#,
 1906      00
 1907 0c63 4889C7   		movq	%rax, %rdi	# _6,
 1908 0c66 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT	#
 1908      00
 1909              	# Catalog.cpp:284:     ostring << "Full Name: " << output.first_name << ' ' << output.last_name << 
 1910              		.loc 2 284 81 discriminator 2
 1911 0c6b 4889C2   		movq	%rax, %rdx	#, _7
 1912              	# Catalog.cpp:284:     ostring << "Full Name: " << output.first_name << ' ' << output.last_name << 
 1913              		.loc 2 284 68 is_stmt 1 discriminator 2
 1914 0c6e 488B8560 		movq	-416(%rbp), %rax	# output, tmp114
 1914      FEFFFF
 1915 0c75 4883C040 		addq	$64, %rax	#, _8
 1916              	# Catalog.cpp:284:     ostring << "Full Name: " << output.first_name << ' ' << output.last_name << 
 1917              		.loc 2 284 81 discriminator 2
 1918 0c79 4889C6   		movq	%rax, %rsi	# _8,
 1919 0c7c 4889D7   		movq	%rdx, %rdi	# _7,
 1920 0c7f E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1920      00
 1921              	# Catalog.cpp:284:     ostring << "Full Name: " << output.first_name << ' ' << output.last_name << 
 1922              		.loc 2 284 81 is_stmt 0 discriminator 3
 1923 0c84 BE0A0000 		movl	$10, %esi	#,
 1923      00
 1924 0c89 4889C7   		movq	%rax, %rdi	# _9,
 1925 0c8c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT	#
 1925      00
 1926              	# Catalog.cpp:285:     ostring << "First Name: " << output.first_name << '\n';
 285:Catalog.cpp   ****     ostring << "First Name: " << output.first_name << '\n';
 1927              		.loc 2 285 55 is_stmt 1
 1928 0c91 488D8570 		leaq	-400(%rbp), %rax	#, tmp115
 1928      FEFFFF
 1929 0c98 488D3500 		leaq	.LC13(%rip), %rsi	#,
 1929      000000
 1930 0c9f 4889C7   		movq	%rax, %rdi	# tmp115,
 1931 0ca2 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1931      00
 1932 0ca7 4889C2   		movq	%rax, %rdx	#, _10
 1933              	# Catalog.cpp:285:     ostring << "First Name: " << output.first_name << '\n';
 1934              		.loc 2 285 41
 1935 0caa 488B8560 		movq	-416(%rbp), %rax	# output, tmp116
 1935      FEFFFF
 1936 0cb1 4883C020 		addq	$32, %rax	#, _11
 1937              	# Catalog.cpp:285:     ostring << "First Name: " << output.first_name << '\n';
 1938              		.loc 2 285 55
 1939 0cb5 4889C6   		movq	%rax, %rsi	# _11,
 1940 0cb8 4889D7   		movq	%rdx, %rdi	# _10,
 1941 0cbb E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1941      00
 1942              	# Catalog.cpp:285:     ostring << "First Name: " << output.first_name << '\n';
 1943              		.loc 2 285 55 is_stmt 0 discriminator 1
 1944 0cc0 BE0A0000 		movl	$10, %esi	#,
 1944      00
 1945 0cc5 4889C7   		movq	%rax, %rdi	# _12,
 1946 0cc8 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT	#
 1946      00
 1947              	# Catalog.cpp:286:     ostring << "Last Name: " << output.last_name << '\n';
 286:Catalog.cpp   ****     ostring << "Last Name: " << output.last_name << '\n';
 1948              		.loc 2 286 53 is_stmt 1
 1949 0ccd 488D8570 		leaq	-400(%rbp), %rax	#, tmp117
 1949      FEFFFF
 1950 0cd4 488D3500 		leaq	.LC14(%rip), %rsi	#,
 1950      000000
 1951 0cdb 4889C7   		movq	%rax, %rdi	# tmp117,
 1952 0cde E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1952      00
 1953 0ce3 4889C2   		movq	%rax, %rdx	#, _13
 1954              	# Catalog.cpp:286:     ostring << "Last Name: " << output.last_name << '\n';
 1955              		.loc 2 286 40
 1956 0ce6 488B8560 		movq	-416(%rbp), %rax	# output, tmp118
 1956      FEFFFF
 1957 0ced 4883C040 		addq	$64, %rax	#, _14
 1958              	# Catalog.cpp:286:     ostring << "Last Name: " << output.last_name << '\n';
 1959              		.loc 2 286 53
 1960 0cf1 4889C6   		movq	%rax, %rsi	# _14,
 1961 0cf4 4889D7   		movq	%rdx, %rdi	# _13,
 1962 0cf7 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1962      00
 1963              	# Catalog.cpp:286:     ostring << "Last Name: " << output.last_name << '\n';
 1964              		.loc 2 286 53 is_stmt 0 discriminator 1
 1965 0cfc BE0A0000 		movl	$10, %esi	#,
 1965      00
 1966 0d01 4889C7   		movq	%rax, %rdi	# _15,
 1967 0d04 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT	#
 1967      00
 1968              	# Catalog.cpp:287:     ostring << "Word Count: " << output.word_count << '\n';
 287:Catalog.cpp   ****     ostring << "Word Count: " << output.word_count << '\n';
 1969              		.loc 2 287 16 is_stmt 1
 1970 0d09 488D8570 		leaq	-400(%rbp), %rax	#, tmp119
 1970      FEFFFF
 1971 0d10 488D3500 		leaq	.LC15(%rip), %rsi	#,
 1971      000000
 1972 0d17 4889C7   		movq	%rax, %rdi	# tmp119,
 1973 0d1a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1973      00
 1974 0d1f 4889C2   		movq	%rax, %rdx	#, _16
 1975              	# Catalog.cpp:287:     ostring << "Word Count: " << output.word_count << '\n';
 1976              		.loc 2 287 55
 1977 0d22 488B8560 		movq	-416(%rbp), %rax	# output, tmp120
 1977      FEFFFF
 1978 0d29 8B4060   		movl	96(%rax), %eax	# output_28(D)->word_count, _17
 1979 0d2c 89C6     		movl	%eax, %esi	# _17,
 1980 0d2e 4889D7   		movq	%rdx, %rdi	# _16,
 1981 0d31 E8000000 		call	_ZNSolsEi@PLT	#
 1981      00
 1982              	# Catalog.cpp:287:     ostring << "Word Count: " << output.word_count << '\n';
 1983              		.loc 2 287 55 is_stmt 0 discriminator 1
 1984 0d36 BE0A0000 		movl	$10, %esi	#,
 1984      00
 1985 0d3b 4889C7   		movq	%rax, %rdi	# _18,
 1986 0d3e E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT	#
 1986      00
 1987              	# Catalog.cpp:288:     ostring << "Line Count: " << output.line_count << '\n';
 288:Catalog.cpp   ****     ostring << "Line Count: " << output.line_count << '\n';
 1988              		.loc 2 288 16 is_stmt 1
 1989 0d43 488D8570 		leaq	-400(%rbp), %rax	#, tmp121
 1989      FEFFFF
 1990 0d4a 488D3500 		leaq	.LC16(%rip), %rsi	#,
 1990      000000
 1991 0d51 4889C7   		movq	%rax, %rdi	# tmp121,
 1992 0d54 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1992      00
 1993 0d59 4889C2   		movq	%rax, %rdx	#, _19
 1994              	# Catalog.cpp:288:     ostring << "Line Count: " << output.line_count << '\n';
 1995              		.loc 2 288 55
 1996 0d5c 488B8560 		movq	-416(%rbp), %rax	# output, tmp122
 1996      FEFFFF
 1997 0d63 8B803401 		movl	308(%rax), %eax	# output_28(D)->line_count, _20
 1997      0000
 1998 0d69 89C6     		movl	%eax, %esi	# _20,
 1999 0d6b 4889D7   		movq	%rdx, %rdi	# _19,
 2000 0d6e E8000000 		call	_ZNSolsEi@PLT	#
 2000      00
 2001              	# Catalog.cpp:288:     ostring << "Line Count: " << output.line_count << '\n';
 2002              		.loc 2 288 55 is_stmt 0 discriminator 1
 2003 0d73 BE0A0000 		movl	$10, %esi	#,
 2003      00
 2004 0d78 4889C7   		movq	%rax, %rdi	# _21,
 2005 0d7b E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT	#
 2005      00
 2006              	# Catalog.cpp:290:     return ostring.str();
 289:Catalog.cpp   **** 
 290:Catalog.cpp   ****     return ostring.str();
 2007              		.loc 2 290 24 is_stmt 1
 2008 0d80 488B8568 		movq	-408(%rbp), %rax	# <retval>, tmp123
 2008      FEFFFF
 2009 0d87 488D9570 		leaq	-400(%rbp), %rdx	#, tmp124
 2009      FEFFFF
 2010 0d8e 4889D6   		movq	%rdx, %rsi	# tmp124,
 2011 0d91 4889C7   		movq	%rax, %rdi	# tmp123,
 2012 0d94 E8000000 		call	_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv@PLT	#
 2012      00
 2013              	.LEHE16:
 2014 0d99 90       		nop	
 2015              	# Catalog.cpp:281:     ostringstream ostring;
 281:Catalog.cpp   **** 
 2016              		.loc 2 281 19
 2017 0d9a 488D8570 		leaq	-400(%rbp), %rax	#, tmp125
 2017      FEFFFF
 2018 0da1 4889C7   		movq	%rax, %rdi	# tmp125,
 2019 0da4 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 2019      00
 2020              	# Catalog.cpp:290:     return ostring.str();
 2021              		.loc 2 290 24
 2022 0da9 90       		nop	
 2023              	# Catalog.cpp:291: }
 291:Catalog.cpp   **** }
 2024              		.loc 2 291 1
 2025 0daa 488B8568 		movq	-408(%rbp), %rax	# <retval>,
 2025      FEFFFF
 2026 0db1 488B4DE8 		movq	-24(%rbp), %rcx	# D.51570, tmp129
 2027 0db5 6448330C 		xorq	%fs:40, %rcx	# MEM[(<address-space-1> long unsigned int *)40B], tmp129
 2027      25280000 
 2027      00
 2028 0dbe 7424     		je	.L83	#,
 2029 0dc0 EB1D     		jmp	.L85	#
 2030              	.L84:
 2031 0dc2 4889C3   		movq	%rax, %rbx	#, tmp127
 2032              	# Catalog.cpp:281:     ostringstream ostring;
 281:Catalog.cpp   **** 
 2033              		.loc 2 281 19
 2034 0dc5 488D8570 		leaq	-400(%rbp), %rax	#, tmp126
 2034      FEFFFF
 2035 0dcc 4889C7   		movq	%rax, %rdi	# tmp126,
 2036 0dcf E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT	#
 2036      00
 2037 0dd4 4889D8   		movq	%rbx, %rax	# tmp127, D.51569
 2038 0dd7 4889C7   		movq	%rax, %rdi	# D.51569,
 2039              	.LEHB17:
 2040 0dda E8000000 		call	_Unwind_Resume@PLT	#
 2040      00
 2041              	.LEHE17:
 2042              	.L85:
 2043              	# Catalog.cpp:291: }
 2044              		.loc 2 291 1
 2045 0ddf E8000000 		call	__stack_chk_fail@PLT	#
 2045      00
 2046              	.L83:
 2047 0de4 4881C498 		addq	$408, %rsp	#,
 2047      010000
 2048 0deb 5B       		popq	%rbx	#
 2049 0dec 5D       		popq	%rbp	#
 2050              		.cfi_def_cfa 7, 8
 2051 0ded C3       		ret	
 2052              		.cfi_endproc
 2053              	.LFE2176:
 2054              		.section	.gcc_except_table
 2055              	.LLSDA2176:
 2056 0078 FF       		.byte	0xff
 2057 0079 FF       		.byte	0xff
 2058 007a 01       		.byte	0x1
 2059 007b 0F       		.uleb128 .LLSDACSE2176-.LLSDACSB2176
 2060              	.LLSDACSB2176:
 2061 007c 38       		.uleb128 .LEHB15-.LFB2176
 2062 007d 05       		.uleb128 .LEHE15-.LEHB15
 2063 007e 00       		.uleb128 0
 2064 007f 00       		.uleb128 0
 2065 0080 4E       		.uleb128 .LEHB16-.LFB2176
 2066 0081 9903     		.uleb128 .LEHE16-.LEHB16
 2067 0083 9004     		.uleb128 .L84-.LFB2176
 2068 0085 00       		.uleb128 0
 2069 0086 A804     		.uleb128 .LEHB17-.LFB2176
 2070 0088 05       		.uleb128 .LEHE17-.LEHB17
 2071 0089 00       		.uleb128 0
 2072 008a 00       		.uleb128 0
 2073              	.LLSDACSE2176:
 2074              		.text
 2076              		.section	.rodata
 2077              	.LC17:
 2078 014c 43617264 		.string	"CardCatalog.txt"
 2078      43617461 
 2078      6C6F672E 
 2078      74787400 
 2079              		.text
 2080              		.globl	_Z14output_catalogRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 2082              	_Z14output_catalogRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
 2083              	.LFB2177:
 292:Catalog.cpp   **** 
 293:Catalog.cpp   **** void output_catalog(string &out) {
 2084              		.loc 2 293 34
 2085              		.cfi_startproc
 2086              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2087              		.cfi_lsda 0x1b,.LLSDA2177
 2088 0dee 55       		pushq	%rbp	#
 2089              		.cfi_def_cfa_offset 16
 2090              		.cfi_offset 6, -16
 2091 0def 4889E5   		movq	%rsp, %rbp	#,
 2092              		.cfi_def_cfa_register 6
 2093 0df2 53       		pushq	%rbx	#
 2094 0df3 4881EC38 		subq	$568, %rsp	#,
 2094      020000
 2095              		.cfi_offset 3, -24
 2096 0dfa 4889BDC8 		movq	%rdi, -568(%rbp)	# out, out
 2096      FDFFFF
 2097              	# Catalog.cpp:293: void output_catalog(string &out) {
 2098              		.loc 2 293 34
 2099 0e01 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp99
 2099      25280000 
 2099      00
 2100 0e0a 488945E8 		movq	%rax, -24(%rbp)	# tmp99, D.51580
 2101 0e0e 31C0     		xorl	%eax, %eax	# tmp99
 2102              	# Catalog.cpp:296:     fstream ofile("CardCatalog.txt", ios::out | ios::app);
 294:Catalog.cpp   **** 
 295:Catalog.cpp   ****     //Creates the fstream object to append the file
 296:Catalog.cpp   ****     fstream ofile("CardCatalog.txt", ios::out | ios::app);
 2103              		.loc 2 296 57
 2104 0e10 BE010000 		movl	$1, %esi	#,
 2104      00
 2105 0e15 BF100000 		movl	$16, %edi	#,
 2105      00
 2106 0e1a E8000000 		call	_ZStorSt13_Ios_OpenmodeS_	#
 2106      00
 2107 0e1f 89C2     		movl	%eax, %edx	#, _1
 2108 0e21 488D85D0 		leaq	-560(%rbp), %rax	#, tmp90
 2108      FDFFFF
 2109 0e28 488D3500 		leaq	.LC17(%rip), %rsi	#,
 2109      000000
 2110 0e2f 4889C7   		movq	%rax, %rdi	# tmp90,
 2111              	.LEHB18:
 2112 0e32 E8000000 		call	_ZNSt13basic_fstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode@PLT	#
 2112      00
 2113              	.LEHE18:
 2114              	# Catalog.cpp:299:     ofile << out << endl;
 297:Catalog.cpp   ****     
 298:Catalog.cpp   ****     //output the string
 299:Catalog.cpp   ****     ofile << out << endl;
 2115              		.loc 2 299 14
 2116 0e37 488B85C8 		movq	-568(%rbp), %rax	# out, tmp91
 2116      FDFFFF
 2117 0e3e 488D95D0 		leaq	-560(%rbp), %rdx	#, tmp92
 2117      FDFFFF
 2118 0e45 4883C210 		addq	$16, %rdx	#, tmp93
 2119 0e49 4889C6   		movq	%rax, %rsi	# tmp91,
 2120 0e4c 4889D7   		movq	%rdx, %rdi	# tmp93,
 2121              	.LEHB19:
 2122 0e4f E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 2122      00
 2123 0e54 4889C2   		movq	%rax, %rdx	#, _2
 2124              	# Catalog.cpp:299:     ofile << out << endl;
 2125              		.loc 2 299 21
 2126 0e57 488B0500 		movq	_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@GOTPCREL(%rip), %rax	#, tmp94
 2126      000000
 2127 0e5e 4889C6   		movq	%rax, %rsi	# tmp94,
 2128 0e61 4889D7   		movq	%rdx, %rdi	# _2,
 2129 0e64 E8000000 		call	_ZNSolsEPFRSoS_E@PLT	#
 2129      00
 2130              	# Catalog.cpp:302:     ofile.close();
 300:Catalog.cpp   **** 
 301:Catalog.cpp   ****     //close file
 302:Catalog.cpp   ****     ofile.close();
 2131              		.loc 2 302 16
 2132 0e69 488D85D0 		leaq	-560(%rbp), %rax	#, tmp95
 2132      FDFFFF
 2133 0e70 4889C7   		movq	%rax, %rdi	# tmp95,
 2134 0e73 E8000000 		call	_ZNSt13basic_fstreamIcSt11char_traitsIcEE5closeEv@PLT	#
 2134      00
 2135              	.LEHE19:
 2136              	# Catalog.cpp:296:     fstream ofile("CardCatalog.txt", ios::out | ios::app);
 296:Catalog.cpp   ****     
 2137              		.loc 2 296 57
 2138 0e78 488D85D0 		leaq	-560(%rbp), %rax	#, tmp96
 2138      FDFFFF
 2139 0e7f 4889C7   		movq	%rax, %rdi	# tmp96,
 2140 0e82 E8000000 		call	_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@PLT	#
 2140      00
 2141              	# Catalog.cpp:304: }
 303:Catalog.cpp   **** 
 304:Catalog.cpp   **** }...
 2142              		.loc 2 304 1
 2143 0e87 90       		nop	
 2144 0e88 488B45E8 		movq	-24(%rbp), %rax	# D.51580, tmp100
 2145 0e8c 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp100
 2145      25280000 
 2145      00
 2146 0e95 7424     		je	.L88	#,
 2147 0e97 EB1D     		jmp	.L90	#
 2148              	.L89:
 2149 0e99 4889C3   		movq	%rax, %rbx	#, tmp98
 2150              	# Catalog.cpp:296:     fstream ofile("CardCatalog.txt", ios::out | ios::app);
 296:Catalog.cpp   ****     
 2151              		.loc 2 296 57
 2152 0e9c 488D85D0 		leaq	-560(%rbp), %rax	#, tmp97
 2152      FDFFFF
 2153 0ea3 4889C7   		movq	%rax, %rdi	# tmp97,
 2154 0ea6 E8000000 		call	_ZNSt13basic_fstreamIcSt11char_traitsIcEED1Ev@PLT	#
 2154      00
 2155 0eab 4889D8   		movq	%rbx, %rax	# tmp98, D.51579
 2156 0eae 4889C7   		movq	%rax, %rdi	# D.51579,
 2157              	.LEHB20:
 2158 0eb1 E8000000 		call	_Unwind_Resume@PLT	#
 2158      00
 2159              	.LEHE20:
 2160              	.L90:
 2161              	# Catalog.cpp:304: }
 2162              		.loc 2 304 1
 2163 0eb6 E8000000 		call	__stack_chk_fail@PLT	#
 2163      00
 2164              	.L88:
 2165 0ebb 4881C438 		addq	$568, %rsp	#,
 2165      020000
 2166 0ec2 5B       		popq	%rbx	#
 2167 0ec3 5D       		popq	%rbp	#
 2168              		.cfi_def_cfa 7, 8
 2169 0ec4 C3       		ret	
 2170              		.cfi_endproc
 2171              	.LFE2177:
 2172              		.section	.gcc_except_table
 2173              	.LLSDA2177:
 2174 008b FF       		.byte	0xff
 2175 008c FF       		.byte	0xff
 2176 008d 01       		.byte	0x1
 2177 008e 0E       		.uleb128 .LLSDACSE2177-.LLSDACSB2177
 2178              	.LLSDACSB2177:
 2179 008f 44       		.uleb128 .LEHB18-.LFB2177
 2180 0090 05       		.uleb128 .LEHE18-.LEHB18
 2181 0091 00       		.uleb128 0
 2182 0092 00       		.uleb128 0
 2183 0093 61       		.uleb128 .LEHB19-.LFB2177
 2184 0094 29       		.uleb128 .LEHE19-.LEHB19
 2185 0095 AB01     		.uleb128 .L89-.LFB2177
 2186 0097 00       		.uleb128 0
 2187 0098 C301     		.uleb128 .LEHB20-.LFB2177
 2188 009a 05       		.uleb128 .LEHE20-.LEHB20
 2189 009b 00       		.uleb128 0
 2190 009c 00       		.uleb128 0
 2191              	.LLSDACSE2177:
 2192              		.text
 2194              		.section	.text._ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_,"axG",
 2195              		.weak	_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_
 2197              	_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_:
 2198              	.LFB2460:
 2199              		.file 4 "/usr/include/c++/8/bits/basic_string.h"
   1:/usr/include/c++/8/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/8/bits/basic_string.h **** 
   3:/usr/include/c++/8/bits/basic_string.h **** // Copyright (C) 1997-2018 Free Software Foundation, Inc.
   4:/usr/include/c++/8/bits/basic_string.h **** //
   5:/usr/include/c++/8/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/8/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/8/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/8/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/8/bits/basic_string.h **** // any later version.
  10:/usr/include/c++/8/bits/basic_string.h **** 
  11:/usr/include/c++/8/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/8/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/8/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/8/bits/basic_string.h **** // GNU General Public License for more details.
  15:/usr/include/c++/8/bits/basic_string.h **** 
  16:/usr/include/c++/8/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/8/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/8/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/8/bits/basic_string.h **** 
  20:/usr/include/c++/8/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/8/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/8/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/8/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/8/bits/basic_string.h **** 
  25:/usr/include/c++/8/bits/basic_string.h **** /** @file bits/basic_string.h
  26:/usr/include/c++/8/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/8/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/8/bits/basic_string.h ****  */
  29:/usr/include/c++/8/bits/basic_string.h **** 
  30:/usr/include/c++/8/bits/basic_string.h **** //
  31:/usr/include/c++/8/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/usr/include/c++/8/bits/basic_string.h **** //
  33:/usr/include/c++/8/bits/basic_string.h **** 
  34:/usr/include/c++/8/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/usr/include/c++/8/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/usr/include/c++/8/bits/basic_string.h **** 
  37:/usr/include/c++/8/bits/basic_string.h **** #pragma GCC system_header
  38:/usr/include/c++/8/bits/basic_string.h **** 
  39:/usr/include/c++/8/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/usr/include/c++/8/bits/basic_string.h **** #include <ext/alloc_traits.h>
  41:/usr/include/c++/8/bits/basic_string.h **** #include <debug/debug.h>
  42:/usr/include/c++/8/bits/basic_string.h **** 
  43:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
  44:/usr/include/c++/8/bits/basic_string.h **** #include <initializer_list>
  45:/usr/include/c++/8/bits/basic_string.h **** #endif
  46:/usr/include/c++/8/bits/basic_string.h **** 
  47:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
  48:/usr/include/c++/8/bits/basic_string.h **** # include <string_view>
  49:/usr/include/c++/8/bits/basic_string.h **** #endif
  50:/usr/include/c++/8/bits/basic_string.h **** 
  51:/usr/include/c++/8/bits/basic_string.h **** 
  52:/usr/include/c++/8/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/c++/8/bits/basic_string.h **** {
  54:/usr/include/c++/8/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/c++/8/bits/basic_string.h **** 
  56:/usr/include/c++/8/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  57:/usr/include/c++/8/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  58:/usr/include/c++/8/bits/basic_string.h ****   /**
  59:/usr/include/c++/8/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  60:/usr/include/c++/8/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  61:/usr/include/c++/8/bits/basic_string.h ****    *
  62:/usr/include/c++/8/bits/basic_string.h ****    *  @ingroup strings
  63:/usr/include/c++/8/bits/basic_string.h ****    *  @ingroup sequences
  64:/usr/include/c++/8/bits/basic_string.h ****    *
  65:/usr/include/c++/8/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  66:/usr/include/c++/8/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  67:/usr/include/c++/8/bits/basic_string.h ****    *                   char_traits<_CharT>.
  68:/usr/include/c++/8/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  69:/usr/include/c++/8/bits/basic_string.h ****    *
  70:/usr/include/c++/8/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  71:/usr/include/c++/8/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  72:/usr/include/c++/8/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  73:/usr/include/c++/8/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  74:/usr/include/c++/8/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  75:/usr/include/c++/8/bits/basic_string.h ****    */
  76:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  77:/usr/include/c++/8/bits/basic_string.h ****     class basic_string
  78:/usr/include/c++/8/bits/basic_string.h ****     {
  79:/usr/include/c++/8/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  80:/usr/include/c++/8/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  81:/usr/include/c++/8/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  82:/usr/include/c++/8/bits/basic_string.h **** 
  83:/usr/include/c++/8/bits/basic_string.h ****       // Types:
  84:/usr/include/c++/8/bits/basic_string.h ****     public:
  85:/usr/include/c++/8/bits/basic_string.h ****       typedef _Traits					traits_type;
  86:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  87:/usr/include/c++/8/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  88:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  89:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  90:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  91:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
  92:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
  93:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
  94:/usr/include/c++/8/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
  95:/usr/include/c++/8/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
  96:/usr/include/c++/8/bits/basic_string.h **** 							const_iterator;
  97:/usr/include/c++/8/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
  98:/usr/include/c++/8/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
  99:/usr/include/c++/8/bits/basic_string.h **** 
 100:/usr/include/c++/8/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
 101:/usr/include/c++/8/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
 102:/usr/include/c++/8/bits/basic_string.h **** 
 103:/usr/include/c++/8/bits/basic_string.h ****     private:
 104:/usr/include/c++/8/bits/basic_string.h ****       // type used for positions in insert, erase etc.
 105:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus < 201103L
 106:/usr/include/c++/8/bits/basic_string.h ****       typedef iterator __const_iterator;
 107:/usr/include/c++/8/bits/basic_string.h **** #else
 108:/usr/include/c++/8/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 109:/usr/include/c++/8/bits/basic_string.h **** #endif
 110:/usr/include/c++/8/bits/basic_string.h **** 
 111:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
 112:/usr/include/c++/8/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
 113:/usr/include/c++/8/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
 114:/usr/include/c++/8/bits/basic_string.h **** 
 115:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp, typename _Res>
 116:/usr/include/c++/8/bits/basic_string.h **** 	using _If_sv = enable_if_t<
 117:/usr/include/c++/8/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
 118:/usr/include/c++/8/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
 119:/usr/include/c++/8/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
 120:/usr/include/c++/8/bits/basic_string.h **** 	  _Res>;
 121:/usr/include/c++/8/bits/basic_string.h **** 
 122:/usr/include/c++/8/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
 123:/usr/include/c++/8/bits/basic_string.h ****       static __sv_type
 124:/usr/include/c++/8/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
 125:/usr/include/c++/8/bits/basic_string.h ****       { return __svt; }
 126:/usr/include/c++/8/bits/basic_string.h **** 
 127:/usr/include/c++/8/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
 128:/usr/include/c++/8/bits/basic_string.h ****       // allows to add an internal constructor that does not
 129:/usr/include/c++/8/bits/basic_string.h ****       // participate in overload resolution when a string_view
 130:/usr/include/c++/8/bits/basic_string.h ****       // is provided.
 131:/usr/include/c++/8/bits/basic_string.h ****       struct __sv_wrapper
 132:/usr/include/c++/8/bits/basic_string.h ****       {
 133:/usr/include/c++/8/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
 134:/usr/include/c++/8/bits/basic_string.h **** 	__sv_type _M_sv;
 135:/usr/include/c++/8/bits/basic_string.h ****       };
 136:/usr/include/c++/8/bits/basic_string.h **** #endif
 137:/usr/include/c++/8/bits/basic_string.h **** 
 138:/usr/include/c++/8/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 139:/usr/include/c++/8/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 140:/usr/include/c++/8/bits/basic_string.h ****       {
 141:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus < 201103L
 142:/usr/include/c++/8/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 143:/usr/include/c++/8/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 144:/usr/include/c++/8/bits/basic_string.h **** #else
 145:/usr/include/c++/8/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a)
 146:/usr/include/c++/8/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 147:/usr/include/c++/8/bits/basic_string.h **** 
 148:/usr/include/c++/8/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 149:/usr/include/c++/8/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 150:/usr/include/c++/8/bits/basic_string.h **** #endif
 151:/usr/include/c++/8/bits/basic_string.h **** 
 152:/usr/include/c++/8/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 153:/usr/include/c++/8/bits/basic_string.h ****       };
 154:/usr/include/c++/8/bits/basic_string.h **** 
 155:/usr/include/c++/8/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 156:/usr/include/c++/8/bits/basic_string.h ****       size_type		_M_string_length;
 157:/usr/include/c++/8/bits/basic_string.h **** 
 158:/usr/include/c++/8/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 159:/usr/include/c++/8/bits/basic_string.h **** 
 160:/usr/include/c++/8/bits/basic_string.h ****       union
 161:/usr/include/c++/8/bits/basic_string.h ****       {
 162:/usr/include/c++/8/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 163:/usr/include/c++/8/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 164:/usr/include/c++/8/bits/basic_string.h ****       };
 165:/usr/include/c++/8/bits/basic_string.h **** 
 166:/usr/include/c++/8/bits/basic_string.h ****       void
 167:/usr/include/c++/8/bits/basic_string.h ****       _M_data(pointer __p)
 168:/usr/include/c++/8/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 169:/usr/include/c++/8/bits/basic_string.h **** 
 170:/usr/include/c++/8/bits/basic_string.h ****       void
 171:/usr/include/c++/8/bits/basic_string.h ****       _M_length(size_type __length)
 172:/usr/include/c++/8/bits/basic_string.h ****       { _M_string_length = __length; }
 173:/usr/include/c++/8/bits/basic_string.h **** 
 174:/usr/include/c++/8/bits/basic_string.h ****       pointer
 175:/usr/include/c++/8/bits/basic_string.h ****       _M_data() const
 176:/usr/include/c++/8/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 177:/usr/include/c++/8/bits/basic_string.h **** 
 178:/usr/include/c++/8/bits/basic_string.h ****       pointer
 179:/usr/include/c++/8/bits/basic_string.h ****       _M_local_data()
 180:/usr/include/c++/8/bits/basic_string.h ****       {
 181:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
 182:/usr/include/c++/8/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 183:/usr/include/c++/8/bits/basic_string.h **** #else
 184:/usr/include/c++/8/bits/basic_string.h **** 	return pointer(_M_local_buf);
 185:/usr/include/c++/8/bits/basic_string.h **** #endif
 186:/usr/include/c++/8/bits/basic_string.h ****       }
 187:/usr/include/c++/8/bits/basic_string.h **** 
 188:/usr/include/c++/8/bits/basic_string.h ****       const_pointer
 189:/usr/include/c++/8/bits/basic_string.h ****       _M_local_data() const
 190:/usr/include/c++/8/bits/basic_string.h ****       {
 191:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
 192:/usr/include/c++/8/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 193:/usr/include/c++/8/bits/basic_string.h **** #else
 194:/usr/include/c++/8/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 195:/usr/include/c++/8/bits/basic_string.h **** #endif
 196:/usr/include/c++/8/bits/basic_string.h ****       }
 197:/usr/include/c++/8/bits/basic_string.h **** 
 198:/usr/include/c++/8/bits/basic_string.h ****       void
 199:/usr/include/c++/8/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 200:/usr/include/c++/8/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 201:/usr/include/c++/8/bits/basic_string.h **** 
 202:/usr/include/c++/8/bits/basic_string.h ****       void
 203:/usr/include/c++/8/bits/basic_string.h ****       _M_set_length(size_type __n)
 204:/usr/include/c++/8/bits/basic_string.h ****       {
 205:/usr/include/c++/8/bits/basic_string.h **** 	_M_length(__n);
 206:/usr/include/c++/8/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 207:/usr/include/c++/8/bits/basic_string.h ****       }
 208:/usr/include/c++/8/bits/basic_string.h **** 
 209:/usr/include/c++/8/bits/basic_string.h ****       bool
 210:/usr/include/c++/8/bits/basic_string.h ****       _M_is_local() const
 211:/usr/include/c++/8/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 212:/usr/include/c++/8/bits/basic_string.h **** 
 213:/usr/include/c++/8/bits/basic_string.h ****       // Create & Destroy
 214:/usr/include/c++/8/bits/basic_string.h ****       pointer
 215:/usr/include/c++/8/bits/basic_string.h ****       _M_create(size_type&, size_type);
 216:/usr/include/c++/8/bits/basic_string.h **** 
 217:/usr/include/c++/8/bits/basic_string.h ****       void
 218:/usr/include/c++/8/bits/basic_string.h ****       _M_dispose()
 219:/usr/include/c++/8/bits/basic_string.h ****       {
 220:/usr/include/c++/8/bits/basic_string.h **** 	if (!_M_is_local())
 221:/usr/include/c++/8/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 222:/usr/include/c++/8/bits/basic_string.h ****       }
 223:/usr/include/c++/8/bits/basic_string.h **** 
 224:/usr/include/c++/8/bits/basic_string.h ****       void
 225:/usr/include/c++/8/bits/basic_string.h ****       _M_destroy(size_type __size) throw()
 226:/usr/include/c++/8/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 227:/usr/include/c++/8/bits/basic_string.h **** 
 228:/usr/include/c++/8/bits/basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 229:/usr/include/c++/8/bits/basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 230:/usr/include/c++/8/bits/basic_string.h ****       template<typename _InIterator>
 231:/usr/include/c++/8/bits/basic_string.h ****         void
 232:/usr/include/c++/8/bits/basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 233:/usr/include/c++/8/bits/basic_string.h **** 			 std::__false_type)
 234:/usr/include/c++/8/bits/basic_string.h **** 	{
 235:/usr/include/c++/8/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 236:/usr/include/c++/8/bits/basic_string.h ****           _M_construct(__beg, __end, _Tag());
 237:/usr/include/c++/8/bits/basic_string.h **** 	}
 238:/usr/include/c++/8/bits/basic_string.h **** 
 239:/usr/include/c++/8/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 240:/usr/include/c++/8/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 241:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Integer>
 242:/usr/include/c++/8/bits/basic_string.h ****         void
 243:/usr/include/c++/8/bits/basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 244:/usr/include/c++/8/bits/basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 245:/usr/include/c++/8/bits/basic_string.h **** 
 246:/usr/include/c++/8/bits/basic_string.h ****       void
 247:/usr/include/c++/8/bits/basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
 248:/usr/include/c++/8/bits/basic_string.h ****       { _M_construct(__req, __c); }
 249:/usr/include/c++/8/bits/basic_string.h **** 
 250:/usr/include/c++/8/bits/basic_string.h ****       template<typename _InIterator>
 251:/usr/include/c++/8/bits/basic_string.h ****         void
 252:/usr/include/c++/8/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
 253:/usr/include/c++/8/bits/basic_string.h **** 	{
 254:/usr/include/c++/8/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 255:/usr/include/c++/8/bits/basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 256:/usr/include/c++/8/bits/basic_string.h ****         }
 257:/usr/include/c++/8/bits/basic_string.h **** 
 258:/usr/include/c++/8/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 259:/usr/include/c++/8/bits/basic_string.h ****       template<typename _InIterator>
 260:/usr/include/c++/8/bits/basic_string.h ****         void
 261:/usr/include/c++/8/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 262:/usr/include/c++/8/bits/basic_string.h **** 		     std::input_iterator_tag);
 263:/usr/include/c++/8/bits/basic_string.h **** 
 264:/usr/include/c++/8/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 265:/usr/include/c++/8/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
 266:/usr/include/c++/8/bits/basic_string.h ****       template<typename _FwdIterator>
 267:/usr/include/c++/8/bits/basic_string.h ****         void
 268:/usr/include/c++/8/bits/basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 269:/usr/include/c++/8/bits/basic_string.h **** 		     std::forward_iterator_tag);
 270:/usr/include/c++/8/bits/basic_string.h **** 
 271:/usr/include/c++/8/bits/basic_string.h ****       void
 272:/usr/include/c++/8/bits/basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 273:/usr/include/c++/8/bits/basic_string.h **** 
 274:/usr/include/c++/8/bits/basic_string.h ****       allocator_type&
 275:/usr/include/c++/8/bits/basic_string.h ****       _M_get_allocator()
 276:/usr/include/c++/8/bits/basic_string.h ****       { return _M_dataplus; }
 277:/usr/include/c++/8/bits/basic_string.h **** 
 278:/usr/include/c++/8/bits/basic_string.h ****       const allocator_type&
 279:/usr/include/c++/8/bits/basic_string.h ****       _M_get_allocator() const
 280:/usr/include/c++/8/bits/basic_string.h ****       { return _M_dataplus; }
 281:/usr/include/c++/8/bits/basic_string.h **** 
 282:/usr/include/c++/8/bits/basic_string.h ****     private:
 283:/usr/include/c++/8/bits/basic_string.h **** 
 284:/usr/include/c++/8/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 285:/usr/include/c++/8/bits/basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 286:/usr/include/c++/8/bits/basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 287:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp, bool _Requires =
 288:/usr/include/c++/8/bits/basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 289:/usr/include/c++/8/bits/basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 290:/usr/include/c++/8/bits/basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 291:/usr/include/c++/8/bits/basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 292:/usr/include/c++/8/bits/basic_string.h **** 	struct __enable_if_not_native_iterator
 293:/usr/include/c++/8/bits/basic_string.h **** 	{ typedef basic_string& __type; };
 294:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
 295:/usr/include/c++/8/bits/basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 296:/usr/include/c++/8/bits/basic_string.h **** #endif
 297:/usr/include/c++/8/bits/basic_string.h **** 
 298:/usr/include/c++/8/bits/basic_string.h ****       size_type
 299:/usr/include/c++/8/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 300:/usr/include/c++/8/bits/basic_string.h ****       {
 301:/usr/include/c++/8/bits/basic_string.h **** 	if (__pos > this->size())
 302:/usr/include/c++/8/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 303:/usr/include/c++/8/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
 304:/usr/include/c++/8/bits/basic_string.h **** 				   __s, __pos, this->size());
 305:/usr/include/c++/8/bits/basic_string.h **** 	return __pos;
 306:/usr/include/c++/8/bits/basic_string.h ****       }
 307:/usr/include/c++/8/bits/basic_string.h **** 
 308:/usr/include/c++/8/bits/basic_string.h ****       void
 309:/usr/include/c++/8/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 310:/usr/include/c++/8/bits/basic_string.h ****       {
 311:/usr/include/c++/8/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 312:/usr/include/c++/8/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 313:/usr/include/c++/8/bits/basic_string.h ****       }
 314:/usr/include/c++/8/bits/basic_string.h **** 
 315:/usr/include/c++/8/bits/basic_string.h **** 
 316:/usr/include/c++/8/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 317:/usr/include/c++/8/bits/basic_string.h ****       size_type
 318:/usr/include/c++/8/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 319:/usr/include/c++/8/bits/basic_string.h ****       {
 320:/usr/include/c++/8/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 321:/usr/include/c++/8/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 322:/usr/include/c++/8/bits/basic_string.h ****       }
 323:/usr/include/c++/8/bits/basic_string.h **** 
 324:/usr/include/c++/8/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 325:/usr/include/c++/8/bits/basic_string.h ****       bool
 326:/usr/include/c++/8/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 327:/usr/include/c++/8/bits/basic_string.h ****       {
 328:/usr/include/c++/8/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 329:/usr/include/c++/8/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 330:/usr/include/c++/8/bits/basic_string.h ****       }
 331:/usr/include/c++/8/bits/basic_string.h **** 
 332:/usr/include/c++/8/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 333:/usr/include/c++/8/bits/basic_string.h ****       // traits_type::copy/move/assign.
 334:/usr/include/c++/8/bits/basic_string.h ****       static void
 335:/usr/include/c++/8/bits/basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 336:/usr/include/c++/8/bits/basic_string.h ****       {
 337:/usr/include/c++/8/bits/basic_string.h **** 	if (__n == 1)
 338:/usr/include/c++/8/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 339:/usr/include/c++/8/bits/basic_string.h **** 	else
 340:/usr/include/c++/8/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 341:/usr/include/c++/8/bits/basic_string.h ****       }
 342:/usr/include/c++/8/bits/basic_string.h **** 
 343:/usr/include/c++/8/bits/basic_string.h ****       static void
 344:/usr/include/c++/8/bits/basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 345:/usr/include/c++/8/bits/basic_string.h ****       {
 346:/usr/include/c++/8/bits/basic_string.h **** 	if (__n == 1)
 347:/usr/include/c++/8/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 348:/usr/include/c++/8/bits/basic_string.h **** 	else
 349:/usr/include/c++/8/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);
 350:/usr/include/c++/8/bits/basic_string.h ****       }
 351:/usr/include/c++/8/bits/basic_string.h **** 
 352:/usr/include/c++/8/bits/basic_string.h ****       static void
 353:/usr/include/c++/8/bits/basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 354:/usr/include/c++/8/bits/basic_string.h ****       {
 355:/usr/include/c++/8/bits/basic_string.h **** 	if (__n == 1)
 356:/usr/include/c++/8/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
 357:/usr/include/c++/8/bits/basic_string.h **** 	else
 358:/usr/include/c++/8/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 359:/usr/include/c++/8/bits/basic_string.h ****       }
 360:/usr/include/c++/8/bits/basic_string.h **** 
 361:/usr/include/c++/8/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 362:/usr/include/c++/8/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 363:/usr/include/c++/8/bits/basic_string.h ****       template<class _Iterator>
 364:/usr/include/c++/8/bits/basic_string.h ****         static void
 365:/usr/include/c++/8/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 366:/usr/include/c++/8/bits/basic_string.h ****         {
 367:/usr/include/c++/8/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
 368:/usr/include/c++/8/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 369:/usr/include/c++/8/bits/basic_string.h **** 	}
 370:/usr/include/c++/8/bits/basic_string.h **** 
 371:/usr/include/c++/8/bits/basic_string.h ****       static void
 372:/usr/include/c++/8/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 373:/usr/include/c++/8/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 374:/usr/include/c++/8/bits/basic_string.h **** 
 375:/usr/include/c++/8/bits/basic_string.h ****       static void
 376:/usr/include/c++/8/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 377:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 378:/usr/include/c++/8/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 379:/usr/include/c++/8/bits/basic_string.h **** 
 380:/usr/include/c++/8/bits/basic_string.h ****       static void
 381:/usr/include/c++/8/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 382:/usr/include/c++/8/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 383:/usr/include/c++/8/bits/basic_string.h **** 
 384:/usr/include/c++/8/bits/basic_string.h ****       static void
 385:/usr/include/c++/8/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 386:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 387:/usr/include/c++/8/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 388:/usr/include/c++/8/bits/basic_string.h **** 
 389:/usr/include/c++/8/bits/basic_string.h ****       static int
 390:/usr/include/c++/8/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 391:/usr/include/c++/8/bits/basic_string.h ****       {
 392:/usr/include/c++/8/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 393:/usr/include/c++/8/bits/basic_string.h **** 
 394:/usr/include/c++/8/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 395:/usr/include/c++/8/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 396:/usr/include/c++/8/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 397:/usr/include/c++/8/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 398:/usr/include/c++/8/bits/basic_string.h **** 	else
 399:/usr/include/c++/8/bits/basic_string.h **** 	  return int(__d);
 400:/usr/include/c++/8/bits/basic_string.h ****       }
 401:/usr/include/c++/8/bits/basic_string.h **** 
 402:/usr/include/c++/8/bits/basic_string.h ****       void
 403:/usr/include/c++/8/bits/basic_string.h ****       _M_assign(const basic_string&);
 404:/usr/include/c++/8/bits/basic_string.h **** 
 405:/usr/include/c++/8/bits/basic_string.h ****       void
 406:/usr/include/c++/8/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 407:/usr/include/c++/8/bits/basic_string.h **** 		size_type __len2);
 408:/usr/include/c++/8/bits/basic_string.h **** 
 409:/usr/include/c++/8/bits/basic_string.h ****       void
 410:/usr/include/c++/8/bits/basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 411:/usr/include/c++/8/bits/basic_string.h **** 
 412:/usr/include/c++/8/bits/basic_string.h ****     public:
 413:/usr/include/c++/8/bits/basic_string.h ****       // Construct/copy/destroy:
 414:/usr/include/c++/8/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 415:/usr/include/c++/8/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 416:/usr/include/c++/8/bits/basic_string.h **** 
 417:/usr/include/c++/8/bits/basic_string.h ****       /**
 418:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
 419:/usr/include/c++/8/bits/basic_string.h ****        */
 420:/usr/include/c++/8/bits/basic_string.h ****       basic_string()
 421:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 422:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 423:/usr/include/c++/8/bits/basic_string.h ****       { _M_set_length(0); }
 424:/usr/include/c++/8/bits/basic_string.h **** 
 425:/usr/include/c++/8/bits/basic_string.h ****       /**
 426:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 427:/usr/include/c++/8/bits/basic_string.h ****        */
 428:/usr/include/c++/8/bits/basic_string.h ****       explicit
 429:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
 430:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 431:/usr/include/c++/8/bits/basic_string.h ****       { _M_set_length(0); }
 432:/usr/include/c++/8/bits/basic_string.h **** 
 433:/usr/include/c++/8/bits/basic_string.h ****       /**
 434:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 435:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
 436:/usr/include/c++/8/bits/basic_string.h ****        */
 437:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const basic_string& __str)
 438:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 439:/usr/include/c++/8/bits/basic_string.h **** 		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 440:/usr/include/c++/8/bits/basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 441:/usr/include/c++/8/bits/basic_string.h **** 
 442:/usr/include/c++/8/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 443:/usr/include/c++/8/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
 444:/usr/include/c++/8/bits/basic_string.h ****       /**
 445:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 446:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
 447:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 448:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 449:/usr/include/c++/8/bits/basic_string.h ****        */
 450:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 451:/usr/include/c++/8/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 452:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 453:/usr/include/c++/8/bits/basic_string.h ****       {
 454:/usr/include/c++/8/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 455:/usr/include/c++/8/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 456:/usr/include/c++/8/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, npos));
 457:/usr/include/c++/8/bits/basic_string.h ****       }
 458:/usr/include/c++/8/bits/basic_string.h **** 
 459:/usr/include/c++/8/bits/basic_string.h ****       /**
 460:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 461:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
 462:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 463:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 464:/usr/include/c++/8/bits/basic_string.h ****        */
 465:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 466:/usr/include/c++/8/bits/basic_string.h **** 		   size_type __n)
 467:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 468:/usr/include/c++/8/bits/basic_string.h ****       {
 469:/usr/include/c++/8/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 470:/usr/include/c++/8/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 471:/usr/include/c++/8/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 472:/usr/include/c++/8/bits/basic_string.h ****       }
 473:/usr/include/c++/8/bits/basic_string.h **** 
 474:/usr/include/c++/8/bits/basic_string.h ****       /**
 475:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 476:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
 477:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 478:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 479:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 480:/usr/include/c++/8/bits/basic_string.h ****        */
 481:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 482:/usr/include/c++/8/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a)
 483:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 484:/usr/include/c++/8/bits/basic_string.h ****       {
 485:/usr/include/c++/8/bits/basic_string.h **** 	const _CharT* __start
 486:/usr/include/c++/8/bits/basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 487:/usr/include/c++/8/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 488:/usr/include/c++/8/bits/basic_string.h ****       }
 489:/usr/include/c++/8/bits/basic_string.h **** 
 490:/usr/include/c++/8/bits/basic_string.h ****       /**
 491:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 492:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __s  Source character %array.
 493:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 494:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 495:/usr/include/c++/8/bits/basic_string.h ****        *
 496:/usr/include/c++/8/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 497:/usr/include/c++/8/bits/basic_string.h ****        *  has no special meaning.
 498:/usr/include/c++/8/bits/basic_string.h ****        */
 499:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 500:/usr/include/c++/8/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 501:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 502:/usr/include/c++/8/bits/basic_string.h ****       { _M_construct(__s, __s + __n); }
 503:/usr/include/c++/8/bits/basic_string.h **** 
 504:/usr/include/c++/8/bits/basic_string.h ****       /**
 505:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 506:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __s  Source C string.
 507:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 508:/usr/include/c++/8/bits/basic_string.h ****        */
 509:/usr/include/c++/8/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 510:/usr/include/c++/8/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 511:/usr/include/c++/8/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 512:/usr/include/c++/8/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 513:/usr/include/c++/8/bits/basic_string.h **** #endif
 514:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 515:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 516:/usr/include/c++/8/bits/basic_string.h ****       { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 517:/usr/include/c++/8/bits/basic_string.h **** 
 518:/usr/include/c++/8/bits/basic_string.h ****       /**
 519:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
 520:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n  Number of characters.
 521:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __c  Character to use.
 522:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 523:/usr/include/c++/8/bits/basic_string.h ****        */
 524:/usr/include/c++/8/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 525:/usr/include/c++/8/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 526:/usr/include/c++/8/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 527:/usr/include/c++/8/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 528:/usr/include/c++/8/bits/basic_string.h **** #endif
 529:/usr/include/c++/8/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 530:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 531:/usr/include/c++/8/bits/basic_string.h ****       { _M_construct(__n, __c); }
 532:/usr/include/c++/8/bits/basic_string.h **** 
 533:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
 534:/usr/include/c++/8/bits/basic_string.h ****       /**
 535:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Move construct string.
 536:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
 537:/usr/include/c++/8/bits/basic_string.h ****        *
 538:/usr/include/c++/8/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 539:/usr/include/c++/8/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
 540:/usr/include/c++/8/bits/basic_string.h ****        **/
 541:/usr/include/c++/8/bits/basic_string.h ****       basic_string(basic_string&& __str) noexcept
 542:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 543:/usr/include/c++/8/bits/basic_string.h ****       {
 544:/usr/include/c++/8/bits/basic_string.h **** 	if (__str._M_is_local())
 545:/usr/include/c++/8/bits/basic_string.h **** 	  {
 546:/usr/include/c++/8/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 547:/usr/include/c++/8/bits/basic_string.h **** 			      _S_local_capacity + 1);
 548:/usr/include/c++/8/bits/basic_string.h **** 	  }
 549:/usr/include/c++/8/bits/basic_string.h **** 	else
 550:/usr/include/c++/8/bits/basic_string.h **** 	  {
 551:/usr/include/c++/8/bits/basic_string.h **** 	    _M_data(__str._M_data());
 552:/usr/include/c++/8/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 553:/usr/include/c++/8/bits/basic_string.h **** 	  }
 554:/usr/include/c++/8/bits/basic_string.h **** 
 555:/usr/include/c++/8/bits/basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 556:/usr/include/c++/8/bits/basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 557:/usr/include/c++/8/bits/basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
 558:/usr/include/c++/8/bits/basic_string.h **** 	_M_length(__str.length());
 559:/usr/include/c++/8/bits/basic_string.h **** 	__str._M_data(__str._M_local_data());
 560:/usr/include/c++/8/bits/basic_string.h **** 	__str._M_set_length(0);
 561:/usr/include/c++/8/bits/basic_string.h ****       }
 562:/usr/include/c++/8/bits/basic_string.h **** 
 563:/usr/include/c++/8/bits/basic_string.h ****       /**
 564:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
 565:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 566:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 567:/usr/include/c++/8/bits/basic_string.h ****        */
 568:/usr/include/c++/8/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 569:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 570:/usr/include/c++/8/bits/basic_string.h ****       { _M_construct(__l.begin(), __l.end()); }
 571:/usr/include/c++/8/bits/basic_string.h **** 
 572:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 573:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 574:/usr/include/c++/8/bits/basic_string.h ****       { _M_construct(__str.begin(), __str.end()); }
 575:/usr/include/c++/8/bits/basic_string.h **** 
 576:/usr/include/c++/8/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 577:/usr/include/c++/8/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_always_equal())
 578:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 579:/usr/include/c++/8/bits/basic_string.h ****       {
 580:/usr/include/c++/8/bits/basic_string.h **** 	if (__str._M_is_local())
 581:/usr/include/c++/8/bits/basic_string.h **** 	  {
 582:/usr/include/c++/8/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 583:/usr/include/c++/8/bits/basic_string.h **** 			      _S_local_capacity + 1);
 584:/usr/include/c++/8/bits/basic_string.h **** 	    _M_length(__str.length());
 585:/usr/include/c++/8/bits/basic_string.h **** 	    __str._M_set_length(0);
 586:/usr/include/c++/8/bits/basic_string.h **** 	  }
 587:/usr/include/c++/8/bits/basic_string.h **** 	else if (_Alloc_traits::_S_always_equal()
 588:/usr/include/c++/8/bits/basic_string.h **** 	    || __str.get_allocator() == __a)
 589:/usr/include/c++/8/bits/basic_string.h **** 	  {
 590:/usr/include/c++/8/bits/basic_string.h **** 	    _M_data(__str._M_data());
 591:/usr/include/c++/8/bits/basic_string.h **** 	    _M_length(__str.length());
 592:/usr/include/c++/8/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 593:/usr/include/c++/8/bits/basic_string.h **** 	    __str._M_data(__str._M_local_buf);
 594:/usr/include/c++/8/bits/basic_string.h **** 	    __str._M_set_length(0);
 595:/usr/include/c++/8/bits/basic_string.h **** 	  }
 596:/usr/include/c++/8/bits/basic_string.h **** 	else
 597:/usr/include/c++/8/bits/basic_string.h **** 	  _M_construct(__str.begin(), __str.end());
 598:/usr/include/c++/8/bits/basic_string.h ****       }
 599:/usr/include/c++/8/bits/basic_string.h **** 
 600:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
 601:/usr/include/c++/8/bits/basic_string.h **** 
 602:/usr/include/c++/8/bits/basic_string.h ****       /**
 603:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
 604:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __beg  Start of range.
 605:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __end  End of range.
 606:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 607:/usr/include/c++/8/bits/basic_string.h ****        */
 608:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
 609:/usr/include/c++/8/bits/basic_string.h ****       template<typename _InputIterator,
 610:/usr/include/c++/8/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 611:/usr/include/c++/8/bits/basic_string.h **** #else
 612:/usr/include/c++/8/bits/basic_string.h ****       template<typename _InputIterator>
 613:/usr/include/c++/8/bits/basic_string.h **** #endif
 614:/usr/include/c++/8/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 615:/usr/include/c++/8/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 616:/usr/include/c++/8/bits/basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 617:/usr/include/c++/8/bits/basic_string.h **** 	{ _M_construct(__beg, __end); }
 618:/usr/include/c++/8/bits/basic_string.h **** 
 619:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
 620:/usr/include/c++/8/bits/basic_string.h ****       /**
 621:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
 622:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
 623:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
 624:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
 625:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a   Allocator to use.
 626:/usr/include/c++/8/bits/basic_string.h ****        */
 627:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 628:/usr/include/c++/8/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
 629:/usr/include/c++/8/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 630:/usr/include/c++/8/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
 631:/usr/include/c++/8/bits/basic_string.h **** 
 632:/usr/include/c++/8/bits/basic_string.h ****       /**
 633:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
 634:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
 635:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 636:/usr/include/c++/8/bits/basic_string.h ****        */
 637:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 638:/usr/include/c++/8/bits/basic_string.h **** 	explicit
 639:/usr/include/c++/8/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 640:/usr/include/c++/8/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
 641:/usr/include/c++/8/bits/basic_string.h **** 
 642:/usr/include/c++/8/bits/basic_string.h ****       /**
 643:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
 644:/usr/include/c++/8/bits/basic_string.h ****        *          wrapper.
 645:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
 646:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 647:/usr/include/c++/8/bits/basic_string.h ****        */
 648:/usr/include/c++/8/bits/basic_string.h ****       explicit
 649:/usr/include/c++/8/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
 650:/usr/include/c++/8/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
 651:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
 652:/usr/include/c++/8/bits/basic_string.h **** 
 653:/usr/include/c++/8/bits/basic_string.h ****       /**
 654:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Destroy the string instance.
 655:/usr/include/c++/8/bits/basic_string.h ****        */
 656:/usr/include/c++/8/bits/basic_string.h ****       ~basic_string()
 657:/usr/include/c++/8/bits/basic_string.h ****       { _M_dispose(); }
 658:/usr/include/c++/8/bits/basic_string.h **** 
 659:/usr/include/c++/8/bits/basic_string.h ****       /**
 660:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 661:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
 662:/usr/include/c++/8/bits/basic_string.h ****        */
 663:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
 664:/usr/include/c++/8/bits/basic_string.h ****       operator=(const basic_string& __str)
 665:/usr/include/c++/8/bits/basic_string.h ****       {
 666:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
 667:/usr/include/c++/8/bits/basic_string.h **** 	if (_Alloc_traits::_S_propagate_on_copy_assign())
 668:/usr/include/c++/8/bits/basic_string.h **** 	  {
 669:/usr/include/c++/8/bits/basic_string.h **** 	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
 670:/usr/include/c++/8/bits/basic_string.h **** 		&& _M_get_allocator() != __str._M_get_allocator())
 671:/usr/include/c++/8/bits/basic_string.h **** 	      {
 672:/usr/include/c++/8/bits/basic_string.h **** 		// Propagating allocator cannot free existing storage so must
 673:/usr/include/c++/8/bits/basic_string.h **** 		// deallocate it before replacing current allocator.
 674:/usr/include/c++/8/bits/basic_string.h **** 		if (__str.size() <= _S_local_capacity)
 675:/usr/include/c++/8/bits/basic_string.h **** 		  {
 676:/usr/include/c++/8/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
 677:/usr/include/c++/8/bits/basic_string.h **** 		    _M_data(_M_local_data());
 678:/usr/include/c++/8/bits/basic_string.h **** 		    _M_set_length(0);
 679:/usr/include/c++/8/bits/basic_string.h **** 		  }
 680:/usr/include/c++/8/bits/basic_string.h **** 		else
 681:/usr/include/c++/8/bits/basic_string.h **** 		  {
 682:/usr/include/c++/8/bits/basic_string.h **** 		    const auto __len = __str.size();
 683:/usr/include/c++/8/bits/basic_string.h **** 		    auto __alloc = __str._M_get_allocator();
 684:/usr/include/c++/8/bits/basic_string.h **** 		    // If this allocation throws there are no effects:
 685:/usr/include/c++/8/bits/basic_string.h **** 		    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
 686:/usr/include/c++/8/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
 687:/usr/include/c++/8/bits/basic_string.h **** 		    _M_data(__ptr);
 688:/usr/include/c++/8/bits/basic_string.h **** 		    _M_capacity(__len);
 689:/usr/include/c++/8/bits/basic_string.h **** 		    _M_set_length(__len);
 690:/usr/include/c++/8/bits/basic_string.h **** 		  }
 691:/usr/include/c++/8/bits/basic_string.h **** 	      }
 692:/usr/include/c++/8/bits/basic_string.h **** 	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
 693:/usr/include/c++/8/bits/basic_string.h **** 	  }
 694:/usr/include/c++/8/bits/basic_string.h **** #endif
 695:/usr/include/c++/8/bits/basic_string.h **** 	return this->assign(__str);
 696:/usr/include/c++/8/bits/basic_string.h ****       }
 697:/usr/include/c++/8/bits/basic_string.h **** 
 698:/usr/include/c++/8/bits/basic_string.h ****       /**
 699:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 700:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
 701:/usr/include/c++/8/bits/basic_string.h ****        */
 702:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
 703:/usr/include/c++/8/bits/basic_string.h ****       operator=(const _CharT* __s)
 704:/usr/include/c++/8/bits/basic_string.h ****       { return this->assign(__s); }
 705:/usr/include/c++/8/bits/basic_string.h **** 
 706:/usr/include/c++/8/bits/basic_string.h ****       /**
 707:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
 708:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __c  Source character.
 709:/usr/include/c++/8/bits/basic_string.h ****        *
 710:/usr/include/c++/8/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
 711:/usr/include/c++/8/bits/basic_string.h ****        *  (*this)[0] == @a c.
 712:/usr/include/c++/8/bits/basic_string.h ****        */
 713:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
 714:/usr/include/c++/8/bits/basic_string.h ****       operator=(_CharT __c)
 715:/usr/include/c++/8/bits/basic_string.h ****       {
 716:/usr/include/c++/8/bits/basic_string.h **** 	this->assign(1, __c);
 717:/usr/include/c++/8/bits/basic_string.h **** 	return *this;
 718:/usr/include/c++/8/bits/basic_string.h ****       }
 719:/usr/include/c++/8/bits/basic_string.h **** 
 720:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
 721:/usr/include/c++/8/bits/basic_string.h ****       /**
 722:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 723:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
 724:/usr/include/c++/8/bits/basic_string.h ****        *
 725:/usr/include/c++/8/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 726:/usr/include/c++/8/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 727:/usr/include/c++/8/bits/basic_string.h ****        **/
 728:/usr/include/c++/8/bits/basic_string.h ****       // PR 58265, this should be noexcept.
 729:/usr/include/c++/8/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 730:/usr/include/c++/8/bits/basic_string.h ****       // 2063. Contradictory requirements for string move assignment
 731:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
 732:/usr/include/c++/8/bits/basic_string.h ****       operator=(basic_string&& __str)
 733:/usr/include/c++/8/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 734:/usr/include/c++/8/bits/basic_string.h ****       {
 735:/usr/include/c++/8/bits/basic_string.h **** 	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 736:/usr/include/c++/8/bits/basic_string.h **** 	    && !_Alloc_traits::_S_always_equal()
 737:/usr/include/c++/8/bits/basic_string.h **** 	    && _M_get_allocator() != __str._M_get_allocator())
 738:/usr/include/c++/8/bits/basic_string.h **** 	  {
 739:/usr/include/c++/8/bits/basic_string.h **** 	    // Destroy existing storage before replacing allocator.
 740:/usr/include/c++/8/bits/basic_string.h **** 	    _M_destroy(_M_allocated_capacity);
 741:/usr/include/c++/8/bits/basic_string.h **** 	    _M_data(_M_local_data());
 742:/usr/include/c++/8/bits/basic_string.h **** 	    _M_set_length(0);
 743:/usr/include/c++/8/bits/basic_string.h **** 	  }
 744:/usr/include/c++/8/bits/basic_string.h **** 	// Replace allocator if POCMA is true.
 745:/usr/include/c++/8/bits/basic_string.h **** 	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
 746:/usr/include/c++/8/bits/basic_string.h **** 
 747:/usr/include/c++/8/bits/basic_string.h **** 	if (__str._M_is_local())
 748:/usr/include/c++/8/bits/basic_string.h **** 	  {
 749:/usr/include/c++/8/bits/basic_string.h **** 	    // We've always got room for a short string, just copy it.
 750:/usr/include/c++/8/bits/basic_string.h **** 	    if (__str.size())
 751:/usr/include/c++/8/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 752:/usr/include/c++/8/bits/basic_string.h **** 	    _M_set_length(__str.size());
 753:/usr/include/c++/8/bits/basic_string.h **** 	  }
 754:/usr/include/c++/8/bits/basic_string.h **** 	else if (_Alloc_traits::_S_propagate_on_move_assign()
 755:/usr/include/c++/8/bits/basic_string.h **** 	    || _Alloc_traits::_S_always_equal()
 756:/usr/include/c++/8/bits/basic_string.h **** 	    || _M_get_allocator() == __str._M_get_allocator())
 757:/usr/include/c++/8/bits/basic_string.h **** 	  {
 758:/usr/include/c++/8/bits/basic_string.h **** 	    // Just move the allocated pointer, our allocator can free it.
 759:/usr/include/c++/8/bits/basic_string.h **** 	    pointer __data = nullptr;
 760:/usr/include/c++/8/bits/basic_string.h **** 	    size_type __capacity;
 761:/usr/include/c++/8/bits/basic_string.h **** 	    if (!_M_is_local())
 762:/usr/include/c++/8/bits/basic_string.h **** 	      {
 763:/usr/include/c++/8/bits/basic_string.h **** 		if (_Alloc_traits::_S_always_equal())
 764:/usr/include/c++/8/bits/basic_string.h **** 		  {
 765:/usr/include/c++/8/bits/basic_string.h **** 		    // __str can reuse our existing storage.
 766:/usr/include/c++/8/bits/basic_string.h **** 		    __data = _M_data();
 767:/usr/include/c++/8/bits/basic_string.h **** 		    __capacity = _M_allocated_capacity;
 768:/usr/include/c++/8/bits/basic_string.h **** 		  }
 769:/usr/include/c++/8/bits/basic_string.h **** 		else // __str can't use it, so free it.
 770:/usr/include/c++/8/bits/basic_string.h **** 		  _M_destroy(_M_allocated_capacity);
 771:/usr/include/c++/8/bits/basic_string.h **** 	      }
 772:/usr/include/c++/8/bits/basic_string.h **** 
 773:/usr/include/c++/8/bits/basic_string.h **** 	    _M_data(__str._M_data());
 774:/usr/include/c++/8/bits/basic_string.h **** 	    _M_length(__str.length());
 775:/usr/include/c++/8/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 776:/usr/include/c++/8/bits/basic_string.h **** 	    if (__data)
 777:/usr/include/c++/8/bits/basic_string.h **** 	      {
 778:/usr/include/c++/8/bits/basic_string.h **** 		__str._M_data(__data);
 779:/usr/include/c++/8/bits/basic_string.h **** 		__str._M_capacity(__capacity);
 780:/usr/include/c++/8/bits/basic_string.h **** 	      }
 781:/usr/include/c++/8/bits/basic_string.h **** 	    else
 782:/usr/include/c++/8/bits/basic_string.h **** 	      __str._M_data(__str._M_local_buf);
 783:/usr/include/c++/8/bits/basic_string.h **** 	  }
 784:/usr/include/c++/8/bits/basic_string.h **** 	else // Need to do a deep copy
 785:/usr/include/c++/8/bits/basic_string.h **** 	  assign(__str);
 786:/usr/include/c++/8/bits/basic_string.h **** 	__str.clear();
 787:/usr/include/c++/8/bits/basic_string.h **** 	return *this;
 788:/usr/include/c++/8/bits/basic_string.h ****       }
 789:/usr/include/c++/8/bits/basic_string.h **** 
 790:/usr/include/c++/8/bits/basic_string.h ****       /**
 791:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 792:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
 793:/usr/include/c++/8/bits/basic_string.h ****        */
 794:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
 795:/usr/include/c++/8/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
 796:/usr/include/c++/8/bits/basic_string.h ****       {
 797:/usr/include/c++/8/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
 798:/usr/include/c++/8/bits/basic_string.h **** 	return *this;
 799:/usr/include/c++/8/bits/basic_string.h ****       }
 800:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
 801:/usr/include/c++/8/bits/basic_string.h **** 
 802:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
 803:/usr/include/c++/8/bits/basic_string.h ****       /**
 804:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
 805:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __svt  An object convertible to string_view.
 806:/usr/include/c++/8/bits/basic_string.h ****        */
 807:/usr/include/c++/8/bits/basic_string.h ****      template<typename _Tp>
 808:/usr/include/c++/8/bits/basic_string.h ****        _If_sv<_Tp, basic_string&>
 809:/usr/include/c++/8/bits/basic_string.h ****        operator=(const _Tp& __svt)
 810:/usr/include/c++/8/bits/basic_string.h ****        { return this->assign(__svt); }
 811:/usr/include/c++/8/bits/basic_string.h **** 
 812:/usr/include/c++/8/bits/basic_string.h ****       /**
 813:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Convert to a string_view.
 814:/usr/include/c++/8/bits/basic_string.h ****        *  @return A string_view.
 815:/usr/include/c++/8/bits/basic_string.h ****        */
 816:/usr/include/c++/8/bits/basic_string.h ****       operator __sv_type() const noexcept
 817:/usr/include/c++/8/bits/basic_string.h ****       { return __sv_type(data(), size()); }
 818:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
 819:/usr/include/c++/8/bits/basic_string.h **** 
 820:/usr/include/c++/8/bits/basic_string.h ****       // Iterators:
 821:/usr/include/c++/8/bits/basic_string.h ****       /**
 822:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
 823:/usr/include/c++/8/bits/basic_string.h ****        *  the %string.
 824:/usr/include/c++/8/bits/basic_string.h ****        */
 825:/usr/include/c++/8/bits/basic_string.h ****       iterator
 826:/usr/include/c++/8/bits/basic_string.h ****       begin() _GLIBCXX_NOEXCEPT
 827:/usr/include/c++/8/bits/basic_string.h ****       { return iterator(_M_data()); }
 828:/usr/include/c++/8/bits/basic_string.h **** 
 829:/usr/include/c++/8/bits/basic_string.h ****       /**
 830:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 831:/usr/include/c++/8/bits/basic_string.h ****        *  character in the %string.
 832:/usr/include/c++/8/bits/basic_string.h ****        */
 833:/usr/include/c++/8/bits/basic_string.h ****       const_iterator
 834:/usr/include/c++/8/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
 835:/usr/include/c++/8/bits/basic_string.h ****       { return const_iterator(_M_data()); }
 836:/usr/include/c++/8/bits/basic_string.h **** 
 837:/usr/include/c++/8/bits/basic_string.h ****       /**
 838:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
 839:/usr/include/c++/8/bits/basic_string.h ****        *  character in the %string.
 840:/usr/include/c++/8/bits/basic_string.h ****        */
 841:/usr/include/c++/8/bits/basic_string.h ****       iterator
 842:/usr/include/c++/8/bits/basic_string.h ****       end() _GLIBCXX_NOEXCEPT
 843:/usr/include/c++/8/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 844:/usr/include/c++/8/bits/basic_string.h **** 
 845:/usr/include/c++/8/bits/basic_string.h ****       /**
 846:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 847:/usr/include/c++/8/bits/basic_string.h ****        *  last character in the %string.
 848:/usr/include/c++/8/bits/basic_string.h ****        */
 849:/usr/include/c++/8/bits/basic_string.h ****       const_iterator
 850:/usr/include/c++/8/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
 851:/usr/include/c++/8/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 852:/usr/include/c++/8/bits/basic_string.h **** 
 853:/usr/include/c++/8/bits/basic_string.h ****       /**
 854:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 855:/usr/include/c++/8/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
 856:/usr/include/c++/8/bits/basic_string.h ****        *  order.
 857:/usr/include/c++/8/bits/basic_string.h ****        */
 858:/usr/include/c++/8/bits/basic_string.h ****       reverse_iterator
 859:/usr/include/c++/8/bits/basic_string.h ****       rbegin() _GLIBCXX_NOEXCEPT
 860:/usr/include/c++/8/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
 861:/usr/include/c++/8/bits/basic_string.h **** 
 862:/usr/include/c++/8/bits/basic_string.h ****       /**
 863:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 864:/usr/include/c++/8/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 865:/usr/include/c++/8/bits/basic_string.h ****        *  reverse element order.
 866:/usr/include/c++/8/bits/basic_string.h ****        */
 867:/usr/include/c++/8/bits/basic_string.h ****       const_reverse_iterator
 868:/usr/include/c++/8/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 869:/usr/include/c++/8/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 870:/usr/include/c++/8/bits/basic_string.h **** 
 871:/usr/include/c++/8/bits/basic_string.h ****       /**
 872:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
 873:/usr/include/c++/8/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 874:/usr/include/c++/8/bits/basic_string.h ****        *  element order.
 875:/usr/include/c++/8/bits/basic_string.h ****        */
 876:/usr/include/c++/8/bits/basic_string.h ****       reverse_iterator
 877:/usr/include/c++/8/bits/basic_string.h ****       rend() _GLIBCXX_NOEXCEPT
 878:/usr/include/c++/8/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
 879:/usr/include/c++/8/bits/basic_string.h **** 
 880:/usr/include/c++/8/bits/basic_string.h ****       /**
 881:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 882:/usr/include/c++/8/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 883:/usr/include/c++/8/bits/basic_string.h ****        *  is done in reverse element order.
 884:/usr/include/c++/8/bits/basic_string.h ****        */
 885:/usr/include/c++/8/bits/basic_string.h ****       const_reverse_iterator
 886:/usr/include/c++/8/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
 887:/usr/include/c++/8/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 888:/usr/include/c++/8/bits/basic_string.h **** 
 889:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
 890:/usr/include/c++/8/bits/basic_string.h ****       /**
 891:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 892:/usr/include/c++/8/bits/basic_string.h ****        *  character in the %string.
 893:/usr/include/c++/8/bits/basic_string.h ****        */
 894:/usr/include/c++/8/bits/basic_string.h ****       const_iterator
 895:/usr/include/c++/8/bits/basic_string.h ****       cbegin() const noexcept
 896:/usr/include/c++/8/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
 897:/usr/include/c++/8/bits/basic_string.h **** 
 898:/usr/include/c++/8/bits/basic_string.h ****       /**
 899:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 900:/usr/include/c++/8/bits/basic_string.h ****        *  last character in the %string.
 901:/usr/include/c++/8/bits/basic_string.h ****        */
 902:/usr/include/c++/8/bits/basic_string.h ****       const_iterator
 903:/usr/include/c++/8/bits/basic_string.h ****       cend() const noexcept
 904:/usr/include/c++/8/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 905:/usr/include/c++/8/bits/basic_string.h **** 
 906:/usr/include/c++/8/bits/basic_string.h ****       /**
 907:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 908:/usr/include/c++/8/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 909:/usr/include/c++/8/bits/basic_string.h ****        *  reverse element order.
 910:/usr/include/c++/8/bits/basic_string.h ****        */
 911:/usr/include/c++/8/bits/basic_string.h ****       const_reverse_iterator
 912:/usr/include/c++/8/bits/basic_string.h ****       crbegin() const noexcept
 913:/usr/include/c++/8/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 914:/usr/include/c++/8/bits/basic_string.h **** 
 915:/usr/include/c++/8/bits/basic_string.h ****       /**
 916:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 917:/usr/include/c++/8/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 918:/usr/include/c++/8/bits/basic_string.h ****        *  is done in reverse element order.
 919:/usr/include/c++/8/bits/basic_string.h ****        */
 920:/usr/include/c++/8/bits/basic_string.h ****       const_reverse_iterator
 921:/usr/include/c++/8/bits/basic_string.h ****       crend() const noexcept
 922:/usr/include/c++/8/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 923:/usr/include/c++/8/bits/basic_string.h **** #endif
 924:/usr/include/c++/8/bits/basic_string.h **** 
 925:/usr/include/c++/8/bits/basic_string.h ****     public:
 926:/usr/include/c++/8/bits/basic_string.h ****       // Capacity:
 927:/usr/include/c++/8/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 928:/usr/include/c++/8/bits/basic_string.h ****       ///  null-termination.
 929:/usr/include/c++/8/bits/basic_string.h ****       size_type
 930:/usr/include/c++/8/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
 931:/usr/include/c++/8/bits/basic_string.h ****       { return _M_string_length; }
 932:/usr/include/c++/8/bits/basic_string.h **** 
 933:/usr/include/c++/8/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 934:/usr/include/c++/8/bits/basic_string.h ****       ///  null-termination.
 935:/usr/include/c++/8/bits/basic_string.h ****       size_type
 936:/usr/include/c++/8/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
 937:/usr/include/c++/8/bits/basic_string.h ****       { return _M_string_length; }
 938:/usr/include/c++/8/bits/basic_string.h **** 
 939:/usr/include/c++/8/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
 940:/usr/include/c++/8/bits/basic_string.h ****       size_type
 941:/usr/include/c++/8/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
 942:/usr/include/c++/8/bits/basic_string.h ****       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 943:/usr/include/c++/8/bits/basic_string.h **** 
 944:/usr/include/c++/8/bits/basic_string.h ****       /**
 945:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 946:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 947:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
 948:/usr/include/c++/8/bits/basic_string.h ****        *
 949:/usr/include/c++/8/bits/basic_string.h ****        *  This function will %resize the %string to the specified
 950:/usr/include/c++/8/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
 951:/usr/include/c++/8/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 952:/usr/include/c++/8/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
 953:/usr/include/c++/8/bits/basic_string.h ****        */
 954:/usr/include/c++/8/bits/basic_string.h ****       void
 955:/usr/include/c++/8/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
 956:/usr/include/c++/8/bits/basic_string.h **** 
 957:/usr/include/c++/8/bits/basic_string.h ****       /**
 958:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 959:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 960:/usr/include/c++/8/bits/basic_string.h ****        *
 961:/usr/include/c++/8/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
 962:/usr/include/c++/8/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 963:/usr/include/c++/8/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 964:/usr/include/c++/8/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 965:/usr/include/c++/8/bits/basic_string.h ****        *  setting them to 0.
 966:/usr/include/c++/8/bits/basic_string.h ****        */
 967:/usr/include/c++/8/bits/basic_string.h ****       void
 968:/usr/include/c++/8/bits/basic_string.h ****       resize(size_type __n)
 969:/usr/include/c++/8/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
 970:/usr/include/c++/8/bits/basic_string.h **** 
 971:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
 972:/usr/include/c++/8/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 973:/usr/include/c++/8/bits/basic_string.h ****       void
 974:/usr/include/c++/8/bits/basic_string.h ****       shrink_to_fit() noexcept
 975:/usr/include/c++/8/bits/basic_string.h ****       {
 976:/usr/include/c++/8/bits/basic_string.h **** #if __cpp_exceptions
 977:/usr/include/c++/8/bits/basic_string.h **** 	if (capacity() > size())
 978:/usr/include/c++/8/bits/basic_string.h **** 	  {
 979:/usr/include/c++/8/bits/basic_string.h **** 	    try
 980:/usr/include/c++/8/bits/basic_string.h **** 	      { reserve(0); }
 981:/usr/include/c++/8/bits/basic_string.h **** 	    catch(...)
 982:/usr/include/c++/8/bits/basic_string.h **** 	      { }
 983:/usr/include/c++/8/bits/basic_string.h **** 	  }
 984:/usr/include/c++/8/bits/basic_string.h **** #endif
 985:/usr/include/c++/8/bits/basic_string.h ****       }
 986:/usr/include/c++/8/bits/basic_string.h **** #endif
 987:/usr/include/c++/8/bits/basic_string.h **** 
 988:/usr/include/c++/8/bits/basic_string.h ****       /**
 989:/usr/include/c++/8/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
 990:/usr/include/c++/8/bits/basic_string.h ****        *  before needing to allocate more memory.
 991:/usr/include/c++/8/bits/basic_string.h ****        */
 992:/usr/include/c++/8/bits/basic_string.h ****       size_type
 993:/usr/include/c++/8/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
 994:/usr/include/c++/8/bits/basic_string.h ****       {
 995:/usr/include/c++/8/bits/basic_string.h **** 	return _M_is_local() ? size_type(_S_local_capacity)
 996:/usr/include/c++/8/bits/basic_string.h **** 	                     : _M_allocated_capacity;
 997:/usr/include/c++/8/bits/basic_string.h ****       }
 998:/usr/include/c++/8/bits/basic_string.h **** 
 999:/usr/include/c++/8/bits/basic_string.h ****       /**
1000:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1001:/usr/include/c++/8/bits/basic_string.h ****        *          characters.
1002:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
1003:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
1004:/usr/include/c++/8/bits/basic_string.h ****        *
1005:/usr/include/c++/8/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
1006:/usr/include/c++/8/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
1007:/usr/include/c++/8/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
1008:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.
1009:/usr/include/c++/8/bits/basic_string.h ****        *
1010:/usr/include/c++/8/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
1011:/usr/include/c++/8/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
1012:/usr/include/c++/8/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
1013:/usr/include/c++/8/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
1014:/usr/include/c++/8/bits/basic_string.h ****        *  data.
1015:/usr/include/c++/8/bits/basic_string.h ****        */
1016:/usr/include/c++/8/bits/basic_string.h ****       void
1017:/usr/include/c++/8/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
1018:/usr/include/c++/8/bits/basic_string.h **** 
1019:/usr/include/c++/8/bits/basic_string.h ****       /**
1020:/usr/include/c++/8/bits/basic_string.h ****        *  Erases the string, making it empty.
1021:/usr/include/c++/8/bits/basic_string.h ****        */
1022:/usr/include/c++/8/bits/basic_string.h ****       void
1023:/usr/include/c++/8/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
1024:/usr/include/c++/8/bits/basic_string.h ****       { _M_set_length(0); }
1025:/usr/include/c++/8/bits/basic_string.h **** 
1026:/usr/include/c++/8/bits/basic_string.h ****       /**
1027:/usr/include/c++/8/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
1028:/usr/include/c++/8/bits/basic_string.h ****        *  <code>*this == ""</code>.
1029:/usr/include/c++/8/bits/basic_string.h ****        */
1030:/usr/include/c++/8/bits/basic_string.h ****       bool
1031:/usr/include/c++/8/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
1032:/usr/include/c++/8/bits/basic_string.h ****       { return this->size() == 0; }
1033:/usr/include/c++/8/bits/basic_string.h **** 
1034:/usr/include/c++/8/bits/basic_string.h ****       // Element access:
1035:/usr/include/c++/8/bits/basic_string.h ****       /**
1036:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1037:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1038:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
1039:/usr/include/c++/8/bits/basic_string.h ****        *
1040:/usr/include/c++/8/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1041:/usr/include/c++/8/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1042:/usr/include/c++/8/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1043:/usr/include/c++/8/bits/basic_string.h ****        *  see at().)
1044:/usr/include/c++/8/bits/basic_string.h ****        */
1045:/usr/include/c++/8/bits/basic_string.h ****       const_reference
1046:/usr/include/c++/8/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
1047:/usr/include/c++/8/bits/basic_string.h ****       {
1048:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1049:/usr/include/c++/8/bits/basic_string.h **** 	return _M_data()[__pos];
1050:/usr/include/c++/8/bits/basic_string.h ****       }
1051:/usr/include/c++/8/bits/basic_string.h **** 
1052:/usr/include/c++/8/bits/basic_string.h ****       /**
1053:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1054:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1055:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1056:/usr/include/c++/8/bits/basic_string.h ****        *
1057:/usr/include/c++/8/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1058:/usr/include/c++/8/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1059:/usr/include/c++/8/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1060:/usr/include/c++/8/bits/basic_string.h ****        *  see at().)
1061:/usr/include/c++/8/bits/basic_string.h ****        */
1062:/usr/include/c++/8/bits/basic_string.h ****       reference
1063:/usr/include/c++/8/bits/basic_string.h ****       operator[](size_type __pos)
1064:/usr/include/c++/8/bits/basic_string.h ****       {
1065:/usr/include/c++/8/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
1066:/usr/include/c++/8/bits/basic_string.h **** 	// and in C++11 mode.
1067:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1068:/usr/include/c++/8/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
1069:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
1070:/usr/include/c++/8/bits/basic_string.h **** 	return _M_data()[__pos];
1071:/usr/include/c++/8/bits/basic_string.h ****       }
1072:/usr/include/c++/8/bits/basic_string.h **** 
1073:/usr/include/c++/8/bits/basic_string.h ****       /**
1074:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1075:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n The index of the character to access.
1076:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
1077:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1078:/usr/include/c++/8/bits/basic_string.h ****        *
1079:/usr/include/c++/8/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1080:/usr/include/c++/8/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1081:/usr/include/c++/8/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1082:/usr/include/c++/8/bits/basic_string.h ****        */
1083:/usr/include/c++/8/bits/basic_string.h ****       const_reference
1084:/usr/include/c++/8/bits/basic_string.h ****       at(size_type __n) const
1085:/usr/include/c++/8/bits/basic_string.h ****       {
1086:/usr/include/c++/8/bits/basic_string.h **** 	if (__n >= this->size())
1087:/usr/include/c++/8/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1088:/usr/include/c++/8/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1089:/usr/include/c++/8/bits/basic_string.h **** 				       "(which is %zu)"),
1090:/usr/include/c++/8/bits/basic_string.h **** 				   __n, this->size());
1091:/usr/include/c++/8/bits/basic_string.h **** 	return _M_data()[__n];
1092:/usr/include/c++/8/bits/basic_string.h ****       }
1093:/usr/include/c++/8/bits/basic_string.h **** 
1094:/usr/include/c++/8/bits/basic_string.h ****       /**
1095:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1096:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n The index of the character to access.
1097:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1098:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1099:/usr/include/c++/8/bits/basic_string.h ****        *
1100:/usr/include/c++/8/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1101:/usr/include/c++/8/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1102:/usr/include/c++/8/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1103:/usr/include/c++/8/bits/basic_string.h ****        */
1104:/usr/include/c++/8/bits/basic_string.h ****       reference
1105:/usr/include/c++/8/bits/basic_string.h ****       at(size_type __n)
1106:/usr/include/c++/8/bits/basic_string.h ****       {
1107:/usr/include/c++/8/bits/basic_string.h **** 	if (__n >= size())
1108:/usr/include/c++/8/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1109:/usr/include/c++/8/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1110:/usr/include/c++/8/bits/basic_string.h **** 				       "(which is %zu)"),
1111:/usr/include/c++/8/bits/basic_string.h **** 				   __n, this->size());
1112:/usr/include/c++/8/bits/basic_string.h **** 	return _M_data()[__n];
1113:/usr/include/c++/8/bits/basic_string.h ****       }
1114:/usr/include/c++/8/bits/basic_string.h **** 
1115:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
1116:/usr/include/c++/8/bits/basic_string.h ****       /**
1117:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
1118:/usr/include/c++/8/bits/basic_string.h ****        *  element of the %string.
1119:/usr/include/c++/8/bits/basic_string.h ****        */
1120:/usr/include/c++/8/bits/basic_string.h ****       reference
1121:/usr/include/c++/8/bits/basic_string.h ****       front() noexcept
1122:/usr/include/c++/8/bits/basic_string.h ****       {
1123:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1124:/usr/include/c++/8/bits/basic_string.h **** 	return operator[](0);
1125:/usr/include/c++/8/bits/basic_string.h ****       }
1126:/usr/include/c++/8/bits/basic_string.h **** 
1127:/usr/include/c++/8/bits/basic_string.h ****       /**
1128:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
1129:/usr/include/c++/8/bits/basic_string.h ****        *  element of the %string.
1130:/usr/include/c++/8/bits/basic_string.h ****        */
1131:/usr/include/c++/8/bits/basic_string.h ****       const_reference
1132:/usr/include/c++/8/bits/basic_string.h ****       front() const noexcept
1133:/usr/include/c++/8/bits/basic_string.h ****       {
1134:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1135:/usr/include/c++/8/bits/basic_string.h **** 	return operator[](0);
1136:/usr/include/c++/8/bits/basic_string.h ****       }
1137:/usr/include/c++/8/bits/basic_string.h **** 
1138:/usr/include/c++/8/bits/basic_string.h ****       /**
1139:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
1140:/usr/include/c++/8/bits/basic_string.h ****        *  element of the %string.
1141:/usr/include/c++/8/bits/basic_string.h ****        */
1142:/usr/include/c++/8/bits/basic_string.h ****       reference
1143:/usr/include/c++/8/bits/basic_string.h ****       back() noexcept
1144:/usr/include/c++/8/bits/basic_string.h ****       {
1145:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1146:/usr/include/c++/8/bits/basic_string.h **** 	return operator[](this->size() - 1);
1147:/usr/include/c++/8/bits/basic_string.h ****       }
1148:/usr/include/c++/8/bits/basic_string.h **** 
1149:/usr/include/c++/8/bits/basic_string.h ****       /**
1150:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
1151:/usr/include/c++/8/bits/basic_string.h ****        *  last element of the %string.
1152:/usr/include/c++/8/bits/basic_string.h ****        */
1153:/usr/include/c++/8/bits/basic_string.h ****       const_reference
1154:/usr/include/c++/8/bits/basic_string.h ****       back() const noexcept
1155:/usr/include/c++/8/bits/basic_string.h ****       {
1156:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1157:/usr/include/c++/8/bits/basic_string.h **** 	return operator[](this->size() - 1);
1158:/usr/include/c++/8/bits/basic_string.h ****       }
1159:/usr/include/c++/8/bits/basic_string.h **** #endif
1160:/usr/include/c++/8/bits/basic_string.h **** 
1161:/usr/include/c++/8/bits/basic_string.h ****       // Modifiers:
1162:/usr/include/c++/8/bits/basic_string.h ****       /**
1163:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a string to this string.
1164:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  The string to append.
1165:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1166:/usr/include/c++/8/bits/basic_string.h ****        */
1167:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1168:/usr/include/c++/8/bits/basic_string.h ****       operator+=(const basic_string& __str)
1169:/usr/include/c++/8/bits/basic_string.h ****       { return this->append(__str); }
1170:/usr/include/c++/8/bits/basic_string.h **** 
1171:/usr/include/c++/8/bits/basic_string.h ****       /**
1172:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a C string.
1173:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to append.
1174:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1175:/usr/include/c++/8/bits/basic_string.h ****        */
1176:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1177:/usr/include/c++/8/bits/basic_string.h ****       operator+=(const _CharT* __s)
1178:/usr/include/c++/8/bits/basic_string.h ****       { return this->append(__s); }
1179:/usr/include/c++/8/bits/basic_string.h **** 
1180:/usr/include/c++/8/bits/basic_string.h ****       /**
1181:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a character.
1182:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  The character to append.
1183:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1184:/usr/include/c++/8/bits/basic_string.h ****        */
1185:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1186:/usr/include/c++/8/bits/basic_string.h ****       operator+=(_CharT __c)
1187:/usr/include/c++/8/bits/basic_string.h ****       {
1188:/usr/include/c++/8/bits/basic_string.h **** 	this->push_back(__c);
1189:/usr/include/c++/8/bits/basic_string.h **** 	return *this;
1190:/usr/include/c++/8/bits/basic_string.h ****       }
1191:/usr/include/c++/8/bits/basic_string.h **** 
1192:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
1193:/usr/include/c++/8/bits/basic_string.h ****       /**
1194:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1195:/usr/include/c++/8/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
1196:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1197:/usr/include/c++/8/bits/basic_string.h ****        */
1198:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1199:/usr/include/c++/8/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
1200:/usr/include/c++/8/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1201:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
1202:/usr/include/c++/8/bits/basic_string.h **** 
1203:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
1204:/usr/include/c++/8/bits/basic_string.h ****       /**
1205:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a string_view.
1206:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1207:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1208:/usr/include/c++/8/bits/basic_string.h ****        */
1209:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
1210:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1211:/usr/include/c++/8/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
1212:/usr/include/c++/8/bits/basic_string.h **** 	{ return this->append(__svt); }
1213:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
1214:/usr/include/c++/8/bits/basic_string.h **** 
1215:/usr/include/c++/8/bits/basic_string.h ****       /**
1216:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a string to this string.
1217:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  The string to append.
1218:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1219:/usr/include/c++/8/bits/basic_string.h ****        */
1220:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1221:/usr/include/c++/8/bits/basic_string.h ****       append(const basic_string& __str)
1222:/usr/include/c++/8/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
1223:/usr/include/c++/8/bits/basic_string.h **** 
1224:/usr/include/c++/8/bits/basic_string.h ****       /**
1225:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a substring.
1226:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  The string to append.
1227:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
1228:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1229:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1230:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
1231:/usr/include/c++/8/bits/basic_string.h ****        *
1232:/usr/include/c++/8/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
1233:/usr/include/c++/8/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
1234:/usr/include/c++/8/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
1235:/usr/include/c++/8/bits/basic_string.h ****        *  remainder of @a __str is appended.
1236:/usr/include/c++/8/bits/basic_string.h ****        */
1237:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1238:/usr/include/c++/8/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos)
1239:/usr/include/c++/8/bits/basic_string.h ****       { return _M_append(__str._M_data()
1240:/usr/include/c++/8/bits/basic_string.h **** 			 + __str._M_check(__pos, "basic_string::append"),
1241:/usr/include/c++/8/bits/basic_string.h **** 			 __str._M_limit(__pos, __n)); }
1242:/usr/include/c++/8/bits/basic_string.h **** 
1243:/usr/include/c++/8/bits/basic_string.h ****       /**
1244:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a C substring.
1245:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to append.
1246:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1247:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1248:/usr/include/c++/8/bits/basic_string.h ****        */
1249:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1250:/usr/include/c++/8/bits/basic_string.h ****       append(const _CharT* __s, size_type __n)
1251:/usr/include/c++/8/bits/basic_string.h ****       {
1252:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1253:/usr/include/c++/8/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1254:/usr/include/c++/8/bits/basic_string.h **** 	return _M_append(__s, __n);
1255:/usr/include/c++/8/bits/basic_string.h ****       }
1256:/usr/include/c++/8/bits/basic_string.h **** 
1257:/usr/include/c++/8/bits/basic_string.h ****       /**
1258:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a C string.
1259:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to append.
1260:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1261:/usr/include/c++/8/bits/basic_string.h ****        */
1262:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1263:/usr/include/c++/8/bits/basic_string.h ****       append(const _CharT* __s)
1264:/usr/include/c++/8/bits/basic_string.h ****       {
1265:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1266:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __n = traits_type::length(__s);
1267:/usr/include/c++/8/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1268:/usr/include/c++/8/bits/basic_string.h **** 	return _M_append(__s, __n);
1269:/usr/include/c++/8/bits/basic_string.h ****       }
1270:/usr/include/c++/8/bits/basic_string.h **** 
1271:/usr/include/c++/8/bits/basic_string.h ****       /**
1272:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append multiple characters.
1273:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1274:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  The character to use.
1275:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1276:/usr/include/c++/8/bits/basic_string.h ****        *
1277:/usr/include/c++/8/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
1278:/usr/include/c++/8/bits/basic_string.h ****        */
1279:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1280:/usr/include/c++/8/bits/basic_string.h ****       append(size_type __n, _CharT __c)
1281:/usr/include/c++/8/bits/basic_string.h ****       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1282:/usr/include/c++/8/bits/basic_string.h **** 
1283:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
1284:/usr/include/c++/8/bits/basic_string.h ****       /**
1285:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1286:/usr/include/c++/8/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
1287:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1288:/usr/include/c++/8/bits/basic_string.h ****        */
1289:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1290:/usr/include/c++/8/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
1291:/usr/include/c++/8/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1292:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
1293:/usr/include/c++/8/bits/basic_string.h **** 
1294:/usr/include/c++/8/bits/basic_string.h ****       /**
1295:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a range of characters.
1296:/usr/include/c++/8/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1297:/usr/include/c++/8/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1298:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1299:/usr/include/c++/8/bits/basic_string.h ****        *
1300:/usr/include/c++/8/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
1301:/usr/include/c++/8/bits/basic_string.h ****        */
1302:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
1303:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator,
1304:/usr/include/c++/8/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1305:/usr/include/c++/8/bits/basic_string.h **** #else
1306:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator>
1307:/usr/include/c++/8/bits/basic_string.h **** #endif
1308:/usr/include/c++/8/bits/basic_string.h ****         basic_string&
1309:/usr/include/c++/8/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1310:/usr/include/c++/8/bits/basic_string.h ****         { return this->replace(end(), end(), __first, __last); }
1311:/usr/include/c++/8/bits/basic_string.h **** 
1312:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
1313:/usr/include/c++/8/bits/basic_string.h ****       /**
1314:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a string_view.
1315:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1316:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1317:/usr/include/c++/8/bits/basic_string.h ****        */
1318:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
1319:/usr/include/c++/8/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1320:/usr/include/c++/8/bits/basic_string.h ****         append(const _Tp& __svt)
1321:/usr/include/c++/8/bits/basic_string.h ****         {
1322:/usr/include/c++/8/bits/basic_string.h ****           __sv_type __sv = __svt;
1323:/usr/include/c++/8/bits/basic_string.h ****           return this->append(__sv.data(), __sv.size());
1324:/usr/include/c++/8/bits/basic_string.h ****         }
1325:/usr/include/c++/8/bits/basic_string.h **** 
1326:/usr/include/c++/8/bits/basic_string.h ****       /**
1327:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
1328:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended from.
1329:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
1330:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
1331:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1332:/usr/include/c++/8/bits/basic_string.h ****        */
1333:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
1334:/usr/include/c++/8/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1335:/usr/include/c++/8/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
1336:/usr/include/c++/8/bits/basic_string.h **** 	{
1337:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1338:/usr/include/c++/8/bits/basic_string.h **** 	  return _M_append(__sv.data()
1339:/usr/include/c++/8/bits/basic_string.h **** 			   + __sv._M_check(__pos, "basic_string::append"),
1340:/usr/include/c++/8/bits/basic_string.h **** 			   __sv._M_limit(__pos, __n));
1341:/usr/include/c++/8/bits/basic_string.h **** 	}
1342:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
1343:/usr/include/c++/8/bits/basic_string.h **** 
1344:/usr/include/c++/8/bits/basic_string.h ****       /**
1345:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a single character.
1346:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to append.
1347:/usr/include/c++/8/bits/basic_string.h ****        */
1348:/usr/include/c++/8/bits/basic_string.h ****       void
1349:/usr/include/c++/8/bits/basic_string.h ****       push_back(_CharT __c)
1350:/usr/include/c++/8/bits/basic_string.h ****       {
1351:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __size = this->size();
1352:/usr/include/c++/8/bits/basic_string.h **** 	if (__size + 1 > this->capacity())
1353:/usr/include/c++/8/bits/basic_string.h **** 	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
1354:/usr/include/c++/8/bits/basic_string.h **** 	traits_type::assign(this->_M_data()[__size], __c);
1355:/usr/include/c++/8/bits/basic_string.h **** 	this->_M_set_length(__size + 1);
1356:/usr/include/c++/8/bits/basic_string.h ****       }
1357:/usr/include/c++/8/bits/basic_string.h **** 
1358:/usr/include/c++/8/bits/basic_string.h ****       /**
1359:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1360:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string to use.
1361:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1362:/usr/include/c++/8/bits/basic_string.h ****        */
1363:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1364:/usr/include/c++/8/bits/basic_string.h ****       assign(const basic_string& __str)
1365:/usr/include/c++/8/bits/basic_string.h ****       {
1366:/usr/include/c++/8/bits/basic_string.h **** 	this->_M_assign(__str);
1367:/usr/include/c++/8/bits/basic_string.h **** 	return *this;
1368:/usr/include/c++/8/bits/basic_string.h ****       }
1369:/usr/include/c++/8/bits/basic_string.h **** 
1370:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
1371:/usr/include/c++/8/bits/basic_string.h ****       /**
1372:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1373:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string to use.
1374:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1375:/usr/include/c++/8/bits/basic_string.h ****        *
1376:/usr/include/c++/8/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
1377:/usr/include/c++/8/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
1378:/usr/include/c++/8/bits/basic_string.h ****        */
1379:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1380:/usr/include/c++/8/bits/basic_string.h ****       assign(basic_string&& __str)
1381:/usr/include/c++/8/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
1382:/usr/include/c++/8/bits/basic_string.h ****       {
1383:/usr/include/c++/8/bits/basic_string.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1384:/usr/include/c++/8/bits/basic_string.h **** 	// 2063. Contradictory requirements for string move assignment
1385:/usr/include/c++/8/bits/basic_string.h **** 	return *this = std::move(__str);
1386:/usr/include/c++/8/bits/basic_string.h ****       }
1387:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
1388:/usr/include/c++/8/bits/basic_string.h **** 
1389:/usr/include/c++/8/bits/basic_string.h ****       /**
1390:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
1391:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  The string to use.
1392:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
1393:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1394:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1395:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
1396:/usr/include/c++/8/bits/basic_string.h ****        *
1397:/usr/include/c++/8/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
1398:/usr/include/c++/8/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
1399:/usr/include/c++/8/bits/basic_string.h ****        *  is larger than the number of available characters in @a
1400:/usr/include/c++/8/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
1401:/usr/include/c++/8/bits/basic_string.h ****        */
1402:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1403:/usr/include/c++/8/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
1404:/usr/include/c++/8/bits/basic_string.h ****       { return _M_replace(size_type(0), this->size(), __str._M_data()
1405:/usr/include/c++/8/bits/basic_string.h **** 			  + __str._M_check(__pos, "basic_string::assign"),
1406:/usr/include/c++/8/bits/basic_string.h **** 			  __str._M_limit(__pos, __n)); }
1407:/usr/include/c++/8/bits/basic_string.h **** 
1408:/usr/include/c++/8/bits/basic_string.h ****       /**
1409:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to a C substring.
1410:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to use.
1411:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1412:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1413:/usr/include/c++/8/bits/basic_string.h ****        *
1414:/usr/include/c++/8/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
1415:/usr/include/c++/8/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
1416:/usr/include/c++/8/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
1417:/usr/include/c++/8/bits/basic_string.h ****        */
1418:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1419:/usr/include/c++/8/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n)
1420:/usr/include/c++/8/bits/basic_string.h ****       {
1421:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1422:/usr/include/c++/8/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s, __n);
1423:/usr/include/c++/8/bits/basic_string.h ****       }
1424:/usr/include/c++/8/bits/basic_string.h **** 
1425:/usr/include/c++/8/bits/basic_string.h ****       /**
1426:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
1427:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to use.
1428:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1429:/usr/include/c++/8/bits/basic_string.h ****        *
1430:/usr/include/c++/8/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
1431:/usr/include/c++/8/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
1432:/usr/include/c++/8/bits/basic_string.h ****        *  function returns.
1433:/usr/include/c++/8/bits/basic_string.h ****        */
1434:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1435:/usr/include/c++/8/bits/basic_string.h ****       assign(const _CharT* __s)
1436:/usr/include/c++/8/bits/basic_string.h ****       {
1437:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1438:/usr/include/c++/8/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s,
1439:/usr/include/c++/8/bits/basic_string.h **** 			  traits_type::length(__s));
1440:/usr/include/c++/8/bits/basic_string.h ****       }
1441:/usr/include/c++/8/bits/basic_string.h **** 
1442:/usr/include/c++/8/bits/basic_string.h ****       /**
1443:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
1444:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
1445:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  The character to use.
1446:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1447:/usr/include/c++/8/bits/basic_string.h ****        *
1448:/usr/include/c++/8/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
1449:/usr/include/c++/8/bits/basic_string.h ****        *  character @a __c.
1450:/usr/include/c++/8/bits/basic_string.h ****        */
1451:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1452:/usr/include/c++/8/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
1453:/usr/include/c++/8/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1454:/usr/include/c++/8/bits/basic_string.h **** 
1455:/usr/include/c++/8/bits/basic_string.h ****       /**
1456:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
1457:/usr/include/c++/8/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1458:/usr/include/c++/8/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1459:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1460:/usr/include/c++/8/bits/basic_string.h ****        *
1461:/usr/include/c++/8/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
1462:/usr/include/c++/8/bits/basic_string.h ****       */
1463:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
1464:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator,
1465:/usr/include/c++/8/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1466:/usr/include/c++/8/bits/basic_string.h **** #else
1467:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator>
1468:/usr/include/c++/8/bits/basic_string.h **** #endif
1469:/usr/include/c++/8/bits/basic_string.h ****         basic_string&
1470:/usr/include/c++/8/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
1471:/usr/include/c++/8/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
1472:/usr/include/c++/8/bits/basic_string.h **** 
1473:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
1474:/usr/include/c++/8/bits/basic_string.h ****       /**
1475:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1476:/usr/include/c++/8/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
1477:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1478:/usr/include/c++/8/bits/basic_string.h ****        */
1479:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1480:/usr/include/c++/8/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
1481:/usr/include/c++/8/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1482:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
1483:/usr/include/c++/8/bits/basic_string.h **** 
1484:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
1485:/usr/include/c++/8/bits/basic_string.h ****       /**
1486:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value from a string_view.
1487:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1488:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1489:/usr/include/c++/8/bits/basic_string.h ****        */
1490:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
1491:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1492:/usr/include/c++/8/bits/basic_string.h **** 	assign(const _Tp& __svt)
1493:/usr/include/c++/8/bits/basic_string.h **** 	{
1494:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1495:/usr/include/c++/8/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
1496:/usr/include/c++/8/bits/basic_string.h **** 	}
1497:/usr/include/c++/8/bits/basic_string.h **** 
1498:/usr/include/c++/8/bits/basic_string.h ****       /**
1499:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
1500:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1501:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
1502:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
1503:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1504:/usr/include/c++/8/bits/basic_string.h ****        */
1505:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
1506:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1507:/usr/include/c++/8/bits/basic_string.h **** 	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
1508:/usr/include/c++/8/bits/basic_string.h **** 	{
1509:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1510:/usr/include/c++/8/bits/basic_string.h **** 	  return _M_replace(size_type(0), this->size(), __sv.data()
1511:/usr/include/c++/8/bits/basic_string.h **** 			    + __sv._M_check(__pos, "basic_string::assign"),
1512:/usr/include/c++/8/bits/basic_string.h **** 			    __sv._M_limit(__pos, __n));
1513:/usr/include/c++/8/bits/basic_string.h **** 	}
1514:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
1515:/usr/include/c++/8/bits/basic_string.h **** 
1516:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
1517:/usr/include/c++/8/bits/basic_string.h ****       /**
1518:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1519:/usr/include/c++/8/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1520:/usr/include/c++/8/bits/basic_string.h ****        *              insert at.
1521:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1522:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  The character to insert.
1523:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1524:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1525:/usr/include/c++/8/bits/basic_string.h ****        *
1526:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1527:/usr/include/c++/8/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1528:/usr/include/c++/8/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1529:/usr/include/c++/8/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1530:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
1531:/usr/include/c++/8/bits/basic_string.h ****       */
1532:/usr/include/c++/8/bits/basic_string.h ****       iterator
1533:/usr/include/c++/8/bits/basic_string.h ****       insert(const_iterator __p, size_type __n, _CharT __c)
1534:/usr/include/c++/8/bits/basic_string.h ****       {
1535:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1536:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1537:/usr/include/c++/8/bits/basic_string.h **** 	this->replace(__p, __p, __n, __c);
1538:/usr/include/c++/8/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1539:/usr/include/c++/8/bits/basic_string.h ****       }
1540:/usr/include/c++/8/bits/basic_string.h **** #else
1541:/usr/include/c++/8/bits/basic_string.h ****       /**
1542:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1543:/usr/include/c++/8/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1544:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1545:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  The character to insert.
1546:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1547:/usr/include/c++/8/bits/basic_string.h ****        *
1548:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1549:/usr/include/c++/8/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1550:/usr/include/c++/8/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1551:/usr/include/c++/8/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1552:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
1553:/usr/include/c++/8/bits/basic_string.h ****       */
1554:/usr/include/c++/8/bits/basic_string.h ****       void
1555:/usr/include/c++/8/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1556:/usr/include/c++/8/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1557:/usr/include/c++/8/bits/basic_string.h **** #endif
1558:/usr/include/c++/8/bits/basic_string.h **** 
1559:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
1560:/usr/include/c++/8/bits/basic_string.h ****       /**
1561:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1562:/usr/include/c++/8/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1563:/usr/include/c++/8/bits/basic_string.h ****        *              insert at.
1564:/usr/include/c++/8/bits/basic_string.h ****        *  @param __beg  Start of range.
1565:/usr/include/c++/8/bits/basic_string.h ****        *  @param __end  End of range.
1566:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1567:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1568:/usr/include/c++/8/bits/basic_string.h ****        *
1569:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters
1570:/usr/include/c++/8/bits/basic_string.h ****        *  causes the length to exceed max_size(), length_error is
1571:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1572:/usr/include/c++/8/bits/basic_string.h ****        *  is thrown.
1573:/usr/include/c++/8/bits/basic_string.h ****       */
1574:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator,
1575:/usr/include/c++/8/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1576:/usr/include/c++/8/bits/basic_string.h **** 	iterator
1577:/usr/include/c++/8/bits/basic_string.h ****         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
1578:/usr/include/c++/8/bits/basic_string.h ****         {
1579:/usr/include/c++/8/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1580:/usr/include/c++/8/bits/basic_string.h **** 	  const size_type __pos = __p - begin();
1581:/usr/include/c++/8/bits/basic_string.h **** 	  this->replace(__p, __p, __beg, __end);
1582:/usr/include/c++/8/bits/basic_string.h **** 	  return iterator(this->_M_data() + __pos);
1583:/usr/include/c++/8/bits/basic_string.h **** 	}
1584:/usr/include/c++/8/bits/basic_string.h **** #else
1585:/usr/include/c++/8/bits/basic_string.h ****       /**
1586:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1587:/usr/include/c++/8/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1588:/usr/include/c++/8/bits/basic_string.h ****        *  @param __beg  Start of range.
1589:/usr/include/c++/8/bits/basic_string.h ****        *  @param __end  End of range.
1590:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1591:/usr/include/c++/8/bits/basic_string.h ****        *
1592:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
1593:/usr/include/c++/8/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1594:/usr/include/c++/8/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1595:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
1596:/usr/include/c++/8/bits/basic_string.h ****       */
1597:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator>
1598:/usr/include/c++/8/bits/basic_string.h ****         void
1599:/usr/include/c++/8/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1600:/usr/include/c++/8/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1601:/usr/include/c++/8/bits/basic_string.h **** #endif
1602:/usr/include/c++/8/bits/basic_string.h **** 
1603:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
1604:/usr/include/c++/8/bits/basic_string.h ****       /**
1605:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1606:/usr/include/c++/8/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1607:/usr/include/c++/8/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1608:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1609:/usr/include/c++/8/bits/basic_string.h ****        */
1610:/usr/include/c++/8/bits/basic_string.h ****       void
1611:/usr/include/c++/8/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1612:/usr/include/c++/8/bits/basic_string.h ****       {
1613:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1614:/usr/include/c++/8/bits/basic_string.h **** 	this->insert(__p - begin(), __l.begin(), __l.size());
1615:/usr/include/c++/8/bits/basic_string.h ****       }
1616:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
1617:/usr/include/c++/8/bits/basic_string.h **** 
1618:/usr/include/c++/8/bits/basic_string.h ****       /**
1619:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert value of a string.
1620:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1621:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  The string to insert.
1622:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1623:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1624:/usr/include/c++/8/bits/basic_string.h ****        *
1625:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
1626:/usr/include/c++/8/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1627:/usr/include/c++/8/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1628:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
1629:/usr/include/c++/8/bits/basic_string.h ****       */
1630:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1631:/usr/include/c++/8/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1632:/usr/include/c++/8/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0),
1633:/usr/include/c++/8/bits/basic_string.h **** 			     __str._M_data(), __str.size()); }
1634:/usr/include/c++/8/bits/basic_string.h **** 
1635:/usr/include/c++/8/bits/basic_string.h ****       /**
1636:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert a substring.
1637:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1638:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  The string to insert.
1639:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1640:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1641:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1642:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1643:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1644:/usr/include/c++/8/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
1645:/usr/include/c++/8/bits/basic_string.h ****        *
1646:/usr/include/c++/8/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
1647:/usr/include/c++/8/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
1648:/usr/include/c++/8/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
1649:/usr/include/c++/8/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
1650:/usr/include/c++/8/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
1651:/usr/include/c++/8/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1652:/usr/include/c++/8/bits/basic_string.h ****       */
1653:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1654:/usr/include/c++/8/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1655:/usr/include/c++/8/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
1656:/usr/include/c++/8/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0), __str._M_data()
1657:/usr/include/c++/8/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::insert"),
1658:/usr/include/c++/8/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n)); }
1659:/usr/include/c++/8/bits/basic_string.h **** 
1660:/usr/include/c++/8/bits/basic_string.h ****       /**
1661:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert a C substring.
1662:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1663:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to insert.
1664:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
1665:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1666:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1667:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1668:/usr/include/c++/8/bits/basic_string.h ****        *  string.
1669:/usr/include/c++/8/bits/basic_string.h ****        *
1670:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
1671:/usr/include/c++/8/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
1672:/usr/include/c++/8/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
1673:/usr/include/c++/8/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
1674:/usr/include/c++/8/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1675:/usr/include/c++/8/bits/basic_string.h ****       */
1676:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1677:/usr/include/c++/8/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n)
1678:/usr/include/c++/8/bits/basic_string.h ****       { return this->replace(__pos, size_type(0), __s, __n); }
1679:/usr/include/c++/8/bits/basic_string.h **** 
1680:/usr/include/c++/8/bits/basic_string.h ****       /**
1681:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert a C string.
1682:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1683:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to insert.
1684:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1685:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1686:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1687:/usr/include/c++/8/bits/basic_string.h ****        *  string.
1688:/usr/include/c++/8/bits/basic_string.h ****        *
1689:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
1690:/usr/include/c++/8/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1691:/usr/include/c++/8/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
1692:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1693:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.
1694:/usr/include/c++/8/bits/basic_string.h ****       */
1695:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1696:/usr/include/c++/8/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
1697:/usr/include/c++/8/bits/basic_string.h ****       {
1698:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1699:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__pos, size_type(0), __s,
1700:/usr/include/c++/8/bits/basic_string.h **** 			     traits_type::length(__s));
1701:/usr/include/c++/8/bits/basic_string.h ****       }
1702:/usr/include/c++/8/bits/basic_string.h **** 
1703:/usr/include/c++/8/bits/basic_string.h ****       /**
1704:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1705:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
1706:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1707:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  The character to insert.
1708:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1709:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1710:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1711:/usr/include/c++/8/bits/basic_string.h ****        *  string.
1712:/usr/include/c++/8/bits/basic_string.h ****        *
1713:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
1714:/usr/include/c++/8/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
1715:/usr/include/c++/8/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
1716:/usr/include/c++/8/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1717:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
1718:/usr/include/c++/8/bits/basic_string.h ****       */
1719:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1720:/usr/include/c++/8/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1721:/usr/include/c++/8/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1722:/usr/include/c++/8/bits/basic_string.h **** 			      size_type(0), __n, __c); }
1723:/usr/include/c++/8/bits/basic_string.h **** 
1724:/usr/include/c++/8/bits/basic_string.h ****       /**
1725:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert one character.
1726:/usr/include/c++/8/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
1727:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  The character to insert.
1728:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1729:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1730:/usr/include/c++/8/bits/basic_string.h ****        *
1731:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
1732:/usr/include/c++/8/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
1733:/usr/include/c++/8/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
1734:/usr/include/c++/8/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1735:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
1736:/usr/include/c++/8/bits/basic_string.h ****       */
1737:/usr/include/c++/8/bits/basic_string.h ****       iterator
1738:/usr/include/c++/8/bits/basic_string.h ****       insert(__const_iterator __p, _CharT __c)
1739:/usr/include/c++/8/bits/basic_string.h ****       {
1740:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1741:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1742:/usr/include/c++/8/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1743:/usr/include/c++/8/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1744:/usr/include/c++/8/bits/basic_string.h ****       }
1745:/usr/include/c++/8/bits/basic_string.h **** 
1746:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
1747:/usr/include/c++/8/bits/basic_string.h ****       /**
1748:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert a string_view.
1749:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
1750:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
1751:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1752:/usr/include/c++/8/bits/basic_string.h ****       */
1753:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
1754:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1755:/usr/include/c++/8/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
1756:/usr/include/c++/8/bits/basic_string.h **** 	{
1757:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1758:/usr/include/c++/8/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
1759:/usr/include/c++/8/bits/basic_string.h **** 	}
1760:/usr/include/c++/8/bits/basic_string.h **** 
1761:/usr/include/c++/8/bits/basic_string.h ****       /**
1762:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert a string_view.
1763:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
1764:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert from.
1765:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string_view to insert
1766:/usr/include/c++/8/bits/basic_string.h ****        *  from.
1767:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
1768:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1769:/usr/include/c++/8/bits/basic_string.h ****       */
1770:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
1771:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1772:/usr/include/c++/8/bits/basic_string.h **** 	insert(size_type __pos1, const _Tp& __svt,
1773:/usr/include/c++/8/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
1774:/usr/include/c++/8/bits/basic_string.h **** 	{
1775:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1776:/usr/include/c++/8/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0), __sv.data()
1777:/usr/include/c++/8/bits/basic_string.h **** 			       + __sv._M_check(__pos2, "basic_string::insert"),
1778:/usr/include/c++/8/bits/basic_string.h **** 			       __sv._M_limit(__pos2, __n));
1779:/usr/include/c++/8/bits/basic_string.h **** 	}
1780:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
1781:/usr/include/c++/8/bits/basic_string.h **** 
1782:/usr/include/c++/8/bits/basic_string.h ****       /**
1783:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Remove characters.
1784:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
1785:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
1786:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1787:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1788:/usr/include/c++/8/bits/basic_string.h ****        *  string.
1789:/usr/include/c++/8/bits/basic_string.h ****        *
1790:/usr/include/c++/8/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
1791:/usr/include/c++/8/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
1792:/usr/include/c++/8/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
1793:/usr/include/c++/8/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
1794:/usr/include/c++/8/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1795:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
1796:/usr/include/c++/8/bits/basic_string.h ****       */
1797:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1798:/usr/include/c++/8/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1799:/usr/include/c++/8/bits/basic_string.h ****       {
1800:/usr/include/c++/8/bits/basic_string.h **** 	_M_check(__pos, "basic_string::erase");
1801:/usr/include/c++/8/bits/basic_string.h **** 	if (__n == npos)
1802:/usr/include/c++/8/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1803:/usr/include/c++/8/bits/basic_string.h **** 	else if (__n != 0)
1804:/usr/include/c++/8/bits/basic_string.h **** 	  this->_M_erase(__pos, _M_limit(__pos, __n));
1805:/usr/include/c++/8/bits/basic_string.h **** 	return *this;
1806:/usr/include/c++/8/bits/basic_string.h ****       }
1807:/usr/include/c++/8/bits/basic_string.h **** 
1808:/usr/include/c++/8/bits/basic_string.h ****       /**
1809:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Remove one character.
1810:/usr/include/c++/8/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
1811:/usr/include/c++/8/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
1812:/usr/include/c++/8/bits/basic_string.h ****        *
1813:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
1814:/usr/include/c++/8/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1815:/usr/include/c++/8/bits/basic_string.h ****       */
1816:/usr/include/c++/8/bits/basic_string.h ****       iterator
1817:/usr/include/c++/8/bits/basic_string.h ****       erase(__const_iterator __position)
1818:/usr/include/c++/8/bits/basic_string.h ****       {
1819:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()
1820:/usr/include/c++/8/bits/basic_string.h **** 				 && __position < end());
1821:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __pos = __position - begin();
1822:/usr/include/c++/8/bits/basic_string.h **** 	this->_M_erase(__pos, size_type(1));
1823:/usr/include/c++/8/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1824:/usr/include/c++/8/bits/basic_string.h ****       }
1825:/usr/include/c++/8/bits/basic_string.h **** 
1826:/usr/include/c++/8/bits/basic_string.h ****       /**
1827:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Remove a range of characters.
1828:/usr/include/c++/8/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
1829:/usr/include/c++/8/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
1830:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1831:/usr/include/c++/8/bits/basic_string.h ****        *
1832:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
1833:/usr/include/c++/8/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1834:/usr/include/c++/8/bits/basic_string.h ****       */
1835:/usr/include/c++/8/bits/basic_string.h ****       iterator
1836:/usr/include/c++/8/bits/basic_string.h ****       erase(__const_iterator __first, __const_iterator __last)
1837:/usr/include/c++/8/bits/basic_string.h ****       {
1838:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last
1839:/usr/include/c++/8/bits/basic_string.h **** 				 && __last <= end());
1840:/usr/include/c++/8/bits/basic_string.h ****         const size_type __pos = __first - begin();
1841:/usr/include/c++/8/bits/basic_string.h **** 	if (__last == end())
1842:/usr/include/c++/8/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1843:/usr/include/c++/8/bits/basic_string.h **** 	else
1844:/usr/include/c++/8/bits/basic_string.h **** 	  this->_M_erase(__pos, __last - __first);
1845:/usr/include/c++/8/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1846:/usr/include/c++/8/bits/basic_string.h ****       }
1847:/usr/include/c++/8/bits/basic_string.h **** 
1848:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
1849:/usr/include/c++/8/bits/basic_string.h ****       /**
1850:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Remove the last character.
1851:/usr/include/c++/8/bits/basic_string.h ****        *
1852:/usr/include/c++/8/bits/basic_string.h ****        *  The string must be non-empty.
1853:/usr/include/c++/8/bits/basic_string.h ****        */
1854:/usr/include/c++/8/bits/basic_string.h ****       void
1855:/usr/include/c++/8/bits/basic_string.h ****       pop_back() noexcept
1856:/usr/include/c++/8/bits/basic_string.h ****       {
1857:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1858:/usr/include/c++/8/bits/basic_string.h **** 	_M_erase(size() - 1, 1);
1859:/usr/include/c++/8/bits/basic_string.h ****       }
1860:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
1861:/usr/include/c++/8/bits/basic_string.h **** 
1862:/usr/include/c++/8/bits/basic_string.h ****       /**
1863:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1864:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1865:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
1866:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to insert.
1867:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1868:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1869:/usr/include/c++/8/bits/basic_string.h ****        *  string.
1870:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1871:/usr/include/c++/8/bits/basic_string.h ****        *
1872:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
1873:/usr/include/c++/8/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
1874:/usr/include/c++/8/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1875:/usr/include/c++/8/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
1876:/usr/include/c++/8/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
1877:/usr/include/c++/8/bits/basic_string.h ****        *  error is thrown.
1878:/usr/include/c++/8/bits/basic_string.h ****       */
1879:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1880:/usr/include/c++/8/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1881:/usr/include/c++/8/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1882:/usr/include/c++/8/bits/basic_string.h **** 
1883:/usr/include/c++/8/bits/basic_string.h ****       /**
1884:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1885:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
1886:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1887:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to insert.
1888:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
1889:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
1890:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1891:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
1892:/usr/include/c++/8/bits/basic_string.h ****        *  __str.size().
1893:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1894:/usr/include/c++/8/bits/basic_string.h ****        *
1895:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
1896:/usr/include/c++/8/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
1897:/usr/include/c++/8/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1898:/usr/include/c++/8/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
1899:/usr/include/c++/8/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1900:/usr/include/c++/8/bits/basic_string.h ****       */
1901:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1902:/usr/include/c++/8/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1903:/usr/include/c++/8/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
1904:/usr/include/c++/8/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1905:/usr/include/c++/8/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1906:/usr/include/c++/8/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1907:/usr/include/c++/8/bits/basic_string.h **** 
1908:/usr/include/c++/8/bits/basic_string.h ****       /**
1909:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
1910:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1911:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1912:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to insert.
1913:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
1914:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1915:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1916:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1917:/usr/include/c++/8/bits/basic_string.h ****        *
1918:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1919:/usr/include/c++/8/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
1920:/usr/include/c++/8/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
1921:/usr/include/c++/8/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
1922:/usr/include/c++/8/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
1923:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1924:/usr/include/c++/8/bits/basic_string.h ****        *  is thrown.
1925:/usr/include/c++/8/bits/basic_string.h ****       */
1926:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1927:/usr/include/c++/8/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1928:/usr/include/c++/8/bits/basic_string.h **** 	      size_type __n2)
1929:/usr/include/c++/8/bits/basic_string.h ****       {
1930:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n2);
1931:/usr/include/c++/8/bits/basic_string.h **** 	return _M_replace(_M_check(__pos, "basic_string::replace"),
1932:/usr/include/c++/8/bits/basic_string.h **** 			  _M_limit(__pos, __n1), __s, __n2);
1933:/usr/include/c++/8/bits/basic_string.h ****       }
1934:/usr/include/c++/8/bits/basic_string.h **** 
1935:/usr/include/c++/8/bits/basic_string.h ****       /**
1936:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
1937:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1938:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1939:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to insert.
1940:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1941:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1942:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1943:/usr/include/c++/8/bits/basic_string.h ****        *
1944:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1945:/usr/include/c++/8/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
1946:/usr/include/c++/8/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
1947:/usr/include/c++/8/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
1948:/usr/include/c++/8/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1949:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
1950:/usr/include/c++/8/bits/basic_string.h ****       */
1951:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1952:/usr/include/c++/8/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1953:/usr/include/c++/8/bits/basic_string.h ****       {
1954:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1955:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
1956:/usr/include/c++/8/bits/basic_string.h ****       }
1957:/usr/include/c++/8/bits/basic_string.h **** 
1958:/usr/include/c++/8/bits/basic_string.h ****       /**
1959:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
1960:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1961:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1962:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
1963:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to insert.
1964:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1965:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
1966:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1967:/usr/include/c++/8/bits/basic_string.h ****        *
1968:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
1969:/usr/include/c++/8/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
1970:/usr/include/c++/8/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1971:/usr/include/c++/8/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
1972:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1973:/usr/include/c++/8/bits/basic_string.h ****        *  is thrown.
1974:/usr/include/c++/8/bits/basic_string.h ****       */
1975:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1976:/usr/include/c++/8/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1977:/usr/include/c++/8/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1978:/usr/include/c++/8/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
1979:/usr/include/c++/8/bits/basic_string.h **** 
1980:/usr/include/c++/8/bits/basic_string.h ****       /**
1981:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
1982:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1983:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1984:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String value to insert.
1985:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
1986:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1987:/usr/include/c++/8/bits/basic_string.h ****        *
1988:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1989:/usr/include/c++/8/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
1990:/usr/include/c++/8/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
1991:/usr/include/c++/8/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
1992:/usr/include/c++/8/bits/basic_string.h ****       */
1993:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
1994:/usr/include/c++/8/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1995:/usr/include/c++/8/bits/basic_string.h **** 	      const basic_string& __str)
1996:/usr/include/c++/8/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
1997:/usr/include/c++/8/bits/basic_string.h **** 
1998:/usr/include/c++/8/bits/basic_string.h ****       /**
1999:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
2000:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2001:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2002:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string value to insert.
2003:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
2004:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
2005:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2006:/usr/include/c++/8/bits/basic_string.h ****        *
2007:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2008:/usr/include/c++/8/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
2009:/usr/include/c++/8/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2010:/usr/include/c++/8/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2011:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.
2012:/usr/include/c++/8/bits/basic_string.h ****       */
2013:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
2014:/usr/include/c++/8/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2015:/usr/include/c++/8/bits/basic_string.h **** 	      const _CharT* __s, size_type __n)
2016:/usr/include/c++/8/bits/basic_string.h ****       {
2017:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2018:/usr/include/c++/8/bits/basic_string.h **** 				 && __i2 <= end());
2019:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
2020:/usr/include/c++/8/bits/basic_string.h ****       }
2021:/usr/include/c++/8/bits/basic_string.h **** 
2022:/usr/include/c++/8/bits/basic_string.h ****       /**
2023:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
2024:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2025:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2026:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string value to insert.
2027:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
2028:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2029:/usr/include/c++/8/bits/basic_string.h ****        *
2030:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2031:/usr/include/c++/8/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
2032:/usr/include/c++/8/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2033:/usr/include/c++/8/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2034:/usr/include/c++/8/bits/basic_string.h ****       */
2035:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
2036:/usr/include/c++/8/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
2037:/usr/include/c++/8/bits/basic_string.h ****       {
2038:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2039:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
2040:/usr/include/c++/8/bits/basic_string.h ****       }
2041:/usr/include/c++/8/bits/basic_string.h **** 
2042:/usr/include/c++/8/bits/basic_string.h ****       /**
2043:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
2044:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2045:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2046:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
2047:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to insert.
2048:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
2049:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2050:/usr/include/c++/8/bits/basic_string.h ****        *
2051:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2052:/usr/include/c++/8/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
2053:/usr/include/c++/8/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2054:/usr/include/c++/8/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2055:/usr/include/c++/8/bits/basic_string.h ****       */
2056:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
2057:/usr/include/c++/8/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
2058:/usr/include/c++/8/bits/basic_string.h **** 	      _CharT __c)
2059:/usr/include/c++/8/bits/basic_string.h ****       {
2060:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2061:/usr/include/c++/8/bits/basic_string.h **** 				 && __i2 <= end());
2062:/usr/include/c++/8/bits/basic_string.h **** 	return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
2063:/usr/include/c++/8/bits/basic_string.h ****       }
2064:/usr/include/c++/8/bits/basic_string.h **** 
2065:/usr/include/c++/8/bits/basic_string.h ****       /**
2066:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
2067:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2068:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2069:/usr/include/c++/8/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
2070:/usr/include/c++/8/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
2071:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
2072:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2073:/usr/include/c++/8/bits/basic_string.h ****        *
2074:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2075:/usr/include/c++/8/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2076:/usr/include/c++/8/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2077:/usr/include/c++/8/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2078:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.
2079:/usr/include/c++/8/bits/basic_string.h ****       */
2080:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
2081:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator,
2082:/usr/include/c++/8/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
2083:/usr/include/c++/8/bits/basic_string.h ****         basic_string&
2084:/usr/include/c++/8/bits/basic_string.h ****         replace(const_iterator __i1, const_iterator __i2,
2085:/usr/include/c++/8/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2086:/usr/include/c++/8/bits/basic_string.h ****         {
2087:/usr/include/c++/8/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2088:/usr/include/c++/8/bits/basic_string.h **** 				   && __i2 <= end());
2089:/usr/include/c++/8/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2090:/usr/include/c++/8/bits/basic_string.h **** 	  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
2091:/usr/include/c++/8/bits/basic_string.h **** 					   std::__false_type());
2092:/usr/include/c++/8/bits/basic_string.h **** 	}
2093:/usr/include/c++/8/bits/basic_string.h **** #else
2094:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator>
2095:/usr/include/c++/8/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
2096:/usr/include/c++/8/bits/basic_string.h ****         typename __enable_if_not_native_iterator<_InputIterator>::__type
2097:/usr/include/c++/8/bits/basic_string.h **** #else
2098:/usr/include/c++/8/bits/basic_string.h ****         basic_string&
2099:/usr/include/c++/8/bits/basic_string.h **** #endif
2100:/usr/include/c++/8/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
2101:/usr/include/c++/8/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2102:/usr/include/c++/8/bits/basic_string.h ****         {
2103:/usr/include/c++/8/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2104:/usr/include/c++/8/bits/basic_string.h **** 				   && __i2 <= end());
2105:/usr/include/c++/8/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2106:/usr/include/c++/8/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
2107:/usr/include/c++/8/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
2108:/usr/include/c++/8/bits/basic_string.h **** 	}
2109:/usr/include/c++/8/bits/basic_string.h **** #endif
2110:/usr/include/c++/8/bits/basic_string.h **** 
2111:/usr/include/c++/8/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
2112:/usr/include/c++/8/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
2113:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
2114:/usr/include/c++/8/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2115:/usr/include/c++/8/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
2116:/usr/include/c++/8/bits/basic_string.h ****       {
2117:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2118:/usr/include/c++/8/bits/basic_string.h **** 				 && __i2 <= end());
2119:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2120:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2121:/usr/include/c++/8/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2122:/usr/include/c++/8/bits/basic_string.h ****       }
2123:/usr/include/c++/8/bits/basic_string.h **** 
2124:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
2125:/usr/include/c++/8/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2126:/usr/include/c++/8/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
2127:/usr/include/c++/8/bits/basic_string.h ****       {
2128:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2129:/usr/include/c++/8/bits/basic_string.h **** 				 && __i2 <= end());
2130:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2131:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2132:/usr/include/c++/8/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2133:/usr/include/c++/8/bits/basic_string.h ****       }
2134:/usr/include/c++/8/bits/basic_string.h **** 
2135:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
2136:/usr/include/c++/8/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2137:/usr/include/c++/8/bits/basic_string.h **** 	      iterator __k1, iterator __k2)
2138:/usr/include/c++/8/bits/basic_string.h ****       {
2139:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2140:/usr/include/c++/8/bits/basic_string.h **** 				 && __i2 <= end());
2141:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2142:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2143:/usr/include/c++/8/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2144:/usr/include/c++/8/bits/basic_string.h ****       }
2145:/usr/include/c++/8/bits/basic_string.h **** 
2146:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
2147:/usr/include/c++/8/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2148:/usr/include/c++/8/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
2149:/usr/include/c++/8/bits/basic_string.h ****       {
2150:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2151:/usr/include/c++/8/bits/basic_string.h **** 				 && __i2 <= end());
2152:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2153:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2154:/usr/include/c++/8/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2155:/usr/include/c++/8/bits/basic_string.h ****       }
2156:/usr/include/c++/8/bits/basic_string.h **** 
2157:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
2158:/usr/include/c++/8/bits/basic_string.h ****       /**
2159:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
2160:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2161:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2162:/usr/include/c++/8/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
2163:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
2164:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2165:/usr/include/c++/8/bits/basic_string.h ****        *
2166:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2167:/usr/include/c++/8/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2168:/usr/include/c++/8/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2169:/usr/include/c++/8/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2170:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.
2171:/usr/include/c++/8/bits/basic_string.h ****       */
2172:/usr/include/c++/8/bits/basic_string.h ****       basic_string& replace(const_iterator __i1, const_iterator __i2,
2173:/usr/include/c++/8/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
2174:/usr/include/c++/8/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
2175:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
2176:/usr/include/c++/8/bits/basic_string.h **** 
2177:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
2178:/usr/include/c++/8/bits/basic_string.h ****       /**
2179:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2180:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  The position to replace at.
2181:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
2182:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
2183:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
2184:/usr/include/c++/8/bits/basic_string.h ****       */
2185:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
2186:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2187:/usr/include/c++/8/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
2188:/usr/include/c++/8/bits/basic_string.h **** 	{
2189:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2190:/usr/include/c++/8/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
2191:/usr/include/c++/8/bits/basic_string.h **** 	}
2192:/usr/include/c++/8/bits/basic_string.h **** 
2193:/usr/include/c++/8/bits/basic_string.h ****       /**
2194:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2195:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
2196:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
2197:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2198:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
2199:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
2200:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
2201:/usr/include/c++/8/bits/basic_string.h ****       */
2202:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
2203:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2204:/usr/include/c++/8/bits/basic_string.h **** 	replace(size_type __pos1, size_type __n1, const _Tp& __svt,
2205:/usr/include/c++/8/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
2206:/usr/include/c++/8/bits/basic_string.h **** 	{
2207:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2208:/usr/include/c++/8/bits/basic_string.h **** 	  return this->replace(__pos1, __n1, __sv.data()
2209:/usr/include/c++/8/bits/basic_string.h **** 			       + __sv._M_check(__pos2, "basic_string::replace"),
2210:/usr/include/c++/8/bits/basic_string.h **** 			       __sv._M_limit(__pos2, __n2));
2211:/usr/include/c++/8/bits/basic_string.h **** 	}
2212:/usr/include/c++/8/bits/basic_string.h **** 
2213:/usr/include/c++/8/bits/basic_string.h ****       /**
2214:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2215:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
2216:/usr/include/c++/8/bits/basic_string.h ****           to replace at.
2217:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
2218:/usr/include/c++/8/bits/basic_string.h ****           for the replace.
2219:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2220:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
2221:/usr/include/c++/8/bits/basic_string.h ****       */
2222:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
2223:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2224:/usr/include/c++/8/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
2225:/usr/include/c++/8/bits/basic_string.h **** 	{
2226:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2227:/usr/include/c++/8/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
2228:/usr/include/c++/8/bits/basic_string.h **** 	}
2229:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
2230:/usr/include/c++/8/bits/basic_string.h **** 
2231:/usr/include/c++/8/bits/basic_string.h ****     private:
2232:/usr/include/c++/8/bits/basic_string.h ****       template<class _Integer>
2233:/usr/include/c++/8/bits/basic_string.h **** 	basic_string&
2234:/usr/include/c++/8/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2235:/usr/include/c++/8/bits/basic_string.h **** 			    _Integer __n, _Integer __val, __true_type)
2236:/usr/include/c++/8/bits/basic_string.h ****         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }
2237:/usr/include/c++/8/bits/basic_string.h **** 
2238:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator>
2239:/usr/include/c++/8/bits/basic_string.h **** 	basic_string&
2240:/usr/include/c++/8/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2241:/usr/include/c++/8/bits/basic_string.h **** 			    _InputIterator __k1, _InputIterator __k2,
2242:/usr/include/c++/8/bits/basic_string.h **** 			    __false_type);
2243:/usr/include/c++/8/bits/basic_string.h **** 
2244:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
2245:/usr/include/c++/8/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
2246:/usr/include/c++/8/bits/basic_string.h **** 		     _CharT __c);
2247:/usr/include/c++/8/bits/basic_string.h **** 
2248:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
2249:/usr/include/c++/8/bits/basic_string.h ****       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
2250:/usr/include/c++/8/bits/basic_string.h **** 		 const size_type __len2);
2251:/usr/include/c++/8/bits/basic_string.h **** 
2252:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
2253:/usr/include/c++/8/bits/basic_string.h ****       _M_append(const _CharT* __s, size_type __n);
2254:/usr/include/c++/8/bits/basic_string.h **** 
2255:/usr/include/c++/8/bits/basic_string.h ****     public:
2256:/usr/include/c++/8/bits/basic_string.h **** 
2257:/usr/include/c++/8/bits/basic_string.h ****       /**
2258:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Copy substring into C string.
2259:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to copy value into.
2260:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
2261:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
2262:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Number of characters actually copied
2263:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2264:/usr/include/c++/8/bits/basic_string.h ****        *
2265:/usr/include/c++/8/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
2266:/usr/include/c++/8/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
2267:/usr/include/c++/8/bits/basic_string.h ****        *  out_of_range is thrown.
2268:/usr/include/c++/8/bits/basic_string.h ****       */
2269:/usr/include/c++/8/bits/basic_string.h ****       size_type
2270:/usr/include/c++/8/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
2271:/usr/include/c++/8/bits/basic_string.h **** 
2272:/usr/include/c++/8/bits/basic_string.h ****       /**
2273:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Swap contents with another string.
2274:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  String to swap with.
2275:/usr/include/c++/8/bits/basic_string.h ****        *
2276:/usr/include/c++/8/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
2277:/usr/include/c++/8/bits/basic_string.h ****        *  time.
2278:/usr/include/c++/8/bits/basic_string.h ****       */
2279:/usr/include/c++/8/bits/basic_string.h ****       void
2280:/usr/include/c++/8/bits/basic_string.h ****       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;
2281:/usr/include/c++/8/bits/basic_string.h **** 
2282:/usr/include/c++/8/bits/basic_string.h ****       // String operations:
2283:/usr/include/c++/8/bits/basic_string.h ****       /**
2284:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
2285:/usr/include/c++/8/bits/basic_string.h ****        *
2286:/usr/include/c++/8/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
2287:/usr/include/c++/8/bits/basic_string.h ****        *  happen.
2288:/usr/include/c++/8/bits/basic_string.h ****       */
2289:/usr/include/c++/8/bits/basic_string.h ****       const _CharT*
2290:/usr/include/c++/8/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
2291:/usr/include/c++/8/bits/basic_string.h ****       { return _M_data(); }
2292:/usr/include/c++/8/bits/basic_string.h **** 
2293:/usr/include/c++/8/bits/basic_string.h ****       /**
2294:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
2295:/usr/include/c++/8/bits/basic_string.h ****        *
2296:/usr/include/c++/8/bits/basic_string.h ****        *  This is a pointer to internal data.  It is undefined to modify
2297:/usr/include/c++/8/bits/basic_string.h ****        *  the contents through the returned pointer. To get a pointer that
2298:/usr/include/c++/8/bits/basic_string.h ****        *  allows modifying the contents use @c &str[0] instead,
2299:/usr/include/c++/8/bits/basic_string.h ****        *  (or in C++17 the non-const @c str.data() overload).
2300:/usr/include/c++/8/bits/basic_string.h ****       */
2301:/usr/include/c++/8/bits/basic_string.h ****       const _CharT*
2302:/usr/include/c++/8/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
2303:/usr/include/c++/8/bits/basic_string.h ****       { return _M_data(); }
2304:/usr/include/c++/8/bits/basic_string.h **** 
2305:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
2306:/usr/include/c++/8/bits/basic_string.h ****       /**
2307:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Return non-const pointer to contents.
2308:/usr/include/c++/8/bits/basic_string.h ****        *
2309:/usr/include/c++/8/bits/basic_string.h ****        *  This is a pointer to the character sequence held by the string.
2310:/usr/include/c++/8/bits/basic_string.h ****        *  Modifying the characters in the sequence is allowed.
2311:/usr/include/c++/8/bits/basic_string.h ****       */
2312:/usr/include/c++/8/bits/basic_string.h ****       _CharT*
2313:/usr/include/c++/8/bits/basic_string.h ****       data() noexcept
2314:/usr/include/c++/8/bits/basic_string.h ****       { return _M_data(); }
2315:/usr/include/c++/8/bits/basic_string.h **** #endif
2316:/usr/include/c++/8/bits/basic_string.h **** 
2317:/usr/include/c++/8/bits/basic_string.h ****       /**
2318:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
2319:/usr/include/c++/8/bits/basic_string.h ****       */
2320:/usr/include/c++/8/bits/basic_string.h ****       allocator_type
2321:/usr/include/c++/8/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
2322:/usr/include/c++/8/bits/basic_string.h ****       { return _M_get_allocator(); }
2323:/usr/include/c++/8/bits/basic_string.h **** 
2324:/usr/include/c++/8/bits/basic_string.h ****       /**
2325:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a C substring.
2326:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to locate.
2327:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2328:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
2329:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2330:/usr/include/c++/8/bits/basic_string.h ****        *
2331:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
2332:/usr/include/c++/8/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
2333:/usr/include/c++/8/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
2334:/usr/include/c++/8/bits/basic_string.h ****        *  npos.
2335:/usr/include/c++/8/bits/basic_string.h ****       */
2336:/usr/include/c++/8/bits/basic_string.h ****       size_type
2337:/usr/include/c++/8/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const
2338:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2339:/usr/include/c++/8/bits/basic_string.h **** 
2340:/usr/include/c++/8/bits/basic_string.h ****       /**
2341:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a string.
2342:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to locate.
2343:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2344:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2345:/usr/include/c++/8/bits/basic_string.h ****        *
2346:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
2347:/usr/include/c++/8/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
2348:/usr/include/c++/8/bits/basic_string.h ****        *  found, returns npos.
2349:/usr/include/c++/8/bits/basic_string.h ****       */
2350:/usr/include/c++/8/bits/basic_string.h ****       size_type
2351:/usr/include/c++/8/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
2352:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2353:/usr/include/c++/8/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
2354:/usr/include/c++/8/bits/basic_string.h **** 
2355:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
2356:/usr/include/c++/8/bits/basic_string.h ****       /**
2357:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a string_view.
2358:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
2359:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2360:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2361:/usr/include/c++/8/bits/basic_string.h ****       */
2362:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
2363:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2364:/usr/include/c++/8/bits/basic_string.h **** 	find(const _Tp& __svt, size_type __pos = 0) const
2365:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2366:/usr/include/c++/8/bits/basic_string.h **** 	{
2367:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2368:/usr/include/c++/8/bits/basic_string.h **** 	  return this->find(__sv.data(), __pos, __sv.size());
2369:/usr/include/c++/8/bits/basic_string.h **** 	}
2370:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
2371:/usr/include/c++/8/bits/basic_string.h **** 
2372:/usr/include/c++/8/bits/basic_string.h ****       /**
2373:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a C string.
2374:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to locate.
2375:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2376:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2377:/usr/include/c++/8/bits/basic_string.h ****        *
2378:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
2379:/usr/include/c++/8/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
2380:/usr/include/c++/8/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
2381:/usr/include/c++/8/bits/basic_string.h ****       */
2382:/usr/include/c++/8/bits/basic_string.h ****       size_type
2383:/usr/include/c++/8/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
2384:/usr/include/c++/8/bits/basic_string.h ****       {
2385:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2386:/usr/include/c++/8/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
2387:/usr/include/c++/8/bits/basic_string.h ****       }
2388:/usr/include/c++/8/bits/basic_string.h **** 
2389:/usr/include/c++/8/bits/basic_string.h ****       /**
2390:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character.
2391:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to locate.
2392:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2393:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
2394:/usr/include/c++/8/bits/basic_string.h ****        *
2395:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
2396:/usr/include/c++/8/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2397:/usr/include/c++/8/bits/basic_string.h ****        *  found.  If not found, returns npos.
2398:/usr/include/c++/8/bits/basic_string.h ****       */
2399:/usr/include/c++/8/bits/basic_string.h ****       size_type
2400:/usr/include/c++/8/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
2401:/usr/include/c++/8/bits/basic_string.h **** 
2402:/usr/include/c++/8/bits/basic_string.h ****       /**
2403:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a string.
2404:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to locate.
2405:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2406:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2407:/usr/include/c++/8/bits/basic_string.h ****        *
2408:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
2409:/usr/include/c++/8/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
2410:/usr/include/c++/8/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
2411:/usr/include/c++/8/bits/basic_string.h ****       */
2412:/usr/include/c++/8/bits/basic_string.h ****       size_type
2413:/usr/include/c++/8/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
2414:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2415:/usr/include/c++/8/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
2416:/usr/include/c++/8/bits/basic_string.h **** 
2417:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
2418:/usr/include/c++/8/bits/basic_string.h ****       /**
2419:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a string_view.
2420:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
2421:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2422:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2423:/usr/include/c++/8/bits/basic_string.h ****       */
2424:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
2425:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2426:/usr/include/c++/8/bits/basic_string.h **** 	rfind(const _Tp& __svt, size_type __pos = npos) const
2427:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2428:/usr/include/c++/8/bits/basic_string.h **** 	{
2429:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2430:/usr/include/c++/8/bits/basic_string.h **** 	  return this->rfind(__sv.data(), __pos, __sv.size());
2431:/usr/include/c++/8/bits/basic_string.h **** 	}
2432:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
2433:/usr/include/c++/8/bits/basic_string.h **** 
2434:/usr/include/c++/8/bits/basic_string.h ****       /**
2435:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
2436:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to locate.
2437:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2438:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2439:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2440:/usr/include/c++/8/bits/basic_string.h ****        *
2441:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
2442:/usr/include/c++/8/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
2443:/usr/include/c++/8/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
2444:/usr/include/c++/8/bits/basic_string.h ****        *  npos.
2445:/usr/include/c++/8/bits/basic_string.h ****       */
2446:/usr/include/c++/8/bits/basic_string.h ****       size_type
2447:/usr/include/c++/8/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const
2448:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2449:/usr/include/c++/8/bits/basic_string.h **** 
2450:/usr/include/c++/8/bits/basic_string.h ****       /**
2451:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a C string.
2452:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to locate.
2453:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
2454:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
2455:/usr/include/c++/8/bits/basic_string.h ****        *
2456:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
2457:/usr/include/c++/8/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
2458:/usr/include/c++/8/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
2459:/usr/include/c++/8/bits/basic_string.h ****       */
2460:/usr/include/c++/8/bits/basic_string.h ****       size_type
2461:/usr/include/c++/8/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const
2462:/usr/include/c++/8/bits/basic_string.h ****       {
2463:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2464:/usr/include/c++/8/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
2465:/usr/include/c++/8/bits/basic_string.h ****       }
2466:/usr/include/c++/8/bits/basic_string.h **** 
2467:/usr/include/c++/8/bits/basic_string.h ****       /**
2468:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character.
2469:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to locate.
2470:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2471:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
2472:/usr/include/c++/8/bits/basic_string.h ****        *
2473:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2474:/usr/include/c++/8/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2475:/usr/include/c++/8/bits/basic_string.h ****        *  found.  If not found, returns npos.
2476:/usr/include/c++/8/bits/basic_string.h ****       */
2477:/usr/include/c++/8/bits/basic_string.h ****       size_type
2478:/usr/include/c++/8/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
2479:/usr/include/c++/8/bits/basic_string.h **** 
2480:/usr/include/c++/8/bits/basic_string.h ****       /**
2481:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character of string.
2482:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2483:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2484:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
2485:/usr/include/c++/8/bits/basic_string.h ****        *
2486:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2487:/usr/include/c++/8/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2488:/usr/include/c++/8/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2489:/usr/include/c++/8/bits/basic_string.h ****        *  npos.
2490:/usr/include/c++/8/bits/basic_string.h ****       */
2491:/usr/include/c++/8/bits/basic_string.h ****       size_type
2492:/usr/include/c++/8/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
2493:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2494:/usr/include/c++/8/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
2495:/usr/include/c++/8/bits/basic_string.h **** 
2496:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
2497:/usr/include/c++/8/bits/basic_string.h ****       /**
2498:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character of a string_view.
2499:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2500:/usr/include/c++/8/bits/basic_string.h ****        *                characters to locate.
2501:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2502:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
2503:/usr/include/c++/8/bits/basic_string.h ****       */
2504:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
2505:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2506:/usr/include/c++/8/bits/basic_string.h **** 	find_first_of(const _Tp& __svt, size_type __pos = 0) const
2507:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2508:/usr/include/c++/8/bits/basic_string.h **** 	{
2509:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2510:/usr/include/c++/8/bits/basic_string.h **** 	  return this->find_first_of(__sv.data(), __pos, __sv.size());
2511:/usr/include/c++/8/bits/basic_string.h **** 	}
2512:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
2513:/usr/include/c++/8/bits/basic_string.h **** 
2514:/usr/include/c++/8/bits/basic_string.h ****       /**
2515:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
2516:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2517:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2518:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2519:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
2520:/usr/include/c++/8/bits/basic_string.h ****        *
2521:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2522:/usr/include/c++/8/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2523:/usr/include/c++/8/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2524:/usr/include/c++/8/bits/basic_string.h ****        *  returns npos.
2525:/usr/include/c++/8/bits/basic_string.h ****       */
2526:/usr/include/c++/8/bits/basic_string.h ****       size_type
2527:/usr/include/c++/8/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
2528:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2529:/usr/include/c++/8/bits/basic_string.h **** 
2530:/usr/include/c++/8/bits/basic_string.h ****       /**
2531:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
2532:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2533:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2534:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
2535:/usr/include/c++/8/bits/basic_string.h ****        *
2536:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2537:/usr/include/c++/8/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2538:/usr/include/c++/8/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2539:/usr/include/c++/8/bits/basic_string.h ****       */
2540:/usr/include/c++/8/bits/basic_string.h ****       size_type
2541:/usr/include/c++/8/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
2542:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2543:/usr/include/c++/8/bits/basic_string.h ****       {
2544:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2545:/usr/include/c++/8/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
2546:/usr/include/c++/8/bits/basic_string.h ****       }
2547:/usr/include/c++/8/bits/basic_string.h **** 
2548:/usr/include/c++/8/bits/basic_string.h ****       /**
2549:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character.
2550:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to locate.
2551:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2552:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
2553:/usr/include/c++/8/bits/basic_string.h ****        *
2554:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
2555:/usr/include/c++/8/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
2556:/usr/include/c++/8/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
2557:/usr/include/c++/8/bits/basic_string.h ****        *
2558:/usr/include/c++/8/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
2559:/usr/include/c++/8/bits/basic_string.h ****       */
2560:/usr/include/c++/8/bits/basic_string.h ****       size_type
2561:/usr/include/c++/8/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
2562:/usr/include/c++/8/bits/basic_string.h ****       { return this->find(__c, __pos); }
2563:/usr/include/c++/8/bits/basic_string.h **** 
2564:/usr/include/c++/8/bits/basic_string.h ****       /**
2565:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
2566:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2567:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2568:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
2569:/usr/include/c++/8/bits/basic_string.h ****        *
2570:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2571:/usr/include/c++/8/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2572:/usr/include/c++/8/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2573:/usr/include/c++/8/bits/basic_string.h ****        *  npos.
2574:/usr/include/c++/8/bits/basic_string.h ****       */
2575:/usr/include/c++/8/bits/basic_string.h ****       size_type
2576:/usr/include/c++/8/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
2577:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2578:/usr/include/c++/8/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
2579:/usr/include/c++/8/bits/basic_string.h **** 
2580:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
2581:/usr/include/c++/8/bits/basic_string.h ****       /**
2582:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
2583:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2584:/usr/include/c++/8/bits/basic_string.h ****        *                characters to locate.
2585:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2586:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
2587:/usr/include/c++/8/bits/basic_string.h ****       */
2588:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
2589:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2590:/usr/include/c++/8/bits/basic_string.h **** 	find_last_of(const _Tp& __svt, size_type __pos = npos) const
2591:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2592:/usr/include/c++/8/bits/basic_string.h **** 	{
2593:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2594:/usr/include/c++/8/bits/basic_string.h **** 	  return this->find_last_of(__sv.data(), __pos, __sv.size());
2595:/usr/include/c++/8/bits/basic_string.h **** 	}
2596:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
2597:/usr/include/c++/8/bits/basic_string.h **** 
2598:/usr/include/c++/8/bits/basic_string.h ****       /**
2599:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
2600:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2601:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2602:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2603:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
2604:/usr/include/c++/8/bits/basic_string.h ****        *
2605:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2606:/usr/include/c++/8/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2607:/usr/include/c++/8/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2608:/usr/include/c++/8/bits/basic_string.h ****        *  returns npos.
2609:/usr/include/c++/8/bits/basic_string.h ****       */
2610:/usr/include/c++/8/bits/basic_string.h ****       size_type
2611:/usr/include/c++/8/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
2612:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2613:/usr/include/c++/8/bits/basic_string.h **** 
2614:/usr/include/c++/8/bits/basic_string.h ****       /**
2615:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
2616:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2617:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2618:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
2619:/usr/include/c++/8/bits/basic_string.h ****        *
2620:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2621:/usr/include/c++/8/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2622:/usr/include/c++/8/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2623:/usr/include/c++/8/bits/basic_string.h ****       */
2624:/usr/include/c++/8/bits/basic_string.h ****       size_type
2625:/usr/include/c++/8/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
2626:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2627:/usr/include/c++/8/bits/basic_string.h ****       {
2628:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2629:/usr/include/c++/8/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
2630:/usr/include/c++/8/bits/basic_string.h ****       }
2631:/usr/include/c++/8/bits/basic_string.h **** 
2632:/usr/include/c++/8/bits/basic_string.h ****       /**
2633:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character.
2634:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to locate.
2635:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2636:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
2637:/usr/include/c++/8/bits/basic_string.h ****        *
2638:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2639:/usr/include/c++/8/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2640:/usr/include/c++/8/bits/basic_string.h ****        *  found.  If not found, returns npos.
2641:/usr/include/c++/8/bits/basic_string.h ****        *
2642:/usr/include/c++/8/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
2643:/usr/include/c++/8/bits/basic_string.h ****       */
2644:/usr/include/c++/8/bits/basic_string.h ****       size_type
2645:/usr/include/c++/8/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
2646:/usr/include/c++/8/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
2647:/usr/include/c++/8/bits/basic_string.h **** 
2648:/usr/include/c++/8/bits/basic_string.h ****       /**
2649:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
2650:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2651:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2652:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
2653:/usr/include/c++/8/bits/basic_string.h ****        *
2654:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
2655:/usr/include/c++/8/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
2656:/usr/include/c++/8/bits/basic_string.h ****        *  was found.  If not found, returns npos.
2657:/usr/include/c++/8/bits/basic_string.h ****       */
2658:/usr/include/c++/8/bits/basic_string.h ****       size_type
2659:/usr/include/c++/8/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
2660:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2661:/usr/include/c++/8/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
2662:/usr/include/c++/8/bits/basic_string.h **** 
2663:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
2664:/usr/include/c++/8/bits/basic_string.h ****       /**
2665:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character not in a string_view.
2666:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  A object convertible to string_view containing
2667:/usr/include/c++/8/bits/basic_string.h ****        *                characters to avoid.
2668:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2669:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
2670:/usr/include/c++/8/bits/basic_string.h ****        */
2671:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
2672:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2673:/usr/include/c++/8/bits/basic_string.h **** 	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const
2674:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2675:/usr/include/c++/8/bits/basic_string.h **** 	{
2676:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2677:/usr/include/c++/8/bits/basic_string.h **** 	  return this->find_first_not_of(__sv.data(), __pos, __sv.size());
2678:/usr/include/c++/8/bits/basic_string.h **** 	}
2679:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
2680:/usr/include/c++/8/bits/basic_string.h **** 
2681:/usr/include/c++/8/bits/basic_string.h ****       /**
2682:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
2683:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2684:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2685:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
2686:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
2687:/usr/include/c++/8/bits/basic_string.h ****        *
2688:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2689:/usr/include/c++/8/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
2690:/usr/include/c++/8/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2691:/usr/include/c++/8/bits/basic_string.h ****        *  found.  If not found, returns npos.
2692:/usr/include/c++/8/bits/basic_string.h ****       */
2693:/usr/include/c++/8/bits/basic_string.h ****       size_type
2694:/usr/include/c++/8/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
2695:/usr/include/c++/8/bits/basic_string.h **** 			size_type __n) const _GLIBCXX_NOEXCEPT;
2696:/usr/include/c++/8/bits/basic_string.h **** 
2697:/usr/include/c++/8/bits/basic_string.h ****       /**
2698:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
2699:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2700:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2701:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
2702:/usr/include/c++/8/bits/basic_string.h ****        *
2703:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2704:/usr/include/c++/8/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
2705:/usr/include/c++/8/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2706:/usr/include/c++/8/bits/basic_string.h ****       */
2707:/usr/include/c++/8/bits/basic_string.h ****       size_type
2708:/usr/include/c++/8/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
2709:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2710:/usr/include/c++/8/bits/basic_string.h ****       {
2711:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2712:/usr/include/c++/8/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
2713:/usr/include/c++/8/bits/basic_string.h ****       }
2714:/usr/include/c++/8/bits/basic_string.h **** 
2715:/usr/include/c++/8/bits/basic_string.h ****       /**
2716:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a different character.
2717:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to avoid.
2718:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2719:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
2720:/usr/include/c++/8/bits/basic_string.h ****        *
2721:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
2722:/usr/include/c++/8/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
2723:/usr/include/c++/8/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
2724:/usr/include/c++/8/bits/basic_string.h ****       */
2725:/usr/include/c++/8/bits/basic_string.h ****       size_type
2726:/usr/include/c++/8/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
2727:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2728:/usr/include/c++/8/bits/basic_string.h **** 
2729:/usr/include/c++/8/bits/basic_string.h ****       /**
2730:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
2731:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2732:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2733:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
2734:/usr/include/c++/8/bits/basic_string.h ****        *
2735:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2736:/usr/include/c++/8/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
2737:/usr/include/c++/8/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2738:/usr/include/c++/8/bits/basic_string.h ****        *  npos.
2739:/usr/include/c++/8/bits/basic_string.h ****       */
2740:/usr/include/c++/8/bits/basic_string.h ****       size_type
2741:/usr/include/c++/8/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
2742:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2743:/usr/include/c++/8/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
2744:/usr/include/c++/8/bits/basic_string.h **** 
2745:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
2746:/usr/include/c++/8/bits/basic_string.h ****       /**
2747:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character not in a string_view.
2748:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2749:/usr/include/c++/8/bits/basic_string.h ****        *                characters to avoid.
2750:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2751:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
2752:/usr/include/c++/8/bits/basic_string.h ****        */
2753:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
2754:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2755:/usr/include/c++/8/bits/basic_string.h **** 	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const
2756:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2757:/usr/include/c++/8/bits/basic_string.h **** 	{
2758:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2759:/usr/include/c++/8/bits/basic_string.h **** 	  return this->find_last_not_of(__sv.data(), __pos, __sv.size());
2760:/usr/include/c++/8/bits/basic_string.h **** 	}
2761:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
2762:/usr/include/c++/8/bits/basic_string.h **** 
2763:/usr/include/c++/8/bits/basic_string.h ****       /**
2764:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
2765:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2766:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2767:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
2768:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
2769:/usr/include/c++/8/bits/basic_string.h ****        *
2770:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
2771:/usr/include/c++/8/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
2772:/usr/include/c++/8/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
2773:/usr/include/c++/8/bits/basic_string.h ****        *  returns npos.
2774:/usr/include/c++/8/bits/basic_string.h ****       */
2775:/usr/include/c++/8/bits/basic_string.h ****       size_type
2776:/usr/include/c++/8/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
2777:/usr/include/c++/8/bits/basic_string.h **** 		       size_type __n) const _GLIBCXX_NOEXCEPT;
2778:/usr/include/c++/8/bits/basic_string.h ****       /**
2779:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
2780:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2781:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2782:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
2783:/usr/include/c++/8/bits/basic_string.h ****        *
2784:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2785:/usr/include/c++/8/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
2786:/usr/include/c++/8/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2787:/usr/include/c++/8/bits/basic_string.h ****        *  npos.
2788:/usr/include/c++/8/bits/basic_string.h ****       */
2789:/usr/include/c++/8/bits/basic_string.h ****       size_type
2790:/usr/include/c++/8/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
2791:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2792:/usr/include/c++/8/bits/basic_string.h ****       {
2793:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2794:/usr/include/c++/8/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
2795:/usr/include/c++/8/bits/basic_string.h ****       }
2796:/usr/include/c++/8/bits/basic_string.h **** 
2797:/usr/include/c++/8/bits/basic_string.h ****       /**
2798:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a different character.
2799:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to avoid.
2800:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2801:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
2802:/usr/include/c++/8/bits/basic_string.h ****        *
2803:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
2804:/usr/include/c++/8/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
2805:/usr/include/c++/8/bits/basic_string.h ****        *  found.  If not found, returns npos.
2806:/usr/include/c++/8/bits/basic_string.h ****       */
2807:/usr/include/c++/8/bits/basic_string.h ****       size_type
2808:/usr/include/c++/8/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
2809:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2810:/usr/include/c++/8/bits/basic_string.h **** 
2811:/usr/include/c++/8/bits/basic_string.h ****       /**
2812:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Get a substring.
2813:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
2814:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
2815:/usr/include/c++/8/bits/basic_string.h ****        *  @return  The new string.
2816:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2817:/usr/include/c++/8/bits/basic_string.h ****        *
2818:/usr/include/c++/8/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
2819:/usr/include/c++/8/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
2820:/usr/include/c++/8/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
2821:/usr/include/c++/8/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
2822:/usr/include/c++/8/bits/basic_string.h ****       */
2823:/usr/include/c++/8/bits/basic_string.h ****       basic_string
2824:/usr/include/c++/8/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
2825:/usr/include/c++/8/bits/basic_string.h ****       { return basic_string(*this,
2826:/usr/include/c++/8/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
2827:/usr/include/c++/8/bits/basic_string.h **** 
2828:/usr/include/c++/8/bits/basic_string.h ****       /**
2829:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare to a string.
2830:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to compare against.
2831:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2832:/usr/include/c++/8/bits/basic_string.h ****        *
2833:/usr/include/c++/8/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
2834:/usr/include/c++/8/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
2835:/usr/include/c++/8/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
2836:/usr/include/c++/8/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
2837:/usr/include/c++/8/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
2838:/usr/include/c++/8/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
2839:/usr/include/c++/8/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2840:/usr/include/c++/8/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2841:/usr/include/c++/8/bits/basic_string.h ****       */
2842:/usr/include/c++/8/bits/basic_string.h ****       int
2843:/usr/include/c++/8/bits/basic_string.h ****       compare(const basic_string& __str) const
2844:/usr/include/c++/8/bits/basic_string.h ****       {
2845:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __size = this->size();
2846:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __osize = __str.size();
2847:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
2848:/usr/include/c++/8/bits/basic_string.h **** 
2849:/usr/include/c++/8/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
2850:/usr/include/c++/8/bits/basic_string.h **** 	if (!__r)
2851:/usr/include/c++/8/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
2852:/usr/include/c++/8/bits/basic_string.h **** 	return __r;
2853:/usr/include/c++/8/bits/basic_string.h ****       }
2854:/usr/include/c++/8/bits/basic_string.h **** 
2855:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
2856:/usr/include/c++/8/bits/basic_string.h ****       /**
2857:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2858:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt An object convertible to string_view to compare against.
2859:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2860:/usr/include/c++/8/bits/basic_string.h ****        */
2861:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
2862:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, int>
2863:/usr/include/c++/8/bits/basic_string.h **** 	compare(const _Tp& __svt) const
2864:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2865:/usr/include/c++/8/bits/basic_string.h **** 	{
2866:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2867:/usr/include/c++/8/bits/basic_string.h **** 	  const size_type __size = this->size();
2868:/usr/include/c++/8/bits/basic_string.h **** 	  const size_type __osize = __sv.size();
2869:/usr/include/c++/8/bits/basic_string.h **** 	  const size_type __len = std::min(__size, __osize);
2870:/usr/include/c++/8/bits/basic_string.h **** 
2871:/usr/include/c++/8/bits/basic_string.h **** 	  int __r = traits_type::compare(_M_data(), __sv.data(), __len);
2872:/usr/include/c++/8/bits/basic_string.h **** 	  if (!__r)
2873:/usr/include/c++/8/bits/basic_string.h **** 	    __r = _S_compare(__size, __osize);
2874:/usr/include/c++/8/bits/basic_string.h **** 	  return __r;
2875:/usr/include/c++/8/bits/basic_string.h **** 	}
2876:/usr/include/c++/8/bits/basic_string.h **** 
2877:/usr/include/c++/8/bits/basic_string.h ****       /**
2878:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2879:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  A position in the string to start comparing from.
2880:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  The number of characters to compare.
2881:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
2882:/usr/include/c++/8/bits/basic_string.h ****        *                against.
2883:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2884:/usr/include/c++/8/bits/basic_string.h ****        */
2885:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
2886:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, int>
2887:/usr/include/c++/8/bits/basic_string.h **** 	compare(size_type __pos, size_type __n, const _Tp& __svt) const
2888:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2889:/usr/include/c++/8/bits/basic_string.h **** 	{
2890:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2891:/usr/include/c++/8/bits/basic_string.h **** 	  return __sv_type(*this).substr(__pos, __n).compare(__sv);
2892:/usr/include/c++/8/bits/basic_string.h **** 	}
2893:/usr/include/c++/8/bits/basic_string.h **** 
2894:/usr/include/c++/8/bits/basic_string.h ****       /**
2895:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2896:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos1  A position in the string to start comparing from.
2897:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  The number of characters to compare.
2898:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
2899:/usr/include/c++/8/bits/basic_string.h ****        *                against.
2900:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos2  A position in the string_view to start comparing from.
2901:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2  The number of characters to compare.
2902:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2903:/usr/include/c++/8/bits/basic_string.h ****        */
2904:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
2905:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, int>
2906:/usr/include/c++/8/bits/basic_string.h **** 	compare(size_type __pos1, size_type __n1, const _Tp& __svt,
2907:/usr/include/c++/8/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos) const
2908:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2909:/usr/include/c++/8/bits/basic_string.h **** 	{
2910:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2911:/usr/include/c++/8/bits/basic_string.h **** 	  return __sv_type(*this)
2912:/usr/include/c++/8/bits/basic_string.h **** 	    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
2913:/usr/include/c++/8/bits/basic_string.h **** 	}
2914:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
2915:/usr/include/c++/8/bits/basic_string.h **** 
2916:/usr/include/c++/8/bits/basic_string.h ****       /**
2917:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare substring to a string.
2918:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2919:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
2920:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to compare against.
2921:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2922:/usr/include/c++/8/bits/basic_string.h ****        *
2923:/usr/include/c++/8/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
2924:/usr/include/c++/8/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
2925:/usr/include/c++/8/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
2926:/usr/include/c++/8/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
2927:/usr/include/c++/8/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
2928:/usr/include/c++/8/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
2929:/usr/include/c++/8/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
2930:/usr/include/c++/8/bits/basic_string.h ****        *  strings by calling
2931:/usr/include/c++/8/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
2932:/usr/include/c++/8/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
2933:/usr/include/c++/8/bits/basic_string.h ****        *  the shorter one is ordered first.
2934:/usr/include/c++/8/bits/basic_string.h ****       */
2935:/usr/include/c++/8/bits/basic_string.h ****       int
2936:/usr/include/c++/8/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
2937:/usr/include/c++/8/bits/basic_string.h **** 
2938:/usr/include/c++/8/bits/basic_string.h ****       /**
2939:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
2940:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
2941:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2942:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to compare against.
2943:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
2944:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
2945:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2946:/usr/include/c++/8/bits/basic_string.h ****        *
2947:/usr/include/c++/8/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2948:/usr/include/c++/8/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
2949:/usr/include/c++/8/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
2950:/usr/include/c++/8/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
2951:/usr/include/c++/8/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
2952:/usr/include/c++/8/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
2953:/usr/include/c++/8/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
2954:/usr/include/c++/8/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
2955:/usr/include/c++/8/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
2956:/usr/include/c++/8/bits/basic_string.h ****        *  calling
2957:/usr/include/c++/8/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
2958:/usr/include/c++/8/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2959:/usr/include/c++/8/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2960:/usr/include/c++/8/bits/basic_string.h ****       */
2961:/usr/include/c++/8/bits/basic_string.h ****       int
2962:/usr/include/c++/8/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
2963:/usr/include/c++/8/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos) const;
2964:/usr/include/c++/8/bits/basic_string.h **** 
2965:/usr/include/c++/8/bits/basic_string.h ****       /**
2966:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare to a C string.
2967:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to compare against.
2968:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2969:/usr/include/c++/8/bits/basic_string.h ****        *
2970:/usr/include/c++/8/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
2971:/usr/include/c++/8/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
2972:/usr/include/c++/8/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
2973:/usr/include/c++/8/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
2974:/usr/include/c++/8/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
2975:/usr/include/c++/8/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
2976:/usr/include/c++/8/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
2977:/usr/include/c++/8/bits/basic_string.h ****        *  ordered first.
2978:/usr/include/c++/8/bits/basic_string.h ****       */
2979:/usr/include/c++/8/bits/basic_string.h ****       int
2980:/usr/include/c++/8/bits/basic_string.h ****       compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;
2981:/usr/include/c++/8/bits/basic_string.h **** 
2982:/usr/include/c++/8/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
2983:/usr/include/c++/8/bits/basic_string.h ****       // 5 String::compare specification questionable
2984:/usr/include/c++/8/bits/basic_string.h ****       /**
2985:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
2986:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2987:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2988:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to compare against.
2989:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2990:/usr/include/c++/8/bits/basic_string.h ****        *
2991:/usr/include/c++/8/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2992:/usr/include/c++/8/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
2993:/usr/include/c++/8/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
2994:/usr/include/c++/8/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
2995:/usr/include/c++/8/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
2996:/usr/include/c++/8/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
2997:/usr/include/c++/8/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
2998:/usr/include/c++/8/bits/basic_string.h ****        *  function then compares the two string by calling
2999:/usr/include/c++/8/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
3000:/usr/include/c++/8/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
3001:/usr/include/c++/8/bits/basic_string.h ****        *  one is ordered first.
3002:/usr/include/c++/8/bits/basic_string.h ****       */
3003:/usr/include/c++/8/bits/basic_string.h ****       int
3004:/usr/include/c++/8/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
3005:/usr/include/c++/8/bits/basic_string.h **** 
3006:/usr/include/c++/8/bits/basic_string.h ****       /**
3007:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
3008:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
3009:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
3010:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  character %array to compare against.
3011:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
3012:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
3013:/usr/include/c++/8/bits/basic_string.h ****        *
3014:/usr/include/c++/8/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
3015:/usr/include/c++/8/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
3016:/usr/include/c++/8/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
3017:/usr/include/c++/8/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
3018:/usr/include/c++/8/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
3019:/usr/include/c++/8/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
3020:/usr/include/c++/8/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
3021:/usr/include/c++/8/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
3022:/usr/include/c++/8/bits/basic_string.h ****        *  function then compares the two strings by calling
3023:/usr/include/c++/8/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
3024:/usr/include/c++/8/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
3025:/usr/include/c++/8/bits/basic_string.h ****        *  one is ordered first.
3026:/usr/include/c++/8/bits/basic_string.h ****        *
3027:/usr/include/c++/8/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
3028:/usr/include/c++/8/bits/basic_string.h ****        *  no special meaning.
3029:/usr/include/c++/8/bits/basic_string.h ****       */
3030:/usr/include/c++/8/bits/basic_string.h ****       int
3031:/usr/include/c++/8/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
3032:/usr/include/c++/8/bits/basic_string.h **** 	      size_type __n2) const;
3033:/usr/include/c++/8/bits/basic_string.h **** 
3034:/usr/include/c++/8/bits/basic_string.h ****       // Allow basic_stringbuf::__xfer_bufptrs to call _M_length:
3035:/usr/include/c++/8/bits/basic_string.h ****       template<typename, typename, typename> friend class basic_stringbuf;
3036:/usr/include/c++/8/bits/basic_string.h ****     };
3037:/usr/include/c++/8/bits/basic_string.h **** _GLIBCXX_END_NAMESPACE_CXX11
3038:/usr/include/c++/8/bits/basic_string.h **** #else  // !_GLIBCXX_USE_CXX11_ABI
3039:/usr/include/c++/8/bits/basic_string.h ****   // Reference-counted COW string implentation
3040:/usr/include/c++/8/bits/basic_string.h **** 
3041:/usr/include/c++/8/bits/basic_string.h ****   /**
3042:/usr/include/c++/8/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
3043:/usr/include/c++/8/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
3044:/usr/include/c++/8/bits/basic_string.h ****    *
3045:/usr/include/c++/8/bits/basic_string.h ****    *  @ingroup strings
3046:/usr/include/c++/8/bits/basic_string.h ****    *  @ingroup sequences
3047:/usr/include/c++/8/bits/basic_string.h ****    *
3048:/usr/include/c++/8/bits/basic_string.h ****    *  @tparam _CharT  Type of character
3049:/usr/include/c++/8/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
3050:/usr/include/c++/8/bits/basic_string.h ****    *                   char_traits<_CharT>.
3051:/usr/include/c++/8/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
3052:/usr/include/c++/8/bits/basic_string.h ****    *
3053:/usr/include/c++/8/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
3054:/usr/include/c++/8/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
3055:/usr/include/c++/8/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
3056:/usr/include/c++/8/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
3057:/usr/include/c++/8/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
3058:/usr/include/c++/8/bits/basic_string.h ****    *
3059:/usr/include/c++/8/bits/basic_string.h ****    *  @doctodo
3060:/usr/include/c++/8/bits/basic_string.h ****    *
3061:/usr/include/c++/8/bits/basic_string.h ****    *
3062:/usr/include/c++/8/bits/basic_string.h ****    *  Documentation?  What's that?
3063:/usr/include/c++/8/bits/basic_string.h ****    *  Nathan Myers <ncm@cantrip.org>.
3064:/usr/include/c++/8/bits/basic_string.h ****    *
3065:/usr/include/c++/8/bits/basic_string.h ****    *  A string looks like this:
3066:/usr/include/c++/8/bits/basic_string.h ****    *
3067:/usr/include/c++/8/bits/basic_string.h ****    *  @code
3068:/usr/include/c++/8/bits/basic_string.h ****    *                                        [_Rep]
3069:/usr/include/c++/8/bits/basic_string.h ****    *                                        _M_length
3070:/usr/include/c++/8/bits/basic_string.h ****    *   [basic_string<char_type>]            _M_capacity
3071:/usr/include/c++/8/bits/basic_string.h ****    *   _M_dataplus                          _M_refcount
3072:/usr/include/c++/8/bits/basic_string.h ****    *   _M_p ---------------->               unnamed array of char_type
3073:/usr/include/c++/8/bits/basic_string.h ****    *  @endcode
3074:/usr/include/c++/8/bits/basic_string.h ****    *
3075:/usr/include/c++/8/bits/basic_string.h ****    *  Where the _M_p points to the first character in the string, and
3076:/usr/include/c++/8/bits/basic_string.h ****    *  you cast it to a pointer-to-_Rep and subtract 1 to get a
3077:/usr/include/c++/8/bits/basic_string.h ****    *  pointer to the header.
3078:/usr/include/c++/8/bits/basic_string.h ****    *
3079:/usr/include/c++/8/bits/basic_string.h ****    *  This approach has the enormous advantage that a string object
3080:/usr/include/c++/8/bits/basic_string.h ****    *  requires only one allocation.  All the ugliness is confined
3081:/usr/include/c++/8/bits/basic_string.h ****    *  within a single %pair of inline functions, which each compile to
3082:/usr/include/c++/8/bits/basic_string.h ****    *  a single @a add instruction: _Rep::_M_data(), and
3083:/usr/include/c++/8/bits/basic_string.h ****    *  string::_M_rep(); and the allocation function which gets a
3084:/usr/include/c++/8/bits/basic_string.h ****    *  block of raw bytes and with room enough and constructs a _Rep
3085:/usr/include/c++/8/bits/basic_string.h ****    *  object at the front.
3086:/usr/include/c++/8/bits/basic_string.h ****    *
3087:/usr/include/c++/8/bits/basic_string.h ****    *  The reason you want _M_data pointing to the character %array and
3088:/usr/include/c++/8/bits/basic_string.h ****    *  not the _Rep is so that the debugger can see the string
3089:/usr/include/c++/8/bits/basic_string.h ****    *  contents. (Probably we should add a non-inline member to get
3090:/usr/include/c++/8/bits/basic_string.h ****    *  the _Rep for the debugger to use, so users can check the actual
3091:/usr/include/c++/8/bits/basic_string.h ****    *  string length.)
3092:/usr/include/c++/8/bits/basic_string.h ****    *
3093:/usr/include/c++/8/bits/basic_string.h ****    *  Note that the _Rep object is a POD so that you can have a
3094:/usr/include/c++/8/bits/basic_string.h ****    *  static <em>empty string</em> _Rep object already @a constructed before
3095:/usr/include/c++/8/bits/basic_string.h ****    *  static constructors have run.  The reference-count encoding is
3096:/usr/include/c++/8/bits/basic_string.h ****    *  chosen so that a 0 indicates one reference, so you never try to
3097:/usr/include/c++/8/bits/basic_string.h ****    *  destroy the empty-string _Rep object.
3098:/usr/include/c++/8/bits/basic_string.h ****    *
3099:/usr/include/c++/8/bits/basic_string.h ****    *  All but the last paragraph is considered pretty conventional
3100:/usr/include/c++/8/bits/basic_string.h ****    *  for a C++ string implementation.
3101:/usr/include/c++/8/bits/basic_string.h ****   */
3102:/usr/include/c++/8/bits/basic_string.h ****   // 21.3  Template class basic_string
3103:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
3104:/usr/include/c++/8/bits/basic_string.h ****     class basic_string
3105:/usr/include/c++/8/bits/basic_string.h ****     {
3106:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;
3107:/usr/include/c++/8/bits/basic_string.h **** 
3108:/usr/include/c++/8/bits/basic_string.h ****       // Types:
3109:/usr/include/c++/8/bits/basic_string.h ****     public:
3110:/usr/include/c++/8/bits/basic_string.h ****       typedef _Traits					    traits_type;
3111:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _Traits::char_type		    value_type;
3112:/usr/include/c++/8/bits/basic_string.h ****       typedef _Alloc					    allocator_type;
3113:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _CharT_alloc_type::size_type	    size_type;
3114:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _CharT_alloc_type::difference_type   difference_type;
3115:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _CharT_alloc_type::reference	    reference;
3116:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_reference   const_reference;
3117:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _CharT_alloc_type::pointer	    pointer;
3118:/usr/include/c++/8/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_pointer	    const_pointer;
3119:/usr/include/c++/8/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
3120:/usr/include/c++/8/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
3121:/usr/include/c++/8/bits/basic_string.h ****                                                             const_iterator;
3122:/usr/include/c++/8/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
3123:/usr/include/c++/8/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		    reverse_iterator;
3124:/usr/include/c++/8/bits/basic_string.h **** 
3125:/usr/include/c++/8/bits/basic_string.h ****     private:
3126:/usr/include/c++/8/bits/basic_string.h ****       // _Rep: string representation
3127:/usr/include/c++/8/bits/basic_string.h ****       //   Invariants:
3128:/usr/include/c++/8/bits/basic_string.h ****       //   1. String really contains _M_length + 1 characters: due to 21.3.4
3129:/usr/include/c++/8/bits/basic_string.h ****       //      must be kept null-terminated.
3130:/usr/include/c++/8/bits/basic_string.h ****       //   2. _M_capacity >= _M_length
3131:/usr/include/c++/8/bits/basic_string.h ****       //      Allocated memory is always (_M_capacity + 1) * sizeof(_CharT).
3132:/usr/include/c++/8/bits/basic_string.h ****       //   3. _M_refcount has three states:
3133:/usr/include/c++/8/bits/basic_string.h ****       //      -1: leaked, one reference, no ref-copies allowed, non-const.
3134:/usr/include/c++/8/bits/basic_string.h ****       //       0: one reference, non-const.
3135:/usr/include/c++/8/bits/basic_string.h ****       //     n>0: n + 1 references, operations require a lock, const.
3136:/usr/include/c++/8/bits/basic_string.h ****       //   4. All fields==0 is an empty string, given the extra storage
3137:/usr/include/c++/8/bits/basic_string.h ****       //      beyond-the-end for a null terminator; thus, the shared
3138:/usr/include/c++/8/bits/basic_string.h ****       //      empty string representation needs no constructor.
3139:/usr/include/c++/8/bits/basic_string.h **** 
3140:/usr/include/c++/8/bits/basic_string.h ****       struct _Rep_base
3141:/usr/include/c++/8/bits/basic_string.h ****       {
3142:/usr/include/c++/8/bits/basic_string.h **** 	size_type		_M_length;
3143:/usr/include/c++/8/bits/basic_string.h **** 	size_type		_M_capacity;
3144:/usr/include/c++/8/bits/basic_string.h **** 	_Atomic_word		_M_refcount;
3145:/usr/include/c++/8/bits/basic_string.h ****       };
3146:/usr/include/c++/8/bits/basic_string.h **** 
3147:/usr/include/c++/8/bits/basic_string.h ****       struct _Rep : _Rep_base
3148:/usr/include/c++/8/bits/basic_string.h ****       {
3149:/usr/include/c++/8/bits/basic_string.h **** 	// Types:
3150:/usr/include/c++/8/bits/basic_string.h **** 	typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
3151:/usr/include/c++/8/bits/basic_string.h **** 
3152:/usr/include/c++/8/bits/basic_string.h **** 	// (Public) Data members:
3153:/usr/include/c++/8/bits/basic_string.h **** 
3154:/usr/include/c++/8/bits/basic_string.h **** 	// The maximum number of individual char_type elements of an
3155:/usr/include/c++/8/bits/basic_string.h **** 	// individual string is determined by _S_max_size. This is the
3156:/usr/include/c++/8/bits/basic_string.h **** 	// value that will be returned by max_size().  (Whereas npos
3157:/usr/include/c++/8/bits/basic_string.h **** 	// is the maximum number of bytes the allocator can allocate.)
3158:/usr/include/c++/8/bits/basic_string.h **** 	// If one was to divvy up the theoretical largest size string,
3159:/usr/include/c++/8/bits/basic_string.h **** 	// with a terminating character and m _CharT elements, it'd
3160:/usr/include/c++/8/bits/basic_string.h **** 	// look like this:
3161:/usr/include/c++/8/bits/basic_string.h **** 	// npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)
3162:/usr/include/c++/8/bits/basic_string.h **** 	// Solving for m:
3163:/usr/include/c++/8/bits/basic_string.h **** 	// m = ((npos - sizeof(_Rep))/sizeof(CharT)) - 1
3164:/usr/include/c++/8/bits/basic_string.h **** 	// In addition, this implementation quarters this amount.
3165:/usr/include/c++/8/bits/basic_string.h **** 	static const size_type	_S_max_size;
3166:/usr/include/c++/8/bits/basic_string.h **** 	static const _CharT	_S_terminal;
3167:/usr/include/c++/8/bits/basic_string.h **** 
3168:/usr/include/c++/8/bits/basic_string.h **** 	// The following storage is init'd to 0 by the linker, resulting
3169:/usr/include/c++/8/bits/basic_string.h ****         // (carefully) in an empty string with one reference.
3170:/usr/include/c++/8/bits/basic_string.h ****         static size_type _S_empty_rep_storage[];
3171:/usr/include/c++/8/bits/basic_string.h **** 
3172:/usr/include/c++/8/bits/basic_string.h ****         static _Rep&
3173:/usr/include/c++/8/bits/basic_string.h ****         _S_empty_rep() _GLIBCXX_NOEXCEPT
3174:/usr/include/c++/8/bits/basic_string.h ****         { 
3175:/usr/include/c++/8/bits/basic_string.h **** 	  // NB: Mild hack to avoid strict-aliasing warnings.  Note that
3176:/usr/include/c++/8/bits/basic_string.h **** 	  // _S_empty_rep_storage is never modified and the punning should
3177:/usr/include/c++/8/bits/basic_string.h **** 	  // be reasonably safe in this case.
3178:/usr/include/c++/8/bits/basic_string.h **** 	  void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
3179:/usr/include/c++/8/bits/basic_string.h **** 	  return *reinterpret_cast<_Rep*>(__p);
3180:/usr/include/c++/8/bits/basic_string.h **** 	}
3181:/usr/include/c++/8/bits/basic_string.h **** 
3182:/usr/include/c++/8/bits/basic_string.h ****         bool
3183:/usr/include/c++/8/bits/basic_string.h **** 	_M_is_leaked() const _GLIBCXX_NOEXCEPT
3184:/usr/include/c++/8/bits/basic_string.h ****         {
3185:/usr/include/c++/8/bits/basic_string.h **** #if defined(__GTHREADS)
3186:/usr/include/c++/8/bits/basic_string.h ****           // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,
3187:/usr/include/c++/8/bits/basic_string.h ****           // so we need to use an atomic load. However, _M_is_leaked
3188:/usr/include/c++/8/bits/basic_string.h ****           // predicate does not change concurrently (i.e. the string is either
3189:/usr/include/c++/8/bits/basic_string.h ****           // leaked or not), so a relaxed load is enough.
3190:/usr/include/c++/8/bits/basic_string.h ****           return __atomic_load_n(&this->_M_refcount, __ATOMIC_RELAXED) < 0;
3191:/usr/include/c++/8/bits/basic_string.h **** #else
3192:/usr/include/c++/8/bits/basic_string.h ****           return this->_M_refcount < 0;
3193:/usr/include/c++/8/bits/basic_string.h **** #endif
3194:/usr/include/c++/8/bits/basic_string.h ****         }
3195:/usr/include/c++/8/bits/basic_string.h **** 
3196:/usr/include/c++/8/bits/basic_string.h ****         bool
3197:/usr/include/c++/8/bits/basic_string.h **** 	_M_is_shared() const _GLIBCXX_NOEXCEPT
3198:/usr/include/c++/8/bits/basic_string.h **** 	{
3199:/usr/include/c++/8/bits/basic_string.h **** #if defined(__GTHREADS)
3200:/usr/include/c++/8/bits/basic_string.h ****           // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,
3201:/usr/include/c++/8/bits/basic_string.h ****           // so we need to use an atomic load. Another thread can drop last
3202:/usr/include/c++/8/bits/basic_string.h ****           // but one reference concurrently with this check, so we need this
3203:/usr/include/c++/8/bits/basic_string.h ****           // load to be acquire to synchronize with release fetch_and_add in
3204:/usr/include/c++/8/bits/basic_string.h ****           // _M_dispose.
3205:/usr/include/c++/8/bits/basic_string.h ****           return __atomic_load_n(&this->_M_refcount, __ATOMIC_ACQUIRE) > 0;
3206:/usr/include/c++/8/bits/basic_string.h **** #else
3207:/usr/include/c++/8/bits/basic_string.h ****           return this->_M_refcount > 0;
3208:/usr/include/c++/8/bits/basic_string.h **** #endif
3209:/usr/include/c++/8/bits/basic_string.h ****         }
3210:/usr/include/c++/8/bits/basic_string.h **** 
3211:/usr/include/c++/8/bits/basic_string.h ****         void
3212:/usr/include/c++/8/bits/basic_string.h **** 	_M_set_leaked() _GLIBCXX_NOEXCEPT
3213:/usr/include/c++/8/bits/basic_string.h ****         { this->_M_refcount = -1; }
3214:/usr/include/c++/8/bits/basic_string.h **** 
3215:/usr/include/c++/8/bits/basic_string.h ****         void
3216:/usr/include/c++/8/bits/basic_string.h **** 	_M_set_sharable() _GLIBCXX_NOEXCEPT
3217:/usr/include/c++/8/bits/basic_string.h ****         { this->_M_refcount = 0; }
3218:/usr/include/c++/8/bits/basic_string.h **** 
3219:/usr/include/c++/8/bits/basic_string.h **** 	void
3220:/usr/include/c++/8/bits/basic_string.h **** 	_M_set_length_and_sharable(size_type __n) _GLIBCXX_NOEXCEPT
3221:/usr/include/c++/8/bits/basic_string.h **** 	{
3222:/usr/include/c++/8/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3223:/usr/include/c++/8/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3224:/usr/include/c++/8/bits/basic_string.h **** #endif
3225:/usr/include/c++/8/bits/basic_string.h **** 	    {
3226:/usr/include/c++/8/bits/basic_string.h **** 	      this->_M_set_sharable();  // One reference.
3227:/usr/include/c++/8/bits/basic_string.h **** 	      this->_M_length = __n;
3228:/usr/include/c++/8/bits/basic_string.h **** 	      traits_type::assign(this->_M_refdata()[__n], _S_terminal);
3229:/usr/include/c++/8/bits/basic_string.h **** 	      // grrr. (per 21.3.4)
3230:/usr/include/c++/8/bits/basic_string.h **** 	      // You cannot leave those LWG people alone for a second.
3231:/usr/include/c++/8/bits/basic_string.h **** 	    }
3232:/usr/include/c++/8/bits/basic_string.h **** 	}
3233:/usr/include/c++/8/bits/basic_string.h **** 
3234:/usr/include/c++/8/bits/basic_string.h **** 	_CharT*
3235:/usr/include/c++/8/bits/basic_string.h **** 	_M_refdata() throw()
3236:/usr/include/c++/8/bits/basic_string.h **** 	{ return reinterpret_cast<_CharT*>(this + 1); }
3237:/usr/include/c++/8/bits/basic_string.h **** 
3238:/usr/include/c++/8/bits/basic_string.h **** 	_CharT*
3239:/usr/include/c++/8/bits/basic_string.h **** 	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
3240:/usr/include/c++/8/bits/basic_string.h **** 	{
3241:/usr/include/c++/8/bits/basic_string.h **** 	  return (!_M_is_leaked() && __alloc1 == __alloc2)
3242:/usr/include/c++/8/bits/basic_string.h **** 	          ? _M_refcopy() : _M_clone(__alloc1);
3243:/usr/include/c++/8/bits/basic_string.h **** 	}
3244:/usr/include/c++/8/bits/basic_string.h **** 
3245:/usr/include/c++/8/bits/basic_string.h **** 	// Create & Destroy
3246:/usr/include/c++/8/bits/basic_string.h **** 	static _Rep*
3247:/usr/include/c++/8/bits/basic_string.h **** 	_S_create(size_type, size_type, const _Alloc&);
3248:/usr/include/c++/8/bits/basic_string.h **** 
3249:/usr/include/c++/8/bits/basic_string.h **** 	void
3250:/usr/include/c++/8/bits/basic_string.h **** 	_M_dispose(const _Alloc& __a) _GLIBCXX_NOEXCEPT
3251:/usr/include/c++/8/bits/basic_string.h **** 	{
3252:/usr/include/c++/8/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3253:/usr/include/c++/8/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3254:/usr/include/c++/8/bits/basic_string.h **** #endif
3255:/usr/include/c++/8/bits/basic_string.h **** 	    {
3256:/usr/include/c++/8/bits/basic_string.h **** 	      // Be race-detector-friendly.  For more info see bits/c++config.
3257:/usr/include/c++/8/bits/basic_string.h **** 	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
3258:/usr/include/c++/8/bits/basic_string.h ****               // Decrement of _M_refcount is acq_rel, because:
3259:/usr/include/c++/8/bits/basic_string.h ****               // - all but last decrements need to release to synchronize with
3260:/usr/include/c++/8/bits/basic_string.h ****               //   the last decrement that will delete the object.
3261:/usr/include/c++/8/bits/basic_string.h ****               // - the last decrement needs to acquire to synchronize with
3262:/usr/include/c++/8/bits/basic_string.h ****               //   all the previous decrements.
3263:/usr/include/c++/8/bits/basic_string.h ****               // - last but one decrement needs to release to synchronize with
3264:/usr/include/c++/8/bits/basic_string.h ****               //   the acquire load in _M_is_shared that will conclude that
3265:/usr/include/c++/8/bits/basic_string.h ****               //   the object is not shared anymore.
3266:/usr/include/c++/8/bits/basic_string.h **** 	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
3267:/usr/include/c++/8/bits/basic_string.h **** 							 -1) <= 0)
3268:/usr/include/c++/8/bits/basic_string.h **** 		{
3269:/usr/include/c++/8/bits/basic_string.h **** 		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
3270:/usr/include/c++/8/bits/basic_string.h **** 		  _M_destroy(__a);
3271:/usr/include/c++/8/bits/basic_string.h **** 		}
3272:/usr/include/c++/8/bits/basic_string.h **** 	    }
3273:/usr/include/c++/8/bits/basic_string.h **** 	}  // XXX MT
3274:/usr/include/c++/8/bits/basic_string.h **** 
3275:/usr/include/c++/8/bits/basic_string.h **** 	void
3276:/usr/include/c++/8/bits/basic_string.h **** 	_M_destroy(const _Alloc&) throw();
3277:/usr/include/c++/8/bits/basic_string.h **** 
3278:/usr/include/c++/8/bits/basic_string.h **** 	_CharT*
3279:/usr/include/c++/8/bits/basic_string.h **** 	_M_refcopy() throw()
3280:/usr/include/c++/8/bits/basic_string.h **** 	{
3281:/usr/include/c++/8/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3282:/usr/include/c++/8/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3283:/usr/include/c++/8/bits/basic_string.h **** #endif
3284:/usr/include/c++/8/bits/basic_string.h ****             __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
3285:/usr/include/c++/8/bits/basic_string.h **** 	  return _M_refdata();
3286:/usr/include/c++/8/bits/basic_string.h **** 	}  // XXX MT
3287:/usr/include/c++/8/bits/basic_string.h **** 
3288:/usr/include/c++/8/bits/basic_string.h **** 	_CharT*
3289:/usr/include/c++/8/bits/basic_string.h **** 	_M_clone(const _Alloc&, size_type __res = 0);
3290:/usr/include/c++/8/bits/basic_string.h ****       };
3291:/usr/include/c++/8/bits/basic_string.h **** 
3292:/usr/include/c++/8/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
3293:/usr/include/c++/8/bits/basic_string.h ****       struct _Alloc_hider : _Alloc
3294:/usr/include/c++/8/bits/basic_string.h ****       {
3295:/usr/include/c++/8/bits/basic_string.h **** 	_Alloc_hider(_CharT* __dat, const _Alloc& __a) _GLIBCXX_NOEXCEPT
3296:/usr/include/c++/8/bits/basic_string.h **** 	: _Alloc(__a), _M_p(__dat) { }
3297:/usr/include/c++/8/bits/basic_string.h **** 
3298:/usr/include/c++/8/bits/basic_string.h **** 	_CharT* _M_p; // The actual data.
3299:/usr/include/c++/8/bits/basic_string.h ****       };
3300:/usr/include/c++/8/bits/basic_string.h **** 
3301:/usr/include/c++/8/bits/basic_string.h ****     public:
3302:/usr/include/c++/8/bits/basic_string.h ****       // Data Members (public):
3303:/usr/include/c++/8/bits/basic_string.h ****       // NB: This is an unsigned type, and thus represents the maximum
3304:/usr/include/c++/8/bits/basic_string.h ****       // size that the allocator can hold.
3305:/usr/include/c++/8/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
3306:/usr/include/c++/8/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
3307:/usr/include/c++/8/bits/basic_string.h **** 
3308:/usr/include/c++/8/bits/basic_string.h ****     private:
3309:/usr/include/c++/8/bits/basic_string.h ****       // Data Members (private):
3310:/usr/include/c++/8/bits/basic_string.h ****       mutable _Alloc_hider	_M_dataplus;
3311:/usr/include/c++/8/bits/basic_string.h **** 
3312:/usr/include/c++/8/bits/basic_string.h ****       _CharT*
3313:/usr/include/c++/8/bits/basic_string.h ****       _M_data() const _GLIBCXX_NOEXCEPT
3314:/usr/include/c++/8/bits/basic_string.h ****       { return  _M_dataplus._M_p; }
3315:/usr/include/c++/8/bits/basic_string.h **** 
3316:/usr/include/c++/8/bits/basic_string.h ****       _CharT*
3317:/usr/include/c++/8/bits/basic_string.h ****       _M_data(_CharT* __p) _GLIBCXX_NOEXCEPT
3318:/usr/include/c++/8/bits/basic_string.h ****       { return (_M_dataplus._M_p = __p); }
3319:/usr/include/c++/8/bits/basic_string.h **** 
3320:/usr/include/c++/8/bits/basic_string.h ****       _Rep*
3321:/usr/include/c++/8/bits/basic_string.h ****       _M_rep() const _GLIBCXX_NOEXCEPT
3322:/usr/include/c++/8/bits/basic_string.h ****       { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }
3323:/usr/include/c++/8/bits/basic_string.h **** 
3324:/usr/include/c++/8/bits/basic_string.h ****       // For the internal use we have functions similar to `begin'/`end'
3325:/usr/include/c++/8/bits/basic_string.h ****       // but they do not call _M_leak.
3326:/usr/include/c++/8/bits/basic_string.h ****       iterator
3327:/usr/include/c++/8/bits/basic_string.h ****       _M_ibegin() const _GLIBCXX_NOEXCEPT
3328:/usr/include/c++/8/bits/basic_string.h ****       { return iterator(_M_data()); }
3329:/usr/include/c++/8/bits/basic_string.h **** 
3330:/usr/include/c++/8/bits/basic_string.h ****       iterator
3331:/usr/include/c++/8/bits/basic_string.h ****       _M_iend() const _GLIBCXX_NOEXCEPT
3332:/usr/include/c++/8/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
3333:/usr/include/c++/8/bits/basic_string.h **** 
3334:/usr/include/c++/8/bits/basic_string.h ****       void
3335:/usr/include/c++/8/bits/basic_string.h ****       _M_leak()    // for use in begin() & non-const op[]
3336:/usr/include/c++/8/bits/basic_string.h ****       {
3337:/usr/include/c++/8/bits/basic_string.h **** 	if (!_M_rep()->_M_is_leaked())
3338:/usr/include/c++/8/bits/basic_string.h **** 	  _M_leak_hard();
3339:/usr/include/c++/8/bits/basic_string.h ****       }
3340:/usr/include/c++/8/bits/basic_string.h **** 
3341:/usr/include/c++/8/bits/basic_string.h ****       size_type
3342:/usr/include/c++/8/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
3343:/usr/include/c++/8/bits/basic_string.h ****       {
3344:/usr/include/c++/8/bits/basic_string.h **** 	if (__pos > this->size())
3345:/usr/include/c++/8/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
3346:/usr/include/c++/8/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
3347:/usr/include/c++/8/bits/basic_string.h **** 				   __s, __pos, this->size());
3348:/usr/include/c++/8/bits/basic_string.h **** 	return __pos;
3349:/usr/include/c++/8/bits/basic_string.h ****       }
3350:/usr/include/c++/8/bits/basic_string.h **** 
3351:/usr/include/c++/8/bits/basic_string.h ****       void
3352:/usr/include/c++/8/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
3353:/usr/include/c++/8/bits/basic_string.h ****       {
3354:/usr/include/c++/8/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
3355:/usr/include/c++/8/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
3356:/usr/include/c++/8/bits/basic_string.h ****       }
3357:/usr/include/c++/8/bits/basic_string.h **** 
3358:/usr/include/c++/8/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
3359:/usr/include/c++/8/bits/basic_string.h ****       size_type
3360:/usr/include/c++/8/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
3361:/usr/include/c++/8/bits/basic_string.h ****       {
3362:/usr/include/c++/8/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
3363:/usr/include/c++/8/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
3364:/usr/include/c++/8/bits/basic_string.h ****       }
3365:/usr/include/c++/8/bits/basic_string.h **** 
3366:/usr/include/c++/8/bits/basic_string.h ****       // True if _Rep and source do not overlap.
3367:/usr/include/c++/8/bits/basic_string.h ****       bool
3368:/usr/include/c++/8/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
3369:/usr/include/c++/8/bits/basic_string.h ****       {
3370:/usr/include/c++/8/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
3371:/usr/include/c++/8/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
3372:/usr/include/c++/8/bits/basic_string.h ****       }
3373:/usr/include/c++/8/bits/basic_string.h **** 
3374:/usr/include/c++/8/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
3375:/usr/include/c++/8/bits/basic_string.h ****       // traits_type::copy/move/assign.
3376:/usr/include/c++/8/bits/basic_string.h ****       static void
3377:/usr/include/c++/8/bits/basic_string.h ****       _M_copy(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
3378:/usr/include/c++/8/bits/basic_string.h ****       {
3379:/usr/include/c++/8/bits/basic_string.h **** 	if (__n == 1)
3380:/usr/include/c++/8/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
3381:/usr/include/c++/8/bits/basic_string.h **** 	else
3382:/usr/include/c++/8/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
3383:/usr/include/c++/8/bits/basic_string.h ****       }
3384:/usr/include/c++/8/bits/basic_string.h **** 
3385:/usr/include/c++/8/bits/basic_string.h ****       static void
3386:/usr/include/c++/8/bits/basic_string.h ****       _M_move(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
3387:/usr/include/c++/8/bits/basic_string.h ****       {
3388:/usr/include/c++/8/bits/basic_string.h **** 	if (__n == 1)
3389:/usr/include/c++/8/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
3390:/usr/include/c++/8/bits/basic_string.h **** 	else
3391:/usr/include/c++/8/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);	  
3392:/usr/include/c++/8/bits/basic_string.h ****       }
3393:/usr/include/c++/8/bits/basic_string.h **** 
3394:/usr/include/c++/8/bits/basic_string.h ****       static void
3395:/usr/include/c++/8/bits/basic_string.h ****       _M_assign(_CharT* __d, size_type __n, _CharT __c) _GLIBCXX_NOEXCEPT
3396:/usr/include/c++/8/bits/basic_string.h ****       {
3397:/usr/include/c++/8/bits/basic_string.h **** 	if (__n == 1)
3398:/usr/include/c++/8/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
3399:/usr/include/c++/8/bits/basic_string.h **** 	else
3400:/usr/include/c++/8/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);	  
3401:/usr/include/c++/8/bits/basic_string.h ****       }
3402:/usr/include/c++/8/bits/basic_string.h **** 
3403:/usr/include/c++/8/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
3404:/usr/include/c++/8/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
3405:/usr/include/c++/8/bits/basic_string.h ****       template<class _Iterator>
3406:/usr/include/c++/8/bits/basic_string.h ****         static void
3407:/usr/include/c++/8/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
3408:/usr/include/c++/8/bits/basic_string.h ****         {
3409:/usr/include/c++/8/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
3410:/usr/include/c++/8/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
3411:/usr/include/c++/8/bits/basic_string.h **** 	}
3412:/usr/include/c++/8/bits/basic_string.h **** 
3413:/usr/include/c++/8/bits/basic_string.h ****       static void
3414:/usr/include/c++/8/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
3415:/usr/include/c++/8/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
3416:/usr/include/c++/8/bits/basic_string.h **** 
3417:/usr/include/c++/8/bits/basic_string.h ****       static void
3418:/usr/include/c++/8/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
3419:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
3420:/usr/include/c++/8/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
3421:/usr/include/c++/8/bits/basic_string.h **** 
3422:/usr/include/c++/8/bits/basic_string.h ****       static void
3423:/usr/include/c++/8/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
3424:/usr/include/c++/8/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
3425:/usr/include/c++/8/bits/basic_string.h **** 
3426:/usr/include/c++/8/bits/basic_string.h ****       static void
3427:/usr/include/c++/8/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
3428:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
3429:/usr/include/c++/8/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
3430:/usr/include/c++/8/bits/basic_string.h **** 
3431:/usr/include/c++/8/bits/basic_string.h ****       static int
3432:/usr/include/c++/8/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
3433:/usr/include/c++/8/bits/basic_string.h ****       {
3434:/usr/include/c++/8/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
3435:/usr/include/c++/8/bits/basic_string.h **** 
3436:/usr/include/c++/8/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
3437:/usr/include/c++/8/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
3438:/usr/include/c++/8/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
3439:/usr/include/c++/8/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
3440:/usr/include/c++/8/bits/basic_string.h **** 	else
3441:/usr/include/c++/8/bits/basic_string.h **** 	  return int(__d);
3442:/usr/include/c++/8/bits/basic_string.h ****       }
3443:/usr/include/c++/8/bits/basic_string.h **** 
3444:/usr/include/c++/8/bits/basic_string.h ****       void
3445:/usr/include/c++/8/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, size_type __len2);
3446:/usr/include/c++/8/bits/basic_string.h **** 
3447:/usr/include/c++/8/bits/basic_string.h ****       void
3448:/usr/include/c++/8/bits/basic_string.h ****       _M_leak_hard();
3449:/usr/include/c++/8/bits/basic_string.h **** 
3450:/usr/include/c++/8/bits/basic_string.h ****       static _Rep&
3451:/usr/include/c++/8/bits/basic_string.h ****       _S_empty_rep() _GLIBCXX_NOEXCEPT
3452:/usr/include/c++/8/bits/basic_string.h ****       { return _Rep::_S_empty_rep(); }
3453:/usr/include/c++/8/bits/basic_string.h **** 
3454:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
3455:/usr/include/c++/8/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
3456:/usr/include/c++/8/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
3457:/usr/include/c++/8/bits/basic_string.h **** 
3458:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp, typename _Res>
3459:/usr/include/c++/8/bits/basic_string.h **** 	using _If_sv = enable_if_t<
3460:/usr/include/c++/8/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
3461:/usr/include/c++/8/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
3462:/usr/include/c++/8/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
3463:/usr/include/c++/8/bits/basic_string.h **** 	  _Res>;
3464:/usr/include/c++/8/bits/basic_string.h **** 
3465:/usr/include/c++/8/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
3466:/usr/include/c++/8/bits/basic_string.h ****       static __sv_type
3467:/usr/include/c++/8/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
3468:/usr/include/c++/8/bits/basic_string.h ****       { return __svt; }
3469:/usr/include/c++/8/bits/basic_string.h **** 
3470:/usr/include/c++/8/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
3471:/usr/include/c++/8/bits/basic_string.h ****       // allows to add an internal constructor that does not
3472:/usr/include/c++/8/bits/basic_string.h ****       // participate in overload resolution when a string_view
3473:/usr/include/c++/8/bits/basic_string.h ****       // is provided.
3474:/usr/include/c++/8/bits/basic_string.h ****       struct __sv_wrapper
3475:/usr/include/c++/8/bits/basic_string.h ****       {
3476:/usr/include/c++/8/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
3477:/usr/include/c++/8/bits/basic_string.h **** 	__sv_type _M_sv;
3478:/usr/include/c++/8/bits/basic_string.h ****       };
3479:/usr/include/c++/8/bits/basic_string.h **** #endif
3480:/usr/include/c++/8/bits/basic_string.h **** 
3481:/usr/include/c++/8/bits/basic_string.h ****     public:
3482:/usr/include/c++/8/bits/basic_string.h ****       // Construct/copy/destroy:
3483:/usr/include/c++/8/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
3484:/usr/include/c++/8/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
3485:/usr/include/c++/8/bits/basic_string.h **** 
3486:/usr/include/c++/8/bits/basic_string.h ****       /**
3487:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
3488:/usr/include/c++/8/bits/basic_string.h ****        */
3489:/usr/include/c++/8/bits/basic_string.h ****       basic_string()
3490:/usr/include/c++/8/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3491:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }
3492:/usr/include/c++/8/bits/basic_string.h **** #else
3493:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }
3494:/usr/include/c++/8/bits/basic_string.h **** #endif
3495:/usr/include/c++/8/bits/basic_string.h **** 
3496:/usr/include/c++/8/bits/basic_string.h ****       /**
3497:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
3498:/usr/include/c++/8/bits/basic_string.h ****        */
3499:/usr/include/c++/8/bits/basic_string.h ****       explicit
3500:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const _Alloc& __a);
3501:/usr/include/c++/8/bits/basic_string.h **** 
3502:/usr/include/c++/8/bits/basic_string.h ****       // NB: per LWG issue 42, semantics different from IS:
3503:/usr/include/c++/8/bits/basic_string.h ****       /**
3504:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a str.
3505:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
3506:/usr/include/c++/8/bits/basic_string.h ****        */
3507:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const basic_string& __str);
3508:/usr/include/c++/8/bits/basic_string.h **** 
3509:/usr/include/c++/8/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
3510:/usr/include/c++/8/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
3511:/usr/include/c++/8/bits/basic_string.h ****       /**
3512:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3513:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
3514:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3515:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3516:/usr/include/c++/8/bits/basic_string.h ****        */
3517:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3518:/usr/include/c++/8/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
3519:/usr/include/c++/8/bits/basic_string.h **** 
3520:/usr/include/c++/8/bits/basic_string.h ****       /**
3521:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3522:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
3523:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3524:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3525:/usr/include/c++/8/bits/basic_string.h ****        */
3526:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3527:/usr/include/c++/8/bits/basic_string.h **** 		   size_type __n);
3528:/usr/include/c++/8/bits/basic_string.h ****       /**
3529:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3530:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
3531:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3532:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3533:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3534:/usr/include/c++/8/bits/basic_string.h ****        */
3535:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3536:/usr/include/c++/8/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a);
3537:/usr/include/c++/8/bits/basic_string.h **** 
3538:/usr/include/c++/8/bits/basic_string.h ****       /**
3539:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
3540:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __s  Source character %array.
3541:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3542:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3543:/usr/include/c++/8/bits/basic_string.h ****        *
3544:/usr/include/c++/8/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
3545:/usr/include/c++/8/bits/basic_string.h ****        *  has no special meaning.
3546:/usr/include/c++/8/bits/basic_string.h ****        */
3547:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
3548:/usr/include/c++/8/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
3549:/usr/include/c++/8/bits/basic_string.h ****       /**
3550:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
3551:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __s  Source C string.
3552:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3553:/usr/include/c++/8/bits/basic_string.h ****        */
3554:/usr/include/c++/8/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());
3555:/usr/include/c++/8/bits/basic_string.h ****       /**
3556:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
3557:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n  Number of characters.
3558:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __c  Character to use.
3559:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3560:/usr/include/c++/8/bits/basic_string.h ****        */
3561:/usr/include/c++/8/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
3562:/usr/include/c++/8/bits/basic_string.h **** 
3563:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
3564:/usr/include/c++/8/bits/basic_string.h ****       /**
3565:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Move construct string.
3566:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
3567:/usr/include/c++/8/bits/basic_string.h ****        *
3568:/usr/include/c++/8/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
3569:/usr/include/c++/8/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
3570:/usr/include/c++/8/bits/basic_string.h ****        **/
3571:/usr/include/c++/8/bits/basic_string.h ****       basic_string(basic_string&& __str)
3572:/usr/include/c++/8/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3573:/usr/include/c++/8/bits/basic_string.h ****       noexcept // FIXME C++11: should always be noexcept.
3574:/usr/include/c++/8/bits/basic_string.h **** #endif
3575:/usr/include/c++/8/bits/basic_string.h ****       : _M_dataplus(__str._M_dataplus)
3576:/usr/include/c++/8/bits/basic_string.h ****       {
3577:/usr/include/c++/8/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3578:/usr/include/c++/8/bits/basic_string.h **** 	__str._M_data(_S_empty_rep()._M_refdata());
3579:/usr/include/c++/8/bits/basic_string.h **** #else
3580:/usr/include/c++/8/bits/basic_string.h **** 	__str._M_data(_S_construct(size_type(), _CharT(), get_allocator()));
3581:/usr/include/c++/8/bits/basic_string.h **** #endif
3582:/usr/include/c++/8/bits/basic_string.h ****       }
3583:/usr/include/c++/8/bits/basic_string.h **** 
3584:/usr/include/c++/8/bits/basic_string.h ****       /**
3585:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
3586:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
3587:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3588:/usr/include/c++/8/bits/basic_string.h ****        */
3589:/usr/include/c++/8/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
3590:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
3591:/usr/include/c++/8/bits/basic_string.h **** 
3592:/usr/include/c++/8/bits/basic_string.h ****       /**
3593:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
3594:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __beg  Start of range.
3595:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __end  End of range.
3596:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3597:/usr/include/c++/8/bits/basic_string.h ****        */
3598:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator>
3599:/usr/include/c++/8/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
3600:/usr/include/c++/8/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc());
3601:/usr/include/c++/8/bits/basic_string.h **** 
3602:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
3603:/usr/include/c++/8/bits/basic_string.h ****       /**
3604:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
3605:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
3606:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
3607:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
3608:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a   Allocator to use.
3609:/usr/include/c++/8/bits/basic_string.h ****        */
3610:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
3611:/usr/include/c++/8/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
3612:/usr/include/c++/8/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
3613:/usr/include/c++/8/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
3614:/usr/include/c++/8/bits/basic_string.h **** 
3615:/usr/include/c++/8/bits/basic_string.h ****       /**
3616:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
3617:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
3618:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3619:/usr/include/c++/8/bits/basic_string.h ****        */
3620:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
3621:/usr/include/c++/8/bits/basic_string.h **** 	explicit
3622:/usr/include/c++/8/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
3623:/usr/include/c++/8/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
3624:/usr/include/c++/8/bits/basic_string.h **** 
3625:/usr/include/c++/8/bits/basic_string.h ****       /**
3626:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
3627:/usr/include/c++/8/bits/basic_string.h ****        *          wrapper.
3628:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
3629:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3630:/usr/include/c++/8/bits/basic_string.h ****        */
3631:/usr/include/c++/8/bits/basic_string.h ****       explicit
3632:/usr/include/c++/8/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
3633:/usr/include/c++/8/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
3634:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
3635:/usr/include/c++/8/bits/basic_string.h **** 
3636:/usr/include/c++/8/bits/basic_string.h ****       /**
3637:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Destroy the string instance.
3638:/usr/include/c++/8/bits/basic_string.h ****        */
3639:/usr/include/c++/8/bits/basic_string.h ****       ~basic_string() _GLIBCXX_NOEXCEPT
3640:/usr/include/c++/8/bits/basic_string.h ****       { _M_rep()->_M_dispose(this->get_allocator()); }
3641:/usr/include/c++/8/bits/basic_string.h **** 
3642:/usr/include/c++/8/bits/basic_string.h ****       /**
3643:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
3644:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
3645:/usr/include/c++/8/bits/basic_string.h ****        */
3646:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
3647:/usr/include/c++/8/bits/basic_string.h ****       operator=(const basic_string& __str) 
3648:/usr/include/c++/8/bits/basic_string.h ****       { return this->assign(__str); }
3649:/usr/include/c++/8/bits/basic_string.h **** 
3650:/usr/include/c++/8/bits/basic_string.h ****       /**
3651:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
3652:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
3653:/usr/include/c++/8/bits/basic_string.h ****        */
3654:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
3655:/usr/include/c++/8/bits/basic_string.h ****       operator=(const _CharT* __s) 
3656:/usr/include/c++/8/bits/basic_string.h ****       { return this->assign(__s); }
3657:/usr/include/c++/8/bits/basic_string.h **** 
3658:/usr/include/c++/8/bits/basic_string.h ****       /**
3659:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
3660:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __c  Source character.
3661:/usr/include/c++/8/bits/basic_string.h ****        *
3662:/usr/include/c++/8/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
3663:/usr/include/c++/8/bits/basic_string.h ****        *  (*this)[0] == @a c.
3664:/usr/include/c++/8/bits/basic_string.h ****        */
3665:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
3666:/usr/include/c++/8/bits/basic_string.h ****       operator=(_CharT __c) 
3667:/usr/include/c++/8/bits/basic_string.h ****       { 
3668:/usr/include/c++/8/bits/basic_string.h **** 	this->assign(1, __c); 
3669:/usr/include/c++/8/bits/basic_string.h **** 	return *this;
3670:/usr/include/c++/8/bits/basic_string.h ****       }
3671:/usr/include/c++/8/bits/basic_string.h **** 
3672:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
3673:/usr/include/c++/8/bits/basic_string.h ****       /**
3674:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
3675:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string.
3676:/usr/include/c++/8/bits/basic_string.h ****        *
3677:/usr/include/c++/8/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
3678:/usr/include/c++/8/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
3679:/usr/include/c++/8/bits/basic_string.h ****        **/
3680:/usr/include/c++/8/bits/basic_string.h ****       // PR 58265, this should be noexcept.
3681:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
3682:/usr/include/c++/8/bits/basic_string.h ****       operator=(basic_string&& __str)
3683:/usr/include/c++/8/bits/basic_string.h ****       {
3684:/usr/include/c++/8/bits/basic_string.h **** 	// NB: DR 1204.
3685:/usr/include/c++/8/bits/basic_string.h **** 	this->swap(__str);
3686:/usr/include/c++/8/bits/basic_string.h **** 	return *this;
3687:/usr/include/c++/8/bits/basic_string.h ****       }
3688:/usr/include/c++/8/bits/basic_string.h **** 
3689:/usr/include/c++/8/bits/basic_string.h ****       /**
3690:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
3691:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
3692:/usr/include/c++/8/bits/basic_string.h ****        */
3693:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
3694:/usr/include/c++/8/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
3695:/usr/include/c++/8/bits/basic_string.h ****       {
3696:/usr/include/c++/8/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
3697:/usr/include/c++/8/bits/basic_string.h **** 	return *this;
3698:/usr/include/c++/8/bits/basic_string.h ****       }
3699:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
3700:/usr/include/c++/8/bits/basic_string.h **** 
3701:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
3702:/usr/include/c++/8/bits/basic_string.h ****       /**
3703:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
3704:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __svt An object convertible to  string_view.
3705:/usr/include/c++/8/bits/basic_string.h ****        */
3706:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
3707:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
3708:/usr/include/c++/8/bits/basic_string.h **** 	operator=(const _Tp& __svt)
3709:/usr/include/c++/8/bits/basic_string.h **** 	{ return this->assign(__svt); }
3710:/usr/include/c++/8/bits/basic_string.h **** 
3711:/usr/include/c++/8/bits/basic_string.h ****       /**
3712:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Convert to a string_view.
3713:/usr/include/c++/8/bits/basic_string.h ****        *  @return A string_view.
3714:/usr/include/c++/8/bits/basic_string.h ****        */
3715:/usr/include/c++/8/bits/basic_string.h ****       operator __sv_type() const noexcept
3716:/usr/include/c++/8/bits/basic_string.h ****       { return __sv_type(data(), size()); }
3717:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
3718:/usr/include/c++/8/bits/basic_string.h **** 
3719:/usr/include/c++/8/bits/basic_string.h ****       // Iterators:
3720:/usr/include/c++/8/bits/basic_string.h ****       /**
3721:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
3722:/usr/include/c++/8/bits/basic_string.h ****        *  the %string.  Unshares the string.
3723:/usr/include/c++/8/bits/basic_string.h ****        */
3724:/usr/include/c++/8/bits/basic_string.h ****       iterator
3725:/usr/include/c++/8/bits/basic_string.h ****       begin() // FIXME C++11: should be noexcept.
3726:/usr/include/c++/8/bits/basic_string.h ****       {
3727:/usr/include/c++/8/bits/basic_string.h **** 	_M_leak();
3728:/usr/include/c++/8/bits/basic_string.h **** 	return iterator(_M_data());
3729:/usr/include/c++/8/bits/basic_string.h ****       }
3730:/usr/include/c++/8/bits/basic_string.h **** 
3731:/usr/include/c++/8/bits/basic_string.h ****       /**
3732:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3733:/usr/include/c++/8/bits/basic_string.h ****        *  character in the %string.
3734:/usr/include/c++/8/bits/basic_string.h ****        */
3735:/usr/include/c++/8/bits/basic_string.h ****       const_iterator
3736:/usr/include/c++/8/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
3737:/usr/include/c++/8/bits/basic_string.h ****       { return const_iterator(_M_data()); }
3738:/usr/include/c++/8/bits/basic_string.h **** 
3739:/usr/include/c++/8/bits/basic_string.h ****       /**
3740:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
3741:/usr/include/c++/8/bits/basic_string.h ****        *  character in the %string.  Unshares the string.
3742:/usr/include/c++/8/bits/basic_string.h ****        */
3743:/usr/include/c++/8/bits/basic_string.h ****       iterator
3744:/usr/include/c++/8/bits/basic_string.h ****       end() // FIXME C++11: should be noexcept.
3745:/usr/include/c++/8/bits/basic_string.h ****       {
3746:/usr/include/c++/8/bits/basic_string.h **** 	_M_leak();
3747:/usr/include/c++/8/bits/basic_string.h **** 	return iterator(_M_data() + this->size());
3748:/usr/include/c++/8/bits/basic_string.h ****       }
3749:/usr/include/c++/8/bits/basic_string.h **** 
3750:/usr/include/c++/8/bits/basic_string.h ****       /**
3751:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3752:/usr/include/c++/8/bits/basic_string.h ****        *  last character in the %string.
3753:/usr/include/c++/8/bits/basic_string.h ****        */
3754:/usr/include/c++/8/bits/basic_string.h ****       const_iterator
3755:/usr/include/c++/8/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
3756:/usr/include/c++/8/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
3757:/usr/include/c++/8/bits/basic_string.h **** 
3758:/usr/include/c++/8/bits/basic_string.h ****       /**
3759:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
3760:/usr/include/c++/8/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
3761:/usr/include/c++/8/bits/basic_string.h ****        *  order.  Unshares the string.
3762:/usr/include/c++/8/bits/basic_string.h ****        */
3763:/usr/include/c++/8/bits/basic_string.h ****       reverse_iterator
3764:/usr/include/c++/8/bits/basic_string.h ****       rbegin() // FIXME C++11: should be noexcept.
3765:/usr/include/c++/8/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
3766:/usr/include/c++/8/bits/basic_string.h **** 
3767:/usr/include/c++/8/bits/basic_string.h ****       /**
3768:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3769:/usr/include/c++/8/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3770:/usr/include/c++/8/bits/basic_string.h ****        *  reverse element order.
3771:/usr/include/c++/8/bits/basic_string.h ****        */
3772:/usr/include/c++/8/bits/basic_string.h ****       const_reverse_iterator
3773:/usr/include/c++/8/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
3774:/usr/include/c++/8/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3775:/usr/include/c++/8/bits/basic_string.h **** 
3776:/usr/include/c++/8/bits/basic_string.h ****       /**
3777:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
3778:/usr/include/c++/8/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
3779:/usr/include/c++/8/bits/basic_string.h ****        *  element order.  Unshares the string.
3780:/usr/include/c++/8/bits/basic_string.h ****        */
3781:/usr/include/c++/8/bits/basic_string.h ****       reverse_iterator
3782:/usr/include/c++/8/bits/basic_string.h ****       rend() // FIXME C++11: should be noexcept.
3783:/usr/include/c++/8/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
3784:/usr/include/c++/8/bits/basic_string.h **** 
3785:/usr/include/c++/8/bits/basic_string.h ****       /**
3786:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3787:/usr/include/c++/8/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3788:/usr/include/c++/8/bits/basic_string.h ****        *  is done in reverse element order.
3789:/usr/include/c++/8/bits/basic_string.h ****        */
3790:/usr/include/c++/8/bits/basic_string.h ****       const_reverse_iterator
3791:/usr/include/c++/8/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
3792:/usr/include/c++/8/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3793:/usr/include/c++/8/bits/basic_string.h **** 
3794:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
3795:/usr/include/c++/8/bits/basic_string.h ****       /**
3796:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3797:/usr/include/c++/8/bits/basic_string.h ****        *  character in the %string.
3798:/usr/include/c++/8/bits/basic_string.h ****        */
3799:/usr/include/c++/8/bits/basic_string.h ****       const_iterator
3800:/usr/include/c++/8/bits/basic_string.h ****       cbegin() const noexcept
3801:/usr/include/c++/8/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
3802:/usr/include/c++/8/bits/basic_string.h **** 
3803:/usr/include/c++/8/bits/basic_string.h ****       /**
3804:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3805:/usr/include/c++/8/bits/basic_string.h ****        *  last character in the %string.
3806:/usr/include/c++/8/bits/basic_string.h ****        */
3807:/usr/include/c++/8/bits/basic_string.h ****       const_iterator
3808:/usr/include/c++/8/bits/basic_string.h ****       cend() const noexcept
3809:/usr/include/c++/8/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
3810:/usr/include/c++/8/bits/basic_string.h **** 
3811:/usr/include/c++/8/bits/basic_string.h ****       /**
3812:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3813:/usr/include/c++/8/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3814:/usr/include/c++/8/bits/basic_string.h ****        *  reverse element order.
3815:/usr/include/c++/8/bits/basic_string.h ****        */
3816:/usr/include/c++/8/bits/basic_string.h ****       const_reverse_iterator
3817:/usr/include/c++/8/bits/basic_string.h ****       crbegin() const noexcept
3818:/usr/include/c++/8/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3819:/usr/include/c++/8/bits/basic_string.h **** 
3820:/usr/include/c++/8/bits/basic_string.h ****       /**
3821:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3822:/usr/include/c++/8/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3823:/usr/include/c++/8/bits/basic_string.h ****        *  is done in reverse element order.
3824:/usr/include/c++/8/bits/basic_string.h ****        */
3825:/usr/include/c++/8/bits/basic_string.h ****       const_reverse_iterator
3826:/usr/include/c++/8/bits/basic_string.h ****       crend() const noexcept
3827:/usr/include/c++/8/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3828:/usr/include/c++/8/bits/basic_string.h **** #endif
3829:/usr/include/c++/8/bits/basic_string.h **** 
3830:/usr/include/c++/8/bits/basic_string.h ****     public:
3831:/usr/include/c++/8/bits/basic_string.h ****       // Capacity:
3832:/usr/include/c++/8/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3833:/usr/include/c++/8/bits/basic_string.h ****       ///  null-termination.
3834:/usr/include/c++/8/bits/basic_string.h ****       size_type
3835:/usr/include/c++/8/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
3836:/usr/include/c++/8/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3837:/usr/include/c++/8/bits/basic_string.h **** 
3838:/usr/include/c++/8/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3839:/usr/include/c++/8/bits/basic_string.h ****       ///  null-termination.
3840:/usr/include/c++/8/bits/basic_string.h ****       size_type
3841:/usr/include/c++/8/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
3842:/usr/include/c++/8/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3843:/usr/include/c++/8/bits/basic_string.h **** 
3844:/usr/include/c++/8/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
3845:/usr/include/c++/8/bits/basic_string.h ****       size_type
3846:/usr/include/c++/8/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
3847:/usr/include/c++/8/bits/basic_string.h ****       { return _Rep::_S_max_size; }
3848:/usr/include/c++/8/bits/basic_string.h **** 
3849:/usr/include/c++/8/bits/basic_string.h ****       /**
3850:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3851:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3852:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
3853:/usr/include/c++/8/bits/basic_string.h ****        *
3854:/usr/include/c++/8/bits/basic_string.h ****        *  This function will %resize the %string to the specified
3855:/usr/include/c++/8/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
3856:/usr/include/c++/8/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
3857:/usr/include/c++/8/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
3858:/usr/include/c++/8/bits/basic_string.h ****        */
3859:/usr/include/c++/8/bits/basic_string.h ****       void
3860:/usr/include/c++/8/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
3861:/usr/include/c++/8/bits/basic_string.h **** 
3862:/usr/include/c++/8/bits/basic_string.h ****       /**
3863:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3864:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3865:/usr/include/c++/8/bits/basic_string.h ****        *
3866:/usr/include/c++/8/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
3867:/usr/include/c++/8/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
3868:/usr/include/c++/8/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
3869:/usr/include/c++/8/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
3870:/usr/include/c++/8/bits/basic_string.h ****        *  setting them to 0.
3871:/usr/include/c++/8/bits/basic_string.h ****        */
3872:/usr/include/c++/8/bits/basic_string.h ****       void
3873:/usr/include/c++/8/bits/basic_string.h ****       resize(size_type __n)
3874:/usr/include/c++/8/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
3875:/usr/include/c++/8/bits/basic_string.h **** 
3876:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
3877:/usr/include/c++/8/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
3878:/usr/include/c++/8/bits/basic_string.h ****       void
3879:/usr/include/c++/8/bits/basic_string.h ****       shrink_to_fit() _GLIBCXX_NOEXCEPT
3880:/usr/include/c++/8/bits/basic_string.h ****       {
3881:/usr/include/c++/8/bits/basic_string.h **** #if __cpp_exceptions
3882:/usr/include/c++/8/bits/basic_string.h **** 	if (capacity() > size())
3883:/usr/include/c++/8/bits/basic_string.h **** 	  {
3884:/usr/include/c++/8/bits/basic_string.h **** 	    try
3885:/usr/include/c++/8/bits/basic_string.h **** 	      { reserve(0); }
3886:/usr/include/c++/8/bits/basic_string.h **** 	    catch(...)
3887:/usr/include/c++/8/bits/basic_string.h **** 	      { }
3888:/usr/include/c++/8/bits/basic_string.h **** 	  }
3889:/usr/include/c++/8/bits/basic_string.h **** #endif
3890:/usr/include/c++/8/bits/basic_string.h ****       }
3891:/usr/include/c++/8/bits/basic_string.h **** #endif
3892:/usr/include/c++/8/bits/basic_string.h **** 
3893:/usr/include/c++/8/bits/basic_string.h ****       /**
3894:/usr/include/c++/8/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
3895:/usr/include/c++/8/bits/basic_string.h ****        *  before needing to allocate more memory.
3896:/usr/include/c++/8/bits/basic_string.h ****        */
3897:/usr/include/c++/8/bits/basic_string.h ****       size_type
3898:/usr/include/c++/8/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
3899:/usr/include/c++/8/bits/basic_string.h ****       { return _M_rep()->_M_capacity; }
3900:/usr/include/c++/8/bits/basic_string.h **** 
3901:/usr/include/c++/8/bits/basic_string.h ****       /**
3902:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
3903:/usr/include/c++/8/bits/basic_string.h ****        *          characters.
3904:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
3905:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
3906:/usr/include/c++/8/bits/basic_string.h ****        *
3907:/usr/include/c++/8/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
3908:/usr/include/c++/8/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
3909:/usr/include/c++/8/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
3910:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.
3911:/usr/include/c++/8/bits/basic_string.h ****        *
3912:/usr/include/c++/8/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
3913:/usr/include/c++/8/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
3914:/usr/include/c++/8/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
3915:/usr/include/c++/8/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
3916:/usr/include/c++/8/bits/basic_string.h ****        *  data.
3917:/usr/include/c++/8/bits/basic_string.h ****        */
3918:/usr/include/c++/8/bits/basic_string.h ****       void
3919:/usr/include/c++/8/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
3920:/usr/include/c++/8/bits/basic_string.h **** 
3921:/usr/include/c++/8/bits/basic_string.h ****       /**
3922:/usr/include/c++/8/bits/basic_string.h ****        *  Erases the string, making it empty.
3923:/usr/include/c++/8/bits/basic_string.h ****        */
3924:/usr/include/c++/8/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3925:/usr/include/c++/8/bits/basic_string.h ****       void
3926:/usr/include/c++/8/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
3927:/usr/include/c++/8/bits/basic_string.h ****       {
3928:/usr/include/c++/8/bits/basic_string.h **** 	if (_M_rep()->_M_is_shared())
3929:/usr/include/c++/8/bits/basic_string.h **** 	  {
3930:/usr/include/c++/8/bits/basic_string.h **** 	    _M_rep()->_M_dispose(this->get_allocator());
3931:/usr/include/c++/8/bits/basic_string.h **** 	    _M_data(_S_empty_rep()._M_refdata());
3932:/usr/include/c++/8/bits/basic_string.h **** 	  }
3933:/usr/include/c++/8/bits/basic_string.h **** 	else
3934:/usr/include/c++/8/bits/basic_string.h **** 	  _M_rep()->_M_set_length_and_sharable(0);
3935:/usr/include/c++/8/bits/basic_string.h ****       }
3936:/usr/include/c++/8/bits/basic_string.h **** #else
3937:/usr/include/c++/8/bits/basic_string.h ****       // PR 56166: this should not throw.
3938:/usr/include/c++/8/bits/basic_string.h ****       void
3939:/usr/include/c++/8/bits/basic_string.h ****       clear()
3940:/usr/include/c++/8/bits/basic_string.h ****       { _M_mutate(0, this->size(), 0); }
3941:/usr/include/c++/8/bits/basic_string.h **** #endif
3942:/usr/include/c++/8/bits/basic_string.h **** 
3943:/usr/include/c++/8/bits/basic_string.h ****       /**
3944:/usr/include/c++/8/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
3945:/usr/include/c++/8/bits/basic_string.h ****        *  <code>*this == ""</code>.
3946:/usr/include/c++/8/bits/basic_string.h ****        */
3947:/usr/include/c++/8/bits/basic_string.h ****       bool
3948:/usr/include/c++/8/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
3949:/usr/include/c++/8/bits/basic_string.h ****       { return this->size() == 0; }
3950:/usr/include/c++/8/bits/basic_string.h **** 
3951:/usr/include/c++/8/bits/basic_string.h ****       // Element access:
3952:/usr/include/c++/8/bits/basic_string.h ****       /**
3953:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
3954:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
3955:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
3956:/usr/include/c++/8/bits/basic_string.h ****        *
3957:/usr/include/c++/8/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
3958:/usr/include/c++/8/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
3959:/usr/include/c++/8/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
3960:/usr/include/c++/8/bits/basic_string.h ****        *  see at().)
3961:/usr/include/c++/8/bits/basic_string.h ****        */
3962:/usr/include/c++/8/bits/basic_string.h ****       const_reference
3963:/usr/include/c++/8/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
3964:/usr/include/c++/8/bits/basic_string.h ****       {
3965:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
3966:/usr/include/c++/8/bits/basic_string.h **** 	return _M_data()[__pos];
3967:/usr/include/c++/8/bits/basic_string.h ****       }
3968:/usr/include/c++/8/bits/basic_string.h **** 
3969:/usr/include/c++/8/bits/basic_string.h ****       /**
3970:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
3971:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
3972:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Read/write reference to the character.
3973:/usr/include/c++/8/bits/basic_string.h ****        *
3974:/usr/include/c++/8/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
3975:/usr/include/c++/8/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
3976:/usr/include/c++/8/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
3977:/usr/include/c++/8/bits/basic_string.h ****        *  see at().)  Unshares the string.
3978:/usr/include/c++/8/bits/basic_string.h ****        */
3979:/usr/include/c++/8/bits/basic_string.h ****       reference
3980:/usr/include/c++/8/bits/basic_string.h ****       operator[](size_type __pos)
3981:/usr/include/c++/8/bits/basic_string.h ****       {
3982:/usr/include/c++/8/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
3983:/usr/include/c++/8/bits/basic_string.h **** 	// and in C++11 mode.
3984:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
3985:/usr/include/c++/8/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
3986:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
3987:/usr/include/c++/8/bits/basic_string.h **** 	_M_leak();
3988:/usr/include/c++/8/bits/basic_string.h **** 	return _M_data()[__pos];
3989:/usr/include/c++/8/bits/basic_string.h ****       }
3990:/usr/include/c++/8/bits/basic_string.h **** 
3991:/usr/include/c++/8/bits/basic_string.h ****       /**
3992:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
3993:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n The index of the character to access.
3994:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
3995:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
3996:/usr/include/c++/8/bits/basic_string.h ****        *
3997:/usr/include/c++/8/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
3998:/usr/include/c++/8/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
3999:/usr/include/c++/8/bits/basic_string.h ****        *  throws out_of_range if the check fails.
4000:/usr/include/c++/8/bits/basic_string.h ****        */
4001:/usr/include/c++/8/bits/basic_string.h ****       const_reference
4002:/usr/include/c++/8/bits/basic_string.h ****       at(size_type __n) const
4003:/usr/include/c++/8/bits/basic_string.h ****       {
4004:/usr/include/c++/8/bits/basic_string.h **** 	if (__n >= this->size())
4005:/usr/include/c++/8/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
4006:/usr/include/c++/8/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
4007:/usr/include/c++/8/bits/basic_string.h **** 				       "(which is %zu)"),
4008:/usr/include/c++/8/bits/basic_string.h **** 				   __n, this->size());
4009:/usr/include/c++/8/bits/basic_string.h **** 	return _M_data()[__n];
4010:/usr/include/c++/8/bits/basic_string.h ****       }
4011:/usr/include/c++/8/bits/basic_string.h **** 
4012:/usr/include/c++/8/bits/basic_string.h ****       /**
4013:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
4014:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n The index of the character to access.
4015:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Read/write reference to the character.
4016:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
4017:/usr/include/c++/8/bits/basic_string.h ****        *
4018:/usr/include/c++/8/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
4019:/usr/include/c++/8/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
4020:/usr/include/c++/8/bits/basic_string.h ****        *  throws out_of_range if the check fails.  Success results in
4021:/usr/include/c++/8/bits/basic_string.h ****        *  unsharing the string.
4022:/usr/include/c++/8/bits/basic_string.h ****        */
4023:/usr/include/c++/8/bits/basic_string.h ****       reference
4024:/usr/include/c++/8/bits/basic_string.h ****       at(size_type __n)
4025:/usr/include/c++/8/bits/basic_string.h ****       {
4026:/usr/include/c++/8/bits/basic_string.h **** 	if (__n >= size())
4027:/usr/include/c++/8/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
4028:/usr/include/c++/8/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
4029:/usr/include/c++/8/bits/basic_string.h **** 				       "(which is %zu)"),
4030:/usr/include/c++/8/bits/basic_string.h **** 				   __n, this->size());
4031:/usr/include/c++/8/bits/basic_string.h **** 	_M_leak();
4032:/usr/include/c++/8/bits/basic_string.h **** 	return _M_data()[__n];
4033:/usr/include/c++/8/bits/basic_string.h ****       }
4034:/usr/include/c++/8/bits/basic_string.h **** 
4035:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
4036:/usr/include/c++/8/bits/basic_string.h ****       /**
4037:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
4038:/usr/include/c++/8/bits/basic_string.h ****        *  element of the %string.
4039:/usr/include/c++/8/bits/basic_string.h ****        */
4040:/usr/include/c++/8/bits/basic_string.h ****       reference
4041:/usr/include/c++/8/bits/basic_string.h ****       front()
4042:/usr/include/c++/8/bits/basic_string.h ****       {
4043:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4044:/usr/include/c++/8/bits/basic_string.h **** 	return operator[](0);
4045:/usr/include/c++/8/bits/basic_string.h ****       }
4046:/usr/include/c++/8/bits/basic_string.h **** 
4047:/usr/include/c++/8/bits/basic_string.h ****       /**
4048:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
4049:/usr/include/c++/8/bits/basic_string.h ****        *  element of the %string.
4050:/usr/include/c++/8/bits/basic_string.h ****        */
4051:/usr/include/c++/8/bits/basic_string.h ****       const_reference
4052:/usr/include/c++/8/bits/basic_string.h ****       front() const noexcept
4053:/usr/include/c++/8/bits/basic_string.h ****       {
4054:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4055:/usr/include/c++/8/bits/basic_string.h **** 	return operator[](0);
4056:/usr/include/c++/8/bits/basic_string.h ****       }
4057:/usr/include/c++/8/bits/basic_string.h **** 
4058:/usr/include/c++/8/bits/basic_string.h ****       /**
4059:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
4060:/usr/include/c++/8/bits/basic_string.h ****        *  element of the %string.
4061:/usr/include/c++/8/bits/basic_string.h ****        */
4062:/usr/include/c++/8/bits/basic_string.h ****       reference
4063:/usr/include/c++/8/bits/basic_string.h ****       back()
4064:/usr/include/c++/8/bits/basic_string.h ****       {
4065:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4066:/usr/include/c++/8/bits/basic_string.h **** 	return operator[](this->size() - 1);
4067:/usr/include/c++/8/bits/basic_string.h ****       }
4068:/usr/include/c++/8/bits/basic_string.h **** 
4069:/usr/include/c++/8/bits/basic_string.h ****       /**
4070:/usr/include/c++/8/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
4071:/usr/include/c++/8/bits/basic_string.h ****        *  last element of the %string.
4072:/usr/include/c++/8/bits/basic_string.h ****        */
4073:/usr/include/c++/8/bits/basic_string.h ****       const_reference
4074:/usr/include/c++/8/bits/basic_string.h ****       back() const noexcept
4075:/usr/include/c++/8/bits/basic_string.h ****       {
4076:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4077:/usr/include/c++/8/bits/basic_string.h **** 	return operator[](this->size() - 1);
4078:/usr/include/c++/8/bits/basic_string.h ****       }
4079:/usr/include/c++/8/bits/basic_string.h **** #endif
4080:/usr/include/c++/8/bits/basic_string.h **** 
4081:/usr/include/c++/8/bits/basic_string.h ****       // Modifiers:
4082:/usr/include/c++/8/bits/basic_string.h ****       /**
4083:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a string to this string.
4084:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  The string to append.
4085:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4086:/usr/include/c++/8/bits/basic_string.h ****        */
4087:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4088:/usr/include/c++/8/bits/basic_string.h ****       operator+=(const basic_string& __str)
4089:/usr/include/c++/8/bits/basic_string.h ****       { return this->append(__str); }
4090:/usr/include/c++/8/bits/basic_string.h **** 
4091:/usr/include/c++/8/bits/basic_string.h ****       /**
4092:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a C string.
4093:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to append.
4094:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4095:/usr/include/c++/8/bits/basic_string.h ****        */
4096:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4097:/usr/include/c++/8/bits/basic_string.h ****       operator+=(const _CharT* __s)
4098:/usr/include/c++/8/bits/basic_string.h ****       { return this->append(__s); }
4099:/usr/include/c++/8/bits/basic_string.h **** 
4100:/usr/include/c++/8/bits/basic_string.h ****       /**
4101:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a character.
4102:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  The character to append.
4103:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4104:/usr/include/c++/8/bits/basic_string.h ****        */
4105:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4106:/usr/include/c++/8/bits/basic_string.h ****       operator+=(_CharT __c)
4107:/usr/include/c++/8/bits/basic_string.h ****       { 
4108:/usr/include/c++/8/bits/basic_string.h **** 	this->push_back(__c);
4109:/usr/include/c++/8/bits/basic_string.h **** 	return *this;
4110:/usr/include/c++/8/bits/basic_string.h ****       }
4111:/usr/include/c++/8/bits/basic_string.h **** 
4112:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
4113:/usr/include/c++/8/bits/basic_string.h ****       /**
4114:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
4115:/usr/include/c++/8/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
4116:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4117:/usr/include/c++/8/bits/basic_string.h ****        */
4118:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4119:/usr/include/c++/8/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
4120:/usr/include/c++/8/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
4121:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
4122:/usr/include/c++/8/bits/basic_string.h **** 
4123:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
4124:/usr/include/c++/8/bits/basic_string.h ****       /**
4125:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a string_view.
4126:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended.
4127:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4128:/usr/include/c++/8/bits/basic_string.h ****        */
4129:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
4130:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4131:/usr/include/c++/8/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
4132:/usr/include/c++/8/bits/basic_string.h **** 	{ return this->append(__svt); }
4133:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
4134:/usr/include/c++/8/bits/basic_string.h **** 
4135:/usr/include/c++/8/bits/basic_string.h ****       /**
4136:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a string to this string.
4137:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  The string to append.
4138:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4139:/usr/include/c++/8/bits/basic_string.h ****        */
4140:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4141:/usr/include/c++/8/bits/basic_string.h ****       append(const basic_string& __str);
4142:/usr/include/c++/8/bits/basic_string.h **** 
4143:/usr/include/c++/8/bits/basic_string.h ****       /**
4144:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a substring.
4145:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  The string to append.
4146:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
4147:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4148:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4149:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
4150:/usr/include/c++/8/bits/basic_string.h ****        *
4151:/usr/include/c++/8/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
4152:/usr/include/c++/8/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
4153:/usr/include/c++/8/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
4154:/usr/include/c++/8/bits/basic_string.h ****        *  remainder of @a __str is appended.
4155:/usr/include/c++/8/bits/basic_string.h ****        */
4156:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4157:/usr/include/c++/8/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos);
4158:/usr/include/c++/8/bits/basic_string.h **** 
4159:/usr/include/c++/8/bits/basic_string.h ****       /**
4160:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a C substring.
4161:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to append.
4162:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4163:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4164:/usr/include/c++/8/bits/basic_string.h ****        */
4165:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4166:/usr/include/c++/8/bits/basic_string.h ****       append(const _CharT* __s, size_type __n);
4167:/usr/include/c++/8/bits/basic_string.h **** 
4168:/usr/include/c++/8/bits/basic_string.h ****       /**
4169:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a C string.
4170:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to append.
4171:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4172:/usr/include/c++/8/bits/basic_string.h ****        */
4173:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4174:/usr/include/c++/8/bits/basic_string.h ****       append(const _CharT* __s)
4175:/usr/include/c++/8/bits/basic_string.h ****       {
4176:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4177:/usr/include/c++/8/bits/basic_string.h **** 	return this->append(__s, traits_type::length(__s));
4178:/usr/include/c++/8/bits/basic_string.h ****       }
4179:/usr/include/c++/8/bits/basic_string.h **** 
4180:/usr/include/c++/8/bits/basic_string.h ****       /**
4181:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append multiple characters.
4182:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4183:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  The character to use.
4184:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4185:/usr/include/c++/8/bits/basic_string.h ****        *
4186:/usr/include/c++/8/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
4187:/usr/include/c++/8/bits/basic_string.h ****        */
4188:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4189:/usr/include/c++/8/bits/basic_string.h ****       append(size_type __n, _CharT __c);
4190:/usr/include/c++/8/bits/basic_string.h **** 
4191:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
4192:/usr/include/c++/8/bits/basic_string.h ****       /**
4193:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
4194:/usr/include/c++/8/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
4195:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4196:/usr/include/c++/8/bits/basic_string.h ****        */
4197:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4198:/usr/include/c++/8/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
4199:/usr/include/c++/8/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
4200:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
4201:/usr/include/c++/8/bits/basic_string.h **** 
4202:/usr/include/c++/8/bits/basic_string.h ****       /**
4203:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a range of characters.
4204:/usr/include/c++/8/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
4205:/usr/include/c++/8/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
4206:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4207:/usr/include/c++/8/bits/basic_string.h ****        *
4208:/usr/include/c++/8/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
4209:/usr/include/c++/8/bits/basic_string.h ****        */
4210:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator>
4211:/usr/include/c++/8/bits/basic_string.h ****         basic_string&
4212:/usr/include/c++/8/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
4213:/usr/include/c++/8/bits/basic_string.h ****         { return this->replace(_M_iend(), _M_iend(), __first, __last); }
4214:/usr/include/c++/8/bits/basic_string.h **** 
4215:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
4216:/usr/include/c++/8/bits/basic_string.h ****       /**
4217:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a string_view.
4218:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended.
4219:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4220:/usr/include/c++/8/bits/basic_string.h ****        */
4221:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
4222:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4223:/usr/include/c++/8/bits/basic_string.h **** 	append(const _Tp& __svt)
4224:/usr/include/c++/8/bits/basic_string.h **** 	{
4225:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4226:/usr/include/c++/8/bits/basic_string.h **** 	  return this->append(__sv.data(), __sv.size());
4227:/usr/include/c++/8/bits/basic_string.h **** 	}
4228:/usr/include/c++/8/bits/basic_string.h **** 
4229:/usr/include/c++/8/bits/basic_string.h ****       /**
4230:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
4231:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended
4232:/usr/include/c++/8/bits/basic_string.h ****        *               from.
4233:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
4234:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
4235:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4236:/usr/include/c++/8/bits/basic_string.h ****        */
4237:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
4238:/usr/include/c++/8/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4239:/usr/include/c++/8/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
4240:/usr/include/c++/8/bits/basic_string.h **** 	{
4241:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4242:/usr/include/c++/8/bits/basic_string.h **** 	  return append(__sv.data()
4243:/usr/include/c++/8/bits/basic_string.h **** 			+ __sv._M_check(__pos, "basic_string::append"),
4244:/usr/include/c++/8/bits/basic_string.h **** 			__sv._M_limit(__pos, __n));
4245:/usr/include/c++/8/bits/basic_string.h **** 	}
4246:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
4247:/usr/include/c++/8/bits/basic_string.h **** 
4248:/usr/include/c++/8/bits/basic_string.h ****       /**
4249:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Append a single character.
4250:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to append.
4251:/usr/include/c++/8/bits/basic_string.h ****        */
4252:/usr/include/c++/8/bits/basic_string.h ****       void
4253:/usr/include/c++/8/bits/basic_string.h ****       push_back(_CharT __c)
4254:/usr/include/c++/8/bits/basic_string.h ****       { 
4255:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __len = 1 + this->size();
4256:/usr/include/c++/8/bits/basic_string.h **** 	if (__len > this->capacity() || _M_rep()->_M_is_shared())
4257:/usr/include/c++/8/bits/basic_string.h **** 	  this->reserve(__len);
4258:/usr/include/c++/8/bits/basic_string.h **** 	traits_type::assign(_M_data()[this->size()], __c);
4259:/usr/include/c++/8/bits/basic_string.h **** 	_M_rep()->_M_set_length_and_sharable(__len);
4260:/usr/include/c++/8/bits/basic_string.h ****       }
4261:/usr/include/c++/8/bits/basic_string.h **** 
4262:/usr/include/c++/8/bits/basic_string.h ****       /**
4263:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
4264:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string to use.
4265:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4266:/usr/include/c++/8/bits/basic_string.h ****        */
4267:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4268:/usr/include/c++/8/bits/basic_string.h ****       assign(const basic_string& __str);
4269:/usr/include/c++/8/bits/basic_string.h **** 
4270:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
4271:/usr/include/c++/8/bits/basic_string.h ****       /**
4272:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
4273:/usr/include/c++/8/bits/basic_string.h ****        *  @param  __str  Source string to use.
4274:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4275:/usr/include/c++/8/bits/basic_string.h ****        *
4276:/usr/include/c++/8/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
4277:/usr/include/c++/8/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
4278:/usr/include/c++/8/bits/basic_string.h ****        */
4279:/usr/include/c++/8/bits/basic_string.h ****       // PR 58265, this should be noexcept.
4280:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4281:/usr/include/c++/8/bits/basic_string.h ****       assign(basic_string&& __str)
4282:/usr/include/c++/8/bits/basic_string.h ****       {
4283:/usr/include/c++/8/bits/basic_string.h **** 	this->swap(__str);
4284:/usr/include/c++/8/bits/basic_string.h **** 	return *this;
4285:/usr/include/c++/8/bits/basic_string.h ****       }
4286:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
4287:/usr/include/c++/8/bits/basic_string.h **** 
4288:/usr/include/c++/8/bits/basic_string.h ****       /**
4289:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
4290:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  The string to use.
4291:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
4292:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to use.
4293:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4294:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
4295:/usr/include/c++/8/bits/basic_string.h ****        *
4296:/usr/include/c++/8/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
4297:/usr/include/c++/8/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
4298:/usr/include/c++/8/bits/basic_string.h ****        *  is larger than the number of available characters in @a
4299:/usr/include/c++/8/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
4300:/usr/include/c++/8/bits/basic_string.h ****        */
4301:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4302:/usr/include/c++/8/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
4303:/usr/include/c++/8/bits/basic_string.h ****       { return this->assign(__str._M_data()
4304:/usr/include/c++/8/bits/basic_string.h **** 			    + __str._M_check(__pos, "basic_string::assign"),
4305:/usr/include/c++/8/bits/basic_string.h **** 			    __str._M_limit(__pos, __n)); }
4306:/usr/include/c++/8/bits/basic_string.h **** 
4307:/usr/include/c++/8/bits/basic_string.h ****       /**
4308:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to a C substring.
4309:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to use.
4310:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to use.
4311:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4312:/usr/include/c++/8/bits/basic_string.h ****        *
4313:/usr/include/c++/8/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
4314:/usr/include/c++/8/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
4315:/usr/include/c++/8/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
4316:/usr/include/c++/8/bits/basic_string.h ****        */
4317:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4318:/usr/include/c++/8/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n);
4319:/usr/include/c++/8/bits/basic_string.h **** 
4320:/usr/include/c++/8/bits/basic_string.h ****       /**
4321:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
4322:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to use.
4323:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4324:/usr/include/c++/8/bits/basic_string.h ****        *
4325:/usr/include/c++/8/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
4326:/usr/include/c++/8/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
4327:/usr/include/c++/8/bits/basic_string.h ****        *  function returns.
4328:/usr/include/c++/8/bits/basic_string.h ****        */
4329:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4330:/usr/include/c++/8/bits/basic_string.h ****       assign(const _CharT* __s)
4331:/usr/include/c++/8/bits/basic_string.h ****       {
4332:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4333:/usr/include/c++/8/bits/basic_string.h **** 	return this->assign(__s, traits_type::length(__s));
4334:/usr/include/c++/8/bits/basic_string.h ****       }
4335:/usr/include/c++/8/bits/basic_string.h **** 
4336:/usr/include/c++/8/bits/basic_string.h ****       /**
4337:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
4338:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
4339:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  The character to use.
4340:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4341:/usr/include/c++/8/bits/basic_string.h ****        *
4342:/usr/include/c++/8/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
4343:/usr/include/c++/8/bits/basic_string.h ****        *  character @a __c.
4344:/usr/include/c++/8/bits/basic_string.h ****        */
4345:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4346:/usr/include/c++/8/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
4347:/usr/include/c++/8/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
4348:/usr/include/c++/8/bits/basic_string.h **** 
4349:/usr/include/c++/8/bits/basic_string.h ****       /**
4350:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
4351:/usr/include/c++/8/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
4352:/usr/include/c++/8/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
4353:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4354:/usr/include/c++/8/bits/basic_string.h ****        *
4355:/usr/include/c++/8/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
4356:/usr/include/c++/8/bits/basic_string.h ****       */
4357:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator>
4358:/usr/include/c++/8/bits/basic_string.h ****         basic_string&
4359:/usr/include/c++/8/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
4360:/usr/include/c++/8/bits/basic_string.h ****         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
4361:/usr/include/c++/8/bits/basic_string.h **** 
4362:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
4363:/usr/include/c++/8/bits/basic_string.h ****       /**
4364:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
4365:/usr/include/c++/8/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
4366:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4367:/usr/include/c++/8/bits/basic_string.h ****        */
4368:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4369:/usr/include/c++/8/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
4370:/usr/include/c++/8/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
4371:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
4372:/usr/include/c++/8/bits/basic_string.h **** 
4373:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
4374:/usr/include/c++/8/bits/basic_string.h ****       /**
4375:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value from a string_view.
4376:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt The source object convertible to string_view.
4377:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4378:/usr/include/c++/8/bits/basic_string.h ****        */
4379:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
4380:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4381:/usr/include/c++/8/bits/basic_string.h **** 	assign(const _Tp& __svt)
4382:/usr/include/c++/8/bits/basic_string.h **** 	{
4383:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4384:/usr/include/c++/8/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
4385:/usr/include/c++/8/bits/basic_string.h **** 	}
4386:/usr/include/c++/8/bits/basic_string.h **** 
4387:/usr/include/c++/8/bits/basic_string.h ****       /**
4388:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
4389:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
4390:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
4391:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
4392:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4393:/usr/include/c++/8/bits/basic_string.h ****        */
4394:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
4395:/usr/include/c++/8/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4396:/usr/include/c++/8/bits/basic_string.h ****         assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
4397:/usr/include/c++/8/bits/basic_string.h **** 	{
4398:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4399:/usr/include/c++/8/bits/basic_string.h **** 	  return assign(__sv.data()
4400:/usr/include/c++/8/bits/basic_string.h **** 			+ __sv._M_check(__pos, "basic_string::assign"),
4401:/usr/include/c++/8/bits/basic_string.h **** 			__sv._M_limit(__pos, __n));
4402:/usr/include/c++/8/bits/basic_string.h **** 	}
4403:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
4404:/usr/include/c++/8/bits/basic_string.h **** 
4405:/usr/include/c++/8/bits/basic_string.h ****       /**
4406:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert multiple characters.
4407:/usr/include/c++/8/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4408:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to insert
4409:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  The character to insert.
4410:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4411:/usr/include/c++/8/bits/basic_string.h ****        *
4412:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
4413:/usr/include/c++/8/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
4414:/usr/include/c++/8/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4415:/usr/include/c++/8/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4416:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
4417:/usr/include/c++/8/bits/basic_string.h ****       */
4418:/usr/include/c++/8/bits/basic_string.h ****       void
4419:/usr/include/c++/8/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
4420:/usr/include/c++/8/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
4421:/usr/include/c++/8/bits/basic_string.h **** 
4422:/usr/include/c++/8/bits/basic_string.h ****       /**
4423:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert a range of characters.
4424:/usr/include/c++/8/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4425:/usr/include/c++/8/bits/basic_string.h ****        *  @param __beg  Start of range.
4426:/usr/include/c++/8/bits/basic_string.h ****        *  @param __end  End of range.
4427:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4428:/usr/include/c++/8/bits/basic_string.h ****        *
4429:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
4430:/usr/include/c++/8/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4431:/usr/include/c++/8/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4432:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
4433:/usr/include/c++/8/bits/basic_string.h ****       */
4434:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator>
4435:/usr/include/c++/8/bits/basic_string.h ****         void
4436:/usr/include/c++/8/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
4437:/usr/include/c++/8/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
4438:/usr/include/c++/8/bits/basic_string.h **** 
4439:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
4440:/usr/include/c++/8/bits/basic_string.h ****       /**
4441:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
4442:/usr/include/c++/8/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4443:/usr/include/c++/8/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
4444:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4445:/usr/include/c++/8/bits/basic_string.h ****        */
4446:/usr/include/c++/8/bits/basic_string.h ****       void
4447:/usr/include/c++/8/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
4448:/usr/include/c++/8/bits/basic_string.h ****       {
4449:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
4450:/usr/include/c++/8/bits/basic_string.h **** 	this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
4451:/usr/include/c++/8/bits/basic_string.h ****       }
4452:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
4453:/usr/include/c++/8/bits/basic_string.h **** 
4454:/usr/include/c++/8/bits/basic_string.h ****       /**
4455:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert value of a string.
4456:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
4457:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  The string to insert.
4458:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4459:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4460:/usr/include/c++/8/bits/basic_string.h ****        *
4461:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
4462:/usr/include/c++/8/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4463:/usr/include/c++/8/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4464:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
4465:/usr/include/c++/8/bits/basic_string.h ****       */
4466:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4467:/usr/include/c++/8/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
4468:/usr/include/c++/8/bits/basic_string.h ****       { return this->insert(__pos1, __str, size_type(0), __str.size()); }
4469:/usr/include/c++/8/bits/basic_string.h **** 
4470:/usr/include/c++/8/bits/basic_string.h ****       /**
4471:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert a substring.
4472:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
4473:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  The string to insert.
4474:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
4475:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
4476:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4477:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4478:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
4479:/usr/include/c++/8/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
4480:/usr/include/c++/8/bits/basic_string.h ****        *
4481:/usr/include/c++/8/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
4482:/usr/include/c++/8/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
4483:/usr/include/c++/8/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
4484:/usr/include/c++/8/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
4485:/usr/include/c++/8/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
4486:/usr/include/c++/8/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4487:/usr/include/c++/8/bits/basic_string.h ****       */
4488:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4489:/usr/include/c++/8/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
4490:/usr/include/c++/8/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
4491:/usr/include/c++/8/bits/basic_string.h ****       { return this->insert(__pos1, __str._M_data()
4492:/usr/include/c++/8/bits/basic_string.h **** 			    + __str._M_check(__pos2, "basic_string::insert"),
4493:/usr/include/c++/8/bits/basic_string.h **** 			    __str._M_limit(__pos2, __n)); }
4494:/usr/include/c++/8/bits/basic_string.h **** 
4495:/usr/include/c++/8/bits/basic_string.h ****       /**
4496:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert a C substring.
4497:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
4498:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to insert.
4499:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
4500:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4501:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4502:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
4503:/usr/include/c++/8/bits/basic_string.h ****        *  string.
4504:/usr/include/c++/8/bits/basic_string.h ****        *
4505:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
4506:/usr/include/c++/8/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
4507:/usr/include/c++/8/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
4508:/usr/include/c++/8/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
4509:/usr/include/c++/8/bits/basic_string.h ****        *  doesn't change if an error is thrown.
4510:/usr/include/c++/8/bits/basic_string.h ****       */
4511:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4512:/usr/include/c++/8/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n);
4513:/usr/include/c++/8/bits/basic_string.h **** 
4514:/usr/include/c++/8/bits/basic_string.h ****       /**
4515:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert a C string.
4516:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
4517:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  The C string to insert.
4518:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4519:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4520:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4521:/usr/include/c++/8/bits/basic_string.h ****        *  string.
4522:/usr/include/c++/8/bits/basic_string.h ****        *
4523:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
4524:/usr/include/c++/8/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
4525:/usr/include/c++/8/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
4526:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
4527:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.
4528:/usr/include/c++/8/bits/basic_string.h ****       */
4529:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4530:/usr/include/c++/8/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
4531:/usr/include/c++/8/bits/basic_string.h ****       {
4532:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4533:/usr/include/c++/8/bits/basic_string.h **** 	return this->insert(__pos, __s, traits_type::length(__s));
4534:/usr/include/c++/8/bits/basic_string.h ****       }
4535:/usr/include/c++/8/bits/basic_string.h **** 
4536:/usr/include/c++/8/bits/basic_string.h ****       /**
4537:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert multiple characters.
4538:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
4539:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to insert
4540:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  The character to insert.
4541:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4542:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4543:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
4544:/usr/include/c++/8/bits/basic_string.h ****        *  string.
4545:/usr/include/c++/8/bits/basic_string.h ****        *
4546:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
4547:/usr/include/c++/8/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
4548:/usr/include/c++/8/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
4549:/usr/include/c++/8/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4550:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
4551:/usr/include/c++/8/bits/basic_string.h ****       */
4552:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4553:/usr/include/c++/8/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
4554:/usr/include/c++/8/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
4555:/usr/include/c++/8/bits/basic_string.h **** 			      size_type(0), __n, __c); }
4556:/usr/include/c++/8/bits/basic_string.h **** 
4557:/usr/include/c++/8/bits/basic_string.h ****       /**
4558:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert one character.
4559:/usr/include/c++/8/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
4560:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  The character to insert.
4561:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
4562:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4563:/usr/include/c++/8/bits/basic_string.h ****        *
4564:/usr/include/c++/8/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
4565:/usr/include/c++/8/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
4566:/usr/include/c++/8/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
4567:/usr/include/c++/8/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4568:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
4569:/usr/include/c++/8/bits/basic_string.h ****       */
4570:/usr/include/c++/8/bits/basic_string.h ****       iterator
4571:/usr/include/c++/8/bits/basic_string.h ****       insert(iterator __p, _CharT __c)
4572:/usr/include/c++/8/bits/basic_string.h ****       {
4573:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
4574:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __pos = __p - _M_ibegin();
4575:/usr/include/c++/8/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
4576:/usr/include/c++/8/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
4577:/usr/include/c++/8/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
4578:/usr/include/c++/8/bits/basic_string.h ****       }
4579:/usr/include/c++/8/bits/basic_string.h **** 
4580:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
4581:/usr/include/c++/8/bits/basic_string.h ****       /**
4582:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert a string_view.
4583:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
4584:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
4585:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4586:/usr/include/c++/8/bits/basic_string.h ****       */
4587:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
4588:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4589:/usr/include/c++/8/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
4590:/usr/include/c++/8/bits/basic_string.h **** 	{
4591:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4592:/usr/include/c++/8/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
4593:/usr/include/c++/8/bits/basic_string.h **** 	}
4594:/usr/include/c++/8/bits/basic_string.h **** 
4595:/usr/include/c++/8/bits/basic_string.h ****       /**
4596:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Insert a string_view.
4597:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
4598:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert from.
4599:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string_view to insert
4600:/usr/include/c++/8/bits/basic_string.h ****        *  from.
4601:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
4602:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4603:/usr/include/c++/8/bits/basic_string.h ****       */
4604:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
4605:/usr/include/c++/8/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4606:/usr/include/c++/8/bits/basic_string.h ****         insert(size_type __pos1, const _Tp& __svt,
4607:/usr/include/c++/8/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
4608:/usr/include/c++/8/bits/basic_string.h **** 	{
4609:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4610:/usr/include/c++/8/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0), __sv.data()
4611:/usr/include/c++/8/bits/basic_string.h **** 			       + __sv._M_check(__pos2, "basic_string::insert"),
4612:/usr/include/c++/8/bits/basic_string.h **** 			       __sv._M_limit(__pos2, __n));
4613:/usr/include/c++/8/bits/basic_string.h **** 	}
4614:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
4615:/usr/include/c++/8/bits/basic_string.h **** 
4616:/usr/include/c++/8/bits/basic_string.h ****       /**
4617:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Remove characters.
4618:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
4619:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
4620:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4621:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4622:/usr/include/c++/8/bits/basic_string.h ****        *  string.
4623:/usr/include/c++/8/bits/basic_string.h ****        *
4624:/usr/include/c++/8/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
4625:/usr/include/c++/8/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
4626:/usr/include/c++/8/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
4627:/usr/include/c++/8/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
4628:/usr/include/c++/8/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4629:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
4630:/usr/include/c++/8/bits/basic_string.h ****       */
4631:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4632:/usr/include/c++/8/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
4633:/usr/include/c++/8/bits/basic_string.h ****       { 
4634:/usr/include/c++/8/bits/basic_string.h **** 	_M_mutate(_M_check(__pos, "basic_string::erase"),
4635:/usr/include/c++/8/bits/basic_string.h **** 		  _M_limit(__pos, __n), size_type(0));
4636:/usr/include/c++/8/bits/basic_string.h **** 	return *this;
4637:/usr/include/c++/8/bits/basic_string.h ****       }
4638:/usr/include/c++/8/bits/basic_string.h **** 
4639:/usr/include/c++/8/bits/basic_string.h ****       /**
4640:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Remove one character.
4641:/usr/include/c++/8/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
4642:/usr/include/c++/8/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
4643:/usr/include/c++/8/bits/basic_string.h ****        *
4644:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
4645:/usr/include/c++/8/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
4646:/usr/include/c++/8/bits/basic_string.h ****       */
4647:/usr/include/c++/8/bits/basic_string.h ****       iterator
4648:/usr/include/c++/8/bits/basic_string.h ****       erase(iterator __position)
4649:/usr/include/c++/8/bits/basic_string.h ****       {
4650:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin()
4651:/usr/include/c++/8/bits/basic_string.h **** 				 && __position < _M_iend());
4652:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __pos = __position - _M_ibegin();
4653:/usr/include/c++/8/bits/basic_string.h **** 	_M_mutate(__pos, size_type(1), size_type(0));
4654:/usr/include/c++/8/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
4655:/usr/include/c++/8/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
4656:/usr/include/c++/8/bits/basic_string.h ****       }
4657:/usr/include/c++/8/bits/basic_string.h **** 
4658:/usr/include/c++/8/bits/basic_string.h ****       /**
4659:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Remove a range of characters.
4660:/usr/include/c++/8/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
4661:/usr/include/c++/8/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
4662:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
4663:/usr/include/c++/8/bits/basic_string.h ****        *
4664:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
4665:/usr/include/c++/8/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
4666:/usr/include/c++/8/bits/basic_string.h ****       */
4667:/usr/include/c++/8/bits/basic_string.h ****       iterator
4668:/usr/include/c++/8/bits/basic_string.h ****       erase(iterator __first, iterator __last);
4669:/usr/include/c++/8/bits/basic_string.h ****  
4670:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
4671:/usr/include/c++/8/bits/basic_string.h ****       /**
4672:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Remove the last character.
4673:/usr/include/c++/8/bits/basic_string.h ****        *
4674:/usr/include/c++/8/bits/basic_string.h ****        *  The string must be non-empty.
4675:/usr/include/c++/8/bits/basic_string.h ****        */
4676:/usr/include/c++/8/bits/basic_string.h ****       void
4677:/usr/include/c++/8/bits/basic_string.h ****       pop_back() // FIXME C++11: should be noexcept.
4678:/usr/include/c++/8/bits/basic_string.h ****       {
4679:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4680:/usr/include/c++/8/bits/basic_string.h **** 	erase(size() - 1, 1);
4681:/usr/include/c++/8/bits/basic_string.h ****       }
4682:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
4683:/usr/include/c++/8/bits/basic_string.h **** 
4684:/usr/include/c++/8/bits/basic_string.h ****       /**
4685:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
4686:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4687:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
4688:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to insert.
4689:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4690:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4691:/usr/include/c++/8/bits/basic_string.h ****        *  string.
4692:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4693:/usr/include/c++/8/bits/basic_string.h ****        *
4694:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
4695:/usr/include/c++/8/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
4696:/usr/include/c++/8/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
4697:/usr/include/c++/8/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
4698:/usr/include/c++/8/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
4699:/usr/include/c++/8/bits/basic_string.h ****        *  error is thrown.
4700:/usr/include/c++/8/bits/basic_string.h ****       */
4701:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4702:/usr/include/c++/8/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
4703:/usr/include/c++/8/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
4704:/usr/include/c++/8/bits/basic_string.h **** 
4705:/usr/include/c++/8/bits/basic_string.h ****       /**
4706:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
4707:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
4708:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4709:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to insert.
4710:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
4711:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
4712:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4713:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
4714:/usr/include/c++/8/bits/basic_string.h ****        *  __str.size().
4715:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4716:/usr/include/c++/8/bits/basic_string.h ****        *
4717:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
4718:/usr/include/c++/8/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
4719:/usr/include/c++/8/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
4720:/usr/include/c++/8/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
4721:/usr/include/c++/8/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
4722:/usr/include/c++/8/bits/basic_string.h ****       */
4723:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4724:/usr/include/c++/8/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
4725:/usr/include/c++/8/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
4726:/usr/include/c++/8/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
4727:/usr/include/c++/8/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
4728:/usr/include/c++/8/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
4729:/usr/include/c++/8/bits/basic_string.h **** 
4730:/usr/include/c++/8/bits/basic_string.h ****       /**
4731:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
4732:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4733:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4734:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to insert.
4735:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
4736:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4737:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
4738:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4739:/usr/include/c++/8/bits/basic_string.h ****        *
4740:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
4741:/usr/include/c++/8/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
4742:/usr/include/c++/8/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
4743:/usr/include/c++/8/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
4744:/usr/include/c++/8/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
4745:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
4746:/usr/include/c++/8/bits/basic_string.h ****        *  is thrown.
4747:/usr/include/c++/8/bits/basic_string.h ****       */
4748:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4749:/usr/include/c++/8/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
4750:/usr/include/c++/8/bits/basic_string.h **** 	      size_type __n2);
4751:/usr/include/c++/8/bits/basic_string.h **** 
4752:/usr/include/c++/8/bits/basic_string.h ****       /**
4753:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
4754:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4755:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4756:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to insert.
4757:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4758:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
4759:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4760:/usr/include/c++/8/bits/basic_string.h ****        *
4761:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
4762:/usr/include/c++/8/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
4763:/usr/include/c++/8/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
4764:/usr/include/c++/8/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
4765:/usr/include/c++/8/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4766:/usr/include/c++/8/bits/basic_string.h ****        *  change if an error is thrown.
4767:/usr/include/c++/8/bits/basic_string.h ****       */
4768:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4769:/usr/include/c++/8/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
4770:/usr/include/c++/8/bits/basic_string.h ****       {
4771:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4772:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
4773:/usr/include/c++/8/bits/basic_string.h ****       }
4774:/usr/include/c++/8/bits/basic_string.h **** 
4775:/usr/include/c++/8/bits/basic_string.h ****       /**
4776:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
4777:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4778:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4779:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
4780:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to insert.
4781:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4782:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
4783:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4784:/usr/include/c++/8/bits/basic_string.h ****        *
4785:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
4786:/usr/include/c++/8/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
4787:/usr/include/c++/8/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
4788:/usr/include/c++/8/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
4789:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
4790:/usr/include/c++/8/bits/basic_string.h ****        *  is thrown.
4791:/usr/include/c++/8/bits/basic_string.h ****       */
4792:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4793:/usr/include/c++/8/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
4794:/usr/include/c++/8/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
4795:/usr/include/c++/8/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
4796:/usr/include/c++/8/bits/basic_string.h **** 
4797:/usr/include/c++/8/bits/basic_string.h ****       /**
4798:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
4799:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4800:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4801:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String value to insert.
4802:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4803:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4804:/usr/include/c++/8/bits/basic_string.h ****        *
4805:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4806:/usr/include/c++/8/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
4807:/usr/include/c++/8/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
4808:/usr/include/c++/8/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
4809:/usr/include/c++/8/bits/basic_string.h ****       */
4810:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4811:/usr/include/c++/8/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const basic_string& __str)
4812:/usr/include/c++/8/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
4813:/usr/include/c++/8/bits/basic_string.h **** 
4814:/usr/include/c++/8/bits/basic_string.h ****       /**
4815:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
4816:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4817:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4818:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string value to insert.
4819:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
4820:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4821:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4822:/usr/include/c++/8/bits/basic_string.h ****        *
4823:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4824:/usr/include/c++/8/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
4825:/usr/include/c++/8/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4826:/usr/include/c++/8/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4827:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.
4828:/usr/include/c++/8/bits/basic_string.h ****       */
4829:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4830:/usr/include/c++/8/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
4831:/usr/include/c++/8/bits/basic_string.h ****       {
4832:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4833:/usr/include/c++/8/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4834:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
4835:/usr/include/c++/8/bits/basic_string.h ****       }
4836:/usr/include/c++/8/bits/basic_string.h **** 
4837:/usr/include/c++/8/bits/basic_string.h ****       /**
4838:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
4839:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4840:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4841:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string value to insert.
4842:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4843:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4844:/usr/include/c++/8/bits/basic_string.h ****        *
4845:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4846:/usr/include/c++/8/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
4847:/usr/include/c++/8/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4848:/usr/include/c++/8/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4849:/usr/include/c++/8/bits/basic_string.h ****       */
4850:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4851:/usr/include/c++/8/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s)
4852:/usr/include/c++/8/bits/basic_string.h ****       {
4853:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4854:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
4855:/usr/include/c++/8/bits/basic_string.h ****       }
4856:/usr/include/c++/8/bits/basic_string.h **** 
4857:/usr/include/c++/8/bits/basic_string.h ****       /**
4858:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
4859:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4860:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4861:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
4862:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to insert.
4863:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4864:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4865:/usr/include/c++/8/bits/basic_string.h ****        *
4866:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4867:/usr/include/c++/8/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
4868:/usr/include/c++/8/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4869:/usr/include/c++/8/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4870:/usr/include/c++/8/bits/basic_string.h ****       */
4871:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4872:/usr/include/c++/8/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
4873:/usr/include/c++/8/bits/basic_string.h ****       {
4874:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4875:/usr/include/c++/8/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4876:/usr/include/c++/8/bits/basic_string.h **** 	return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
4877:/usr/include/c++/8/bits/basic_string.h ****       }
4878:/usr/include/c++/8/bits/basic_string.h **** 
4879:/usr/include/c++/8/bits/basic_string.h ****       /**
4880:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
4881:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4882:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4883:/usr/include/c++/8/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
4884:/usr/include/c++/8/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
4885:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4886:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4887:/usr/include/c++/8/bits/basic_string.h ****        *
4888:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4889:/usr/include/c++/8/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
4890:/usr/include/c++/8/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4891:/usr/include/c++/8/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4892:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.
4893:/usr/include/c++/8/bits/basic_string.h ****       */
4894:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator>
4895:/usr/include/c++/8/bits/basic_string.h ****         basic_string&
4896:/usr/include/c++/8/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
4897:/usr/include/c++/8/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
4898:/usr/include/c++/8/bits/basic_string.h ****         {
4899:/usr/include/c++/8/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4900:/usr/include/c++/8/bits/basic_string.h **** 				   && __i2 <= _M_iend());
4901:/usr/include/c++/8/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
4902:/usr/include/c++/8/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
4903:/usr/include/c++/8/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
4904:/usr/include/c++/8/bits/basic_string.h **** 	}
4905:/usr/include/c++/8/bits/basic_string.h **** 
4906:/usr/include/c++/8/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
4907:/usr/include/c++/8/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
4908:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4909:/usr/include/c++/8/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
4910:/usr/include/c++/8/bits/basic_string.h ****       {
4911:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4912:/usr/include/c++/8/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4913:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4914:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4915:/usr/include/c++/8/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4916:/usr/include/c++/8/bits/basic_string.h ****       }
4917:/usr/include/c++/8/bits/basic_string.h **** 
4918:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4919:/usr/include/c++/8/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
4920:/usr/include/c++/8/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
4921:/usr/include/c++/8/bits/basic_string.h ****       {
4922:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4923:/usr/include/c++/8/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4924:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4925:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4926:/usr/include/c++/8/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4927:/usr/include/c++/8/bits/basic_string.h ****       }
4928:/usr/include/c++/8/bits/basic_string.h **** 
4929:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4930:/usr/include/c++/8/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
4931:/usr/include/c++/8/bits/basic_string.h ****       {
4932:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4933:/usr/include/c++/8/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4934:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4935:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4936:/usr/include/c++/8/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
4937:/usr/include/c++/8/bits/basic_string.h ****       }
4938:/usr/include/c++/8/bits/basic_string.h **** 
4939:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
4940:/usr/include/c++/8/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
4941:/usr/include/c++/8/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
4942:/usr/include/c++/8/bits/basic_string.h ****       {
4943:/usr/include/c++/8/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4944:/usr/include/c++/8/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4945:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4946:/usr/include/c++/8/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4947:/usr/include/c++/8/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
4948:/usr/include/c++/8/bits/basic_string.h ****       }
4949:/usr/include/c++/8/bits/basic_string.h **** 
4950:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
4951:/usr/include/c++/8/bits/basic_string.h ****       /**
4952:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
4953:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4954:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4955:/usr/include/c++/8/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
4956:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4957:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4958:/usr/include/c++/8/bits/basic_string.h ****        *
4959:/usr/include/c++/8/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4960:/usr/include/c++/8/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
4961:/usr/include/c++/8/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4962:/usr/include/c++/8/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4963:/usr/include/c++/8/bits/basic_string.h ****        *  thrown.
4964:/usr/include/c++/8/bits/basic_string.h ****       */
4965:/usr/include/c++/8/bits/basic_string.h ****       basic_string& replace(iterator __i1, iterator __i2,
4966:/usr/include/c++/8/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
4967:/usr/include/c++/8/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }
4968:/usr/include/c++/8/bits/basic_string.h **** #endif // C++11
4969:/usr/include/c++/8/bits/basic_string.h **** 
4970:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
4971:/usr/include/c++/8/bits/basic_string.h ****       /**
4972:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
4973:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  The position to replace at.
4974:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
4975:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
4976:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4977:/usr/include/c++/8/bits/basic_string.h ****       */
4978:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
4979:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4980:/usr/include/c++/8/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
4981:/usr/include/c++/8/bits/basic_string.h **** 	{
4982:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4983:/usr/include/c++/8/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
4984:/usr/include/c++/8/bits/basic_string.h **** 	}
4985:/usr/include/c++/8/bits/basic_string.h **** 
4986:/usr/include/c++/8/bits/basic_string.h ****       /**
4987:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
4988:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
4989:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
4990:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
4991:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
4992:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
4993:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
4994:/usr/include/c++/8/bits/basic_string.h ****       */
4995:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
4996:/usr/include/c++/8/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4997:/usr/include/c++/8/bits/basic_string.h ****         replace(size_type __pos1, size_type __n1, const _Tp& __svt,
4998:/usr/include/c++/8/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
4999:/usr/include/c++/8/bits/basic_string.h **** 	{
5000:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5001:/usr/include/c++/8/bits/basic_string.h **** 	  return this->replace(__pos1, __n1,
5002:/usr/include/c++/8/bits/basic_string.h **** 	      __sv.data() + __sv._M_check(__pos2, "basic_string::replace"),
5003:/usr/include/c++/8/bits/basic_string.h **** 	      __sv._M_limit(__pos2, __n2));
5004:/usr/include/c++/8/bits/basic_string.h **** 	}
5005:/usr/include/c++/8/bits/basic_string.h **** 
5006:/usr/include/c++/8/bits/basic_string.h ****       /**
5007:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
5008:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
5009:/usr/include/c++/8/bits/basic_string.h ****           to replace at.
5010:/usr/include/c++/8/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
5011:/usr/include/c++/8/bits/basic_string.h ****           for the replace.
5012:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
5013:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Reference to this string.
5014:/usr/include/c++/8/bits/basic_string.h ****       */
5015:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
5016:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
5017:/usr/include/c++/8/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
5018:/usr/include/c++/8/bits/basic_string.h **** 	{
5019:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5020:/usr/include/c++/8/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
5021:/usr/include/c++/8/bits/basic_string.h **** 	}
5022:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
5023:/usr/include/c++/8/bits/basic_string.h **** 
5024:/usr/include/c++/8/bits/basic_string.h ****     private:
5025:/usr/include/c++/8/bits/basic_string.h ****       template<class _Integer>
5026:/usr/include/c++/8/bits/basic_string.h **** 	basic_string&
5027:/usr/include/c++/8/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
5028:/usr/include/c++/8/bits/basic_string.h **** 			    _Integer __val, __true_type)
5029:/usr/include/c++/8/bits/basic_string.h ****         { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }
5030:/usr/include/c++/8/bits/basic_string.h **** 
5031:/usr/include/c++/8/bits/basic_string.h ****       template<class _InputIterator>
5032:/usr/include/c++/8/bits/basic_string.h **** 	basic_string&
5033:/usr/include/c++/8/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
5034:/usr/include/c++/8/bits/basic_string.h **** 			    _InputIterator __k2, __false_type);
5035:/usr/include/c++/8/bits/basic_string.h **** 
5036:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
5037:/usr/include/c++/8/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
5038:/usr/include/c++/8/bits/basic_string.h **** 		     _CharT __c);
5039:/usr/include/c++/8/bits/basic_string.h **** 
5040:/usr/include/c++/8/bits/basic_string.h ****       basic_string&
5041:/usr/include/c++/8/bits/basic_string.h ****       _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
5042:/usr/include/c++/8/bits/basic_string.h **** 		      size_type __n2);
5043:/usr/include/c++/8/bits/basic_string.h **** 
5044:/usr/include/c++/8/bits/basic_string.h ****       // _S_construct_aux is used to implement the 21.3.1 para 15 which
5045:/usr/include/c++/8/bits/basic_string.h ****       // requires special behaviour if _InIter is an integral type
5046:/usr/include/c++/8/bits/basic_string.h ****       template<class _InIterator>
5047:/usr/include/c++/8/bits/basic_string.h ****         static _CharT*
5048:/usr/include/c++/8/bits/basic_string.h ****         _S_construct_aux(_InIterator __beg, _InIterator __end,
5049:/usr/include/c++/8/bits/basic_string.h **** 			 const _Alloc& __a, __false_type)
5050:/usr/include/c++/8/bits/basic_string.h **** 	{
5051:/usr/include/c++/8/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
5052:/usr/include/c++/8/bits/basic_string.h ****           return _S_construct(__beg, __end, __a, _Tag());
5053:/usr/include/c++/8/bits/basic_string.h **** 	}
5054:/usr/include/c++/8/bits/basic_string.h **** 
5055:/usr/include/c++/8/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
5056:/usr/include/c++/8/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
5057:/usr/include/c++/8/bits/basic_string.h ****       template<class _Integer>
5058:/usr/include/c++/8/bits/basic_string.h ****         static _CharT*
5059:/usr/include/c++/8/bits/basic_string.h ****         _S_construct_aux(_Integer __beg, _Integer __end,
5060:/usr/include/c++/8/bits/basic_string.h **** 			 const _Alloc& __a, __true_type)
5061:/usr/include/c++/8/bits/basic_string.h ****         { return _S_construct_aux_2(static_cast<size_type>(__beg),
5062:/usr/include/c++/8/bits/basic_string.h **** 				    __end, __a); }
5063:/usr/include/c++/8/bits/basic_string.h **** 
5064:/usr/include/c++/8/bits/basic_string.h ****       static _CharT*
5065:/usr/include/c++/8/bits/basic_string.h ****       _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
5066:/usr/include/c++/8/bits/basic_string.h ****       { return _S_construct(__req, __c, __a); }
5067:/usr/include/c++/8/bits/basic_string.h **** 
5068:/usr/include/c++/8/bits/basic_string.h ****       template<class _InIterator>
5069:/usr/include/c++/8/bits/basic_string.h ****         static _CharT*
5070:/usr/include/c++/8/bits/basic_string.h ****         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
5071:/usr/include/c++/8/bits/basic_string.h **** 	{
5072:/usr/include/c++/8/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
5073:/usr/include/c++/8/bits/basic_string.h **** 	  return _S_construct_aux(__beg, __end, __a, _Integral());
5074:/usr/include/c++/8/bits/basic_string.h ****         }
5075:/usr/include/c++/8/bits/basic_string.h **** 
5076:/usr/include/c++/8/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
5077:/usr/include/c++/8/bits/basic_string.h ****       template<class _InIterator>
5078:/usr/include/c++/8/bits/basic_string.h ****         static _CharT*
5079:/usr/include/c++/8/bits/basic_string.h ****          _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
5080:/usr/include/c++/8/bits/basic_string.h **** 		      input_iterator_tag);
5081:/usr/include/c++/8/bits/basic_string.h **** 
5082:/usr/include/c++/8/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
5083:/usr/include/c++/8/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
5084:/usr/include/c++/8/bits/basic_string.h ****       template<class _FwdIterator>
5085:/usr/include/c++/8/bits/basic_string.h ****         static _CharT*
5086:/usr/include/c++/8/bits/basic_string.h ****         _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
5087:/usr/include/c++/8/bits/basic_string.h **** 		     forward_iterator_tag);
5088:/usr/include/c++/8/bits/basic_string.h **** 
5089:/usr/include/c++/8/bits/basic_string.h ****       static _CharT*
5090:/usr/include/c++/8/bits/basic_string.h ****       _S_construct(size_type __req, _CharT __c, const _Alloc& __a);
5091:/usr/include/c++/8/bits/basic_string.h **** 
5092:/usr/include/c++/8/bits/basic_string.h ****     public:
5093:/usr/include/c++/8/bits/basic_string.h **** 
5094:/usr/include/c++/8/bits/basic_string.h ****       /**
5095:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Copy substring into C string.
5096:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to copy value into.
5097:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
5098:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
5099:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Number of characters actually copied
5100:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
5101:/usr/include/c++/8/bits/basic_string.h ****        *
5102:/usr/include/c++/8/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
5103:/usr/include/c++/8/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
5104:/usr/include/c++/8/bits/basic_string.h ****        *  out_of_range is thrown.
5105:/usr/include/c++/8/bits/basic_string.h ****       */
5106:/usr/include/c++/8/bits/basic_string.h ****       size_type
5107:/usr/include/c++/8/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
5108:/usr/include/c++/8/bits/basic_string.h **** 
5109:/usr/include/c++/8/bits/basic_string.h ****       /**
5110:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Swap contents with another string.
5111:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  String to swap with.
5112:/usr/include/c++/8/bits/basic_string.h ****        *
5113:/usr/include/c++/8/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
5114:/usr/include/c++/8/bits/basic_string.h ****        *  time.
5115:/usr/include/c++/8/bits/basic_string.h ****       */
5116:/usr/include/c++/8/bits/basic_string.h ****       // PR 58265, this should be noexcept.
5117:/usr/include/c++/8/bits/basic_string.h ****       void
5118:/usr/include/c++/8/bits/basic_string.h ****       swap(basic_string& __s);
5119:/usr/include/c++/8/bits/basic_string.h **** 
5120:/usr/include/c++/8/bits/basic_string.h ****       // String operations:
5121:/usr/include/c++/8/bits/basic_string.h ****       /**
5122:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
5123:/usr/include/c++/8/bits/basic_string.h ****        *
5124:/usr/include/c++/8/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
5125:/usr/include/c++/8/bits/basic_string.h ****        *  happen.
5126:/usr/include/c++/8/bits/basic_string.h ****       */
5127:/usr/include/c++/8/bits/basic_string.h ****       const _CharT*
5128:/usr/include/c++/8/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
5129:/usr/include/c++/8/bits/basic_string.h ****       { return _M_data(); }
5130:/usr/include/c++/8/bits/basic_string.h **** 
5131:/usr/include/c++/8/bits/basic_string.h ****       /**
5132:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
5133:/usr/include/c++/8/bits/basic_string.h ****        *
5134:/usr/include/c++/8/bits/basic_string.h ****        *  This is a pointer to internal data.  It is undefined to modify
5135:/usr/include/c++/8/bits/basic_string.h ****        *  the contents through the returned pointer. To get a pointer that
5136:/usr/include/c++/8/bits/basic_string.h ****        *  allows modifying the contents use @c &str[0] instead,
5137:/usr/include/c++/8/bits/basic_string.h ****        *  (or in C++17 the non-const @c str.data() overload).
5138:/usr/include/c++/8/bits/basic_string.h ****       */
5139:/usr/include/c++/8/bits/basic_string.h ****       const _CharT*
5140:/usr/include/c++/8/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
5141:/usr/include/c++/8/bits/basic_string.h ****       { return _M_data(); }
5142:/usr/include/c++/8/bits/basic_string.h **** 
5143:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
5144:/usr/include/c++/8/bits/basic_string.h ****       /**
5145:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Return non-const pointer to contents.
5146:/usr/include/c++/8/bits/basic_string.h ****        *
5147:/usr/include/c++/8/bits/basic_string.h ****        *  This is a pointer to the character sequence held by the string.
5148:/usr/include/c++/8/bits/basic_string.h ****        *  Modifying the characters in the sequence is allowed.
5149:/usr/include/c++/8/bits/basic_string.h ****       */
5150:/usr/include/c++/8/bits/basic_string.h ****       _CharT*
5151:/usr/include/c++/8/bits/basic_string.h ****       data() noexcept
5152:/usr/include/c++/8/bits/basic_string.h ****       {
5153:/usr/include/c++/8/bits/basic_string.h **** 	_M_leak();
5154:/usr/include/c++/8/bits/basic_string.h **** 	return _M_data();
5155:/usr/include/c++/8/bits/basic_string.h ****       }
5156:/usr/include/c++/8/bits/basic_string.h **** #endif
5157:/usr/include/c++/8/bits/basic_string.h **** 
5158:/usr/include/c++/8/bits/basic_string.h ****       /**
5159:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
5160:/usr/include/c++/8/bits/basic_string.h ****       */
5161:/usr/include/c++/8/bits/basic_string.h ****       allocator_type
5162:/usr/include/c++/8/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
5163:/usr/include/c++/8/bits/basic_string.h ****       { return _M_dataplus; }
5164:/usr/include/c++/8/bits/basic_string.h **** 
5165:/usr/include/c++/8/bits/basic_string.h ****       /**
5166:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a C substring.
5167:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to locate.
5168:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5169:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
5170:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5171:/usr/include/c++/8/bits/basic_string.h ****        *
5172:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
5173:/usr/include/c++/8/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
5174:/usr/include/c++/8/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
5175:/usr/include/c++/8/bits/basic_string.h ****        *  npos.
5176:/usr/include/c++/8/bits/basic_string.h ****       */
5177:/usr/include/c++/8/bits/basic_string.h ****       size_type
5178:/usr/include/c++/8/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const
5179:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5180:/usr/include/c++/8/bits/basic_string.h **** 
5181:/usr/include/c++/8/bits/basic_string.h ****       /**
5182:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a string.
5183:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to locate.
5184:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5185:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5186:/usr/include/c++/8/bits/basic_string.h ****        *
5187:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
5188:/usr/include/c++/8/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
5189:/usr/include/c++/8/bits/basic_string.h ****        *  found, returns npos.
5190:/usr/include/c++/8/bits/basic_string.h ****       */
5191:/usr/include/c++/8/bits/basic_string.h ****       size_type
5192:/usr/include/c++/8/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
5193:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5194:/usr/include/c++/8/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
5195:/usr/include/c++/8/bits/basic_string.h **** 
5196:/usr/include/c++/8/bits/basic_string.h ****       /**
5197:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a C string.
5198:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to locate.
5199:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5200:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5201:/usr/include/c++/8/bits/basic_string.h ****        *
5202:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
5203:/usr/include/c++/8/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
5204:/usr/include/c++/8/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
5205:/usr/include/c++/8/bits/basic_string.h ****       */
5206:/usr/include/c++/8/bits/basic_string.h ****       size_type
5207:/usr/include/c++/8/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
5208:/usr/include/c++/8/bits/basic_string.h ****       {
5209:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5210:/usr/include/c++/8/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
5211:/usr/include/c++/8/bits/basic_string.h ****       }
5212:/usr/include/c++/8/bits/basic_string.h **** 
5213:/usr/include/c++/8/bits/basic_string.h ****       /**
5214:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character.
5215:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to locate.
5216:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5217:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
5218:/usr/include/c++/8/bits/basic_string.h ****        *
5219:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
5220:/usr/include/c++/8/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5221:/usr/include/c++/8/bits/basic_string.h ****        *  found.  If not found, returns npos.
5222:/usr/include/c++/8/bits/basic_string.h ****       */
5223:/usr/include/c++/8/bits/basic_string.h ****       size_type
5224:/usr/include/c++/8/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
5225:/usr/include/c++/8/bits/basic_string.h **** 
5226:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
5227:/usr/include/c++/8/bits/basic_string.h ****       /**
5228:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a string_view.
5229:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
5230:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5231:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5232:/usr/include/c++/8/bits/basic_string.h ****       */
5233:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
5234:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5235:/usr/include/c++/8/bits/basic_string.h **** 	find(const _Tp& __svt, size_type __pos = 0) const
5236:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5237:/usr/include/c++/8/bits/basic_string.h **** 	{
5238:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5239:/usr/include/c++/8/bits/basic_string.h **** 	  return this->find(__sv.data(), __pos, __sv.size());
5240:/usr/include/c++/8/bits/basic_string.h **** 	}
5241:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
5242:/usr/include/c++/8/bits/basic_string.h **** 
5243:/usr/include/c++/8/bits/basic_string.h ****       /**
5244:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a string.
5245:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to locate.
5246:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5247:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5248:/usr/include/c++/8/bits/basic_string.h ****        *
5249:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
5250:/usr/include/c++/8/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
5251:/usr/include/c++/8/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
5252:/usr/include/c++/8/bits/basic_string.h ****       */
5253:/usr/include/c++/8/bits/basic_string.h ****       size_type
5254:/usr/include/c++/8/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
5255:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5256:/usr/include/c++/8/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
5257:/usr/include/c++/8/bits/basic_string.h **** 
5258:/usr/include/c++/8/bits/basic_string.h ****       /**
5259:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
5260:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to locate.
5261:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5262:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5263:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5264:/usr/include/c++/8/bits/basic_string.h ****        *
5265:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
5266:/usr/include/c++/8/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
5267:/usr/include/c++/8/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
5268:/usr/include/c++/8/bits/basic_string.h ****        *  npos.
5269:/usr/include/c++/8/bits/basic_string.h ****       */
5270:/usr/include/c++/8/bits/basic_string.h ****       size_type
5271:/usr/include/c++/8/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const
5272:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5273:/usr/include/c++/8/bits/basic_string.h **** 
5274:/usr/include/c++/8/bits/basic_string.h ****       /**
5275:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a C string.
5276:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to locate.
5277:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
5278:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
5279:/usr/include/c++/8/bits/basic_string.h ****        *
5280:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
5281:/usr/include/c++/8/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
5282:/usr/include/c++/8/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
5283:/usr/include/c++/8/bits/basic_string.h ****       */
5284:/usr/include/c++/8/bits/basic_string.h ****       size_type
5285:/usr/include/c++/8/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
5286:/usr/include/c++/8/bits/basic_string.h ****       {
5287:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5288:/usr/include/c++/8/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
5289:/usr/include/c++/8/bits/basic_string.h ****       }
5290:/usr/include/c++/8/bits/basic_string.h **** 
5291:/usr/include/c++/8/bits/basic_string.h ****       /**
5292:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character.
5293:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to locate.
5294:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5295:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
5296:/usr/include/c++/8/bits/basic_string.h ****        *
5297:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
5298:/usr/include/c++/8/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5299:/usr/include/c++/8/bits/basic_string.h ****        *  found.  If not found, returns npos.
5300:/usr/include/c++/8/bits/basic_string.h ****       */
5301:/usr/include/c++/8/bits/basic_string.h ****       size_type
5302:/usr/include/c++/8/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
5303:/usr/include/c++/8/bits/basic_string.h **** 
5304:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
5305:/usr/include/c++/8/bits/basic_string.h ****       /**
5306:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a string_view.
5307:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
5308:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5309:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5310:/usr/include/c++/8/bits/basic_string.h ****       */
5311:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
5312:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5313:/usr/include/c++/8/bits/basic_string.h **** 	rfind(const _Tp& __svt, size_type __pos = npos) const
5314:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5315:/usr/include/c++/8/bits/basic_string.h **** 	{
5316:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5317:/usr/include/c++/8/bits/basic_string.h **** 	  return this->rfind(__sv.data(), __pos, __sv.size());
5318:/usr/include/c++/8/bits/basic_string.h **** 	}
5319:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
5320:/usr/include/c++/8/bits/basic_string.h **** 
5321:/usr/include/c++/8/bits/basic_string.h ****       /**
5322:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character of string.
5323:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
5324:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5325:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
5326:/usr/include/c++/8/bits/basic_string.h ****        *
5327:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5328:/usr/include/c++/8/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
5329:/usr/include/c++/8/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5330:/usr/include/c++/8/bits/basic_string.h ****        *  npos.
5331:/usr/include/c++/8/bits/basic_string.h ****       */
5332:/usr/include/c++/8/bits/basic_string.h ****       size_type
5333:/usr/include/c++/8/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
5334:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5335:/usr/include/c++/8/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
5336:/usr/include/c++/8/bits/basic_string.h **** 
5337:/usr/include/c++/8/bits/basic_string.h ****       /**
5338:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
5339:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
5340:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5341:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5342:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
5343:/usr/include/c++/8/bits/basic_string.h ****        *
5344:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5345:/usr/include/c++/8/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
5346:/usr/include/c++/8/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
5347:/usr/include/c++/8/bits/basic_string.h ****        *  returns npos.
5348:/usr/include/c++/8/bits/basic_string.h ****       */
5349:/usr/include/c++/8/bits/basic_string.h ****       size_type
5350:/usr/include/c++/8/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
5351:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5352:/usr/include/c++/8/bits/basic_string.h **** 
5353:/usr/include/c++/8/bits/basic_string.h ****       /**
5354:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
5355:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
5356:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5357:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
5358:/usr/include/c++/8/bits/basic_string.h ****        *
5359:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5360:/usr/include/c++/8/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
5361:/usr/include/c++/8/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5362:/usr/include/c++/8/bits/basic_string.h ****       */
5363:/usr/include/c++/8/bits/basic_string.h ****       size_type
5364:/usr/include/c++/8/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
5365:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5366:/usr/include/c++/8/bits/basic_string.h ****       {
5367:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5368:/usr/include/c++/8/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
5369:/usr/include/c++/8/bits/basic_string.h ****       }
5370:/usr/include/c++/8/bits/basic_string.h **** 
5371:/usr/include/c++/8/bits/basic_string.h ****       /**
5372:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character.
5373:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to locate.
5374:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5375:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
5376:/usr/include/c++/8/bits/basic_string.h ****        *
5377:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
5378:/usr/include/c++/8/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
5379:/usr/include/c++/8/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
5380:/usr/include/c++/8/bits/basic_string.h ****        *
5381:/usr/include/c++/8/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
5382:/usr/include/c++/8/bits/basic_string.h ****       */
5383:/usr/include/c++/8/bits/basic_string.h ****       size_type
5384:/usr/include/c++/8/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
5385:/usr/include/c++/8/bits/basic_string.h ****       { return this->find(__c, __pos); }
5386:/usr/include/c++/8/bits/basic_string.h **** 
5387:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
5388:/usr/include/c++/8/bits/basic_string.h ****       /**
5389:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character of a string_view.
5390:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5391:/usr/include/c++/8/bits/basic_string.h ****        *                characters to locate.
5392:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5393:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
5394:/usr/include/c++/8/bits/basic_string.h ****       */
5395:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
5396:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5397:/usr/include/c++/8/bits/basic_string.h **** 	find_first_of(const _Tp& __svt, size_type __pos = 0) const
5398:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5399:/usr/include/c++/8/bits/basic_string.h **** 	{
5400:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5401:/usr/include/c++/8/bits/basic_string.h **** 	  return this->find_first_of(__sv.data(), __pos, __sv.size());
5402:/usr/include/c++/8/bits/basic_string.h **** 	}
5403:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
5404:/usr/include/c++/8/bits/basic_string.h **** 
5405:/usr/include/c++/8/bits/basic_string.h ****       /**
5406:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
5407:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
5408:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5409:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
5410:/usr/include/c++/8/bits/basic_string.h ****        *
5411:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5412:/usr/include/c++/8/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
5413:/usr/include/c++/8/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5414:/usr/include/c++/8/bits/basic_string.h ****        *  npos.
5415:/usr/include/c++/8/bits/basic_string.h ****       */
5416:/usr/include/c++/8/bits/basic_string.h ****       size_type
5417:/usr/include/c++/8/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
5418:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5419:/usr/include/c++/8/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
5420:/usr/include/c++/8/bits/basic_string.h **** 
5421:/usr/include/c++/8/bits/basic_string.h ****       /**
5422:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
5423:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
5424:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5425:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5426:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
5427:/usr/include/c++/8/bits/basic_string.h ****        *
5428:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5429:/usr/include/c++/8/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
5430:/usr/include/c++/8/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
5431:/usr/include/c++/8/bits/basic_string.h ****        *  returns npos.
5432:/usr/include/c++/8/bits/basic_string.h ****       */
5433:/usr/include/c++/8/bits/basic_string.h ****       size_type
5434:/usr/include/c++/8/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
5435:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5436:/usr/include/c++/8/bits/basic_string.h **** 
5437:/usr/include/c++/8/bits/basic_string.h ****       /**
5438:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
5439:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
5440:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5441:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
5442:/usr/include/c++/8/bits/basic_string.h ****        *
5443:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5444:/usr/include/c++/8/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
5445:/usr/include/c++/8/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5446:/usr/include/c++/8/bits/basic_string.h ****       */
5447:/usr/include/c++/8/bits/basic_string.h ****       size_type
5448:/usr/include/c++/8/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
5449:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5450:/usr/include/c++/8/bits/basic_string.h ****       {
5451:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5452:/usr/include/c++/8/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
5453:/usr/include/c++/8/bits/basic_string.h ****       }
5454:/usr/include/c++/8/bits/basic_string.h **** 
5455:/usr/include/c++/8/bits/basic_string.h ****       /**
5456:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character.
5457:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to locate.
5458:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5459:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
5460:/usr/include/c++/8/bits/basic_string.h ****        *
5461:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
5462:/usr/include/c++/8/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5463:/usr/include/c++/8/bits/basic_string.h ****        *  found.  If not found, returns npos.
5464:/usr/include/c++/8/bits/basic_string.h ****        *
5465:/usr/include/c++/8/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
5466:/usr/include/c++/8/bits/basic_string.h ****       */
5467:/usr/include/c++/8/bits/basic_string.h ****       size_type
5468:/usr/include/c++/8/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
5469:/usr/include/c++/8/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
5470:/usr/include/c++/8/bits/basic_string.h **** 
5471:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
5472:/usr/include/c++/8/bits/basic_string.h ****       /**
5473:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
5474:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5475:/usr/include/c++/8/bits/basic_string.h ****        *                characters to locate.
5476:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5477:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
5478:/usr/include/c++/8/bits/basic_string.h ****       */
5479:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
5480:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5481:/usr/include/c++/8/bits/basic_string.h **** 	find_last_of(const _Tp& __svt, size_type __pos = npos) const
5482:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5483:/usr/include/c++/8/bits/basic_string.h **** 	{
5484:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5485:/usr/include/c++/8/bits/basic_string.h **** 	  return this->find_last_of(__sv.data(), __pos, __sv.size());
5486:/usr/include/c++/8/bits/basic_string.h **** 	}
5487:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
5488:/usr/include/c++/8/bits/basic_string.h **** 
5489:/usr/include/c++/8/bits/basic_string.h ****       /**
5490:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
5491:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
5492:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5493:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
5494:/usr/include/c++/8/bits/basic_string.h ****        *
5495:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
5496:/usr/include/c++/8/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
5497:/usr/include/c++/8/bits/basic_string.h ****        *  was found.  If not found, returns npos.
5498:/usr/include/c++/8/bits/basic_string.h ****       */
5499:/usr/include/c++/8/bits/basic_string.h ****       size_type
5500:/usr/include/c++/8/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
5501:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5502:/usr/include/c++/8/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
5503:/usr/include/c++/8/bits/basic_string.h **** 
5504:/usr/include/c++/8/bits/basic_string.h ****       /**
5505:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
5506:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5507:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5508:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
5509:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
5510:/usr/include/c++/8/bits/basic_string.h ****        *
5511:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
5512:/usr/include/c++/8/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
5513:/usr/include/c++/8/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5514:/usr/include/c++/8/bits/basic_string.h ****        *  found.  If not found, returns npos.
5515:/usr/include/c++/8/bits/basic_string.h ****       */
5516:/usr/include/c++/8/bits/basic_string.h ****       size_type
5517:/usr/include/c++/8/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
5518:/usr/include/c++/8/bits/basic_string.h **** 			size_type __n) const _GLIBCXX_NOEXCEPT;
5519:/usr/include/c++/8/bits/basic_string.h **** 
5520:/usr/include/c++/8/bits/basic_string.h ****       /**
5521:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
5522:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5523:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5524:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
5525:/usr/include/c++/8/bits/basic_string.h ****        *
5526:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
5527:/usr/include/c++/8/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
5528:/usr/include/c++/8/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5529:/usr/include/c++/8/bits/basic_string.h ****       */
5530:/usr/include/c++/8/bits/basic_string.h ****       size_type
5531:/usr/include/c++/8/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
5532:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5533:/usr/include/c++/8/bits/basic_string.h ****       {
5534:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5535:/usr/include/c++/8/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
5536:/usr/include/c++/8/bits/basic_string.h ****       }
5537:/usr/include/c++/8/bits/basic_string.h **** 
5538:/usr/include/c++/8/bits/basic_string.h ****       /**
5539:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a different character.
5540:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to avoid.
5541:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5542:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
5543:/usr/include/c++/8/bits/basic_string.h ****        *
5544:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
5545:/usr/include/c++/8/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
5546:/usr/include/c++/8/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
5547:/usr/include/c++/8/bits/basic_string.h ****       */
5548:/usr/include/c++/8/bits/basic_string.h ****       size_type
5549:/usr/include/c++/8/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
5550:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5551:/usr/include/c++/8/bits/basic_string.h **** 
5552:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
5553:/usr/include/c++/8/bits/basic_string.h ****       /**
5554:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find position of a character not in a string_view.
5555:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5556:/usr/include/c++/8/bits/basic_string.h ****        *                characters to avoid.
5557:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5558:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of first occurrence.
5559:/usr/include/c++/8/bits/basic_string.h ****        */
5560:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
5561:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5562:/usr/include/c++/8/bits/basic_string.h **** 	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const
5563:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5564:/usr/include/c++/8/bits/basic_string.h **** 	{
5565:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5566:/usr/include/c++/8/bits/basic_string.h **** 	  return this->find_first_not_of(__sv.data(), __pos, __sv.size());
5567:/usr/include/c++/8/bits/basic_string.h **** 	}
5568:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
5569:/usr/include/c++/8/bits/basic_string.h **** 
5570:/usr/include/c++/8/bits/basic_string.h ****       /**
5571:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
5572:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
5573:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5574:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
5575:/usr/include/c++/8/bits/basic_string.h ****        *
5576:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
5577:/usr/include/c++/8/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
5578:/usr/include/c++/8/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5579:/usr/include/c++/8/bits/basic_string.h ****        *  npos.
5580:/usr/include/c++/8/bits/basic_string.h ****       */
5581:/usr/include/c++/8/bits/basic_string.h ****       size_type
5582:/usr/include/c++/8/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
5583:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5584:/usr/include/c++/8/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
5585:/usr/include/c++/8/bits/basic_string.h **** 
5586:/usr/include/c++/8/bits/basic_string.h ****       /**
5587:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
5588:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5589:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5590:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
5591:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
5592:/usr/include/c++/8/bits/basic_string.h ****        *
5593:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
5594:/usr/include/c++/8/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
5595:/usr/include/c++/8/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
5596:/usr/include/c++/8/bits/basic_string.h ****        *  returns npos.
5597:/usr/include/c++/8/bits/basic_string.h ****       */
5598:/usr/include/c++/8/bits/basic_string.h ****       size_type
5599:/usr/include/c++/8/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
5600:/usr/include/c++/8/bits/basic_string.h **** 		       size_type __n) const _GLIBCXX_NOEXCEPT;
5601:/usr/include/c++/8/bits/basic_string.h ****       /**
5602:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
5603:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5604:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5605:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
5606:/usr/include/c++/8/bits/basic_string.h ****        *
5607:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
5608:/usr/include/c++/8/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
5609:/usr/include/c++/8/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5610:/usr/include/c++/8/bits/basic_string.h ****        *  npos.
5611:/usr/include/c++/8/bits/basic_string.h ****       */
5612:/usr/include/c++/8/bits/basic_string.h ****       size_type
5613:/usr/include/c++/8/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
5614:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5615:/usr/include/c++/8/bits/basic_string.h ****       {
5616:/usr/include/c++/8/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5617:/usr/include/c++/8/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
5618:/usr/include/c++/8/bits/basic_string.h ****       }
5619:/usr/include/c++/8/bits/basic_string.h **** 
5620:/usr/include/c++/8/bits/basic_string.h ****       /**
5621:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a different character.
5622:/usr/include/c++/8/bits/basic_string.h ****        *  @param __c  Character to avoid.
5623:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5624:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
5625:/usr/include/c++/8/bits/basic_string.h ****        *
5626:/usr/include/c++/8/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
5627:/usr/include/c++/8/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
5628:/usr/include/c++/8/bits/basic_string.h ****        *  found.  If not found, returns npos.
5629:/usr/include/c++/8/bits/basic_string.h ****       */
5630:/usr/include/c++/8/bits/basic_string.h ****       size_type
5631:/usr/include/c++/8/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
5632:/usr/include/c++/8/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5633:/usr/include/c++/8/bits/basic_string.h **** 
5634:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
5635:/usr/include/c++/8/bits/basic_string.h ****       /**
5636:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Find last position of a character not in a string_view.
5637:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5638:/usr/include/c++/8/bits/basic_string.h ****        *                characters to avoid.
5639:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5640:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Index of last occurrence.
5641:/usr/include/c++/8/bits/basic_string.h ****        */
5642:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
5643:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5644:/usr/include/c++/8/bits/basic_string.h **** 	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const
5645:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5646:/usr/include/c++/8/bits/basic_string.h **** 	{
5647:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5648:/usr/include/c++/8/bits/basic_string.h **** 	  return this->find_last_not_of(__sv.data(), __pos, __sv.size());
5649:/usr/include/c++/8/bits/basic_string.h **** 	}
5650:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
5651:/usr/include/c++/8/bits/basic_string.h **** 
5652:/usr/include/c++/8/bits/basic_string.h ****       /**
5653:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Get a substring.
5654:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
5655:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
5656:/usr/include/c++/8/bits/basic_string.h ****        *  @return  The new string.
5657:/usr/include/c++/8/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
5658:/usr/include/c++/8/bits/basic_string.h ****        *
5659:/usr/include/c++/8/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
5660:/usr/include/c++/8/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
5661:/usr/include/c++/8/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
5662:/usr/include/c++/8/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
5663:/usr/include/c++/8/bits/basic_string.h ****       */
5664:/usr/include/c++/8/bits/basic_string.h ****       basic_string
5665:/usr/include/c++/8/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
5666:/usr/include/c++/8/bits/basic_string.h ****       { return basic_string(*this,
5667:/usr/include/c++/8/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
5668:/usr/include/c++/8/bits/basic_string.h **** 
5669:/usr/include/c++/8/bits/basic_string.h ****       /**
5670:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare to a string.
5671:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to compare against.
5672:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5673:/usr/include/c++/8/bits/basic_string.h ****        *
5674:/usr/include/c++/8/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
5675:/usr/include/c++/8/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
5676:/usr/include/c++/8/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
5677:/usr/include/c++/8/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
5678:/usr/include/c++/8/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
5679:/usr/include/c++/8/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
5680:/usr/include/c++/8/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
5681:/usr/include/c++/8/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
5682:/usr/include/c++/8/bits/basic_string.h ****       */
5683:/usr/include/c++/8/bits/basic_string.h ****       int
5684:/usr/include/c++/8/bits/basic_string.h ****       compare(const basic_string& __str) const
5685:/usr/include/c++/8/bits/basic_string.h ****       {
5686:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __size = this->size();
5687:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __osize = __str.size();
5688:/usr/include/c++/8/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
5689:/usr/include/c++/8/bits/basic_string.h **** 
5690:/usr/include/c++/8/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
5691:/usr/include/c++/8/bits/basic_string.h **** 	if (!__r)
5692:/usr/include/c++/8/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
5693:/usr/include/c++/8/bits/basic_string.h **** 	return __r;
5694:/usr/include/c++/8/bits/basic_string.h ****       }
5695:/usr/include/c++/8/bits/basic_string.h **** 
5696:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus > 201402L
5697:/usr/include/c++/8/bits/basic_string.h ****       /**
5698:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5699:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt An object convertible to string_view to compare against.
5700:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5701:/usr/include/c++/8/bits/basic_string.h ****        */
5702:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
5703:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, int>
5704:/usr/include/c++/8/bits/basic_string.h **** 	compare(const _Tp& __svt) const
5705:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5706:/usr/include/c++/8/bits/basic_string.h **** 	{
5707:/usr/include/c++/8/bits/basic_string.h **** 	   __sv_type __sv = __svt;
5708:/usr/include/c++/8/bits/basic_string.h **** 	  const size_type __size = this->size();
5709:/usr/include/c++/8/bits/basic_string.h **** 	  const size_type __osize = __sv.size();
5710:/usr/include/c++/8/bits/basic_string.h **** 	  const size_type __len = std::min(__size, __osize);
5711:/usr/include/c++/8/bits/basic_string.h **** 
5712:/usr/include/c++/8/bits/basic_string.h **** 	  int __r = traits_type::compare(_M_data(), __sv.data(), __len);
5713:/usr/include/c++/8/bits/basic_string.h **** 	  if (!__r)
5714:/usr/include/c++/8/bits/basic_string.h **** 	    __r = _S_compare(__size, __osize);
5715:/usr/include/c++/8/bits/basic_string.h **** 	  return __r;
5716:/usr/include/c++/8/bits/basic_string.h **** 	}
5717:/usr/include/c++/8/bits/basic_string.h **** 
5718:/usr/include/c++/8/bits/basic_string.h ****       /**
5719:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5720:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  A position in the string to start comparing from.
5721:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  The number of characters to compare.
5722:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
5723:/usr/include/c++/8/bits/basic_string.h ****        *                against.
5724:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5725:/usr/include/c++/8/bits/basic_string.h ****        */
5726:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
5727:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, int>
5728:/usr/include/c++/8/bits/basic_string.h **** 	compare(size_type __pos, size_type __n, const _Tp& __svt) const
5729:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5730:/usr/include/c++/8/bits/basic_string.h **** 	{
5731:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5732:/usr/include/c++/8/bits/basic_string.h **** 	  return __sv_type(*this).substr(__pos, __n).compare(__sv);
5733:/usr/include/c++/8/bits/basic_string.h **** 	}
5734:/usr/include/c++/8/bits/basic_string.h **** 
5735:/usr/include/c++/8/bits/basic_string.h ****       /**
5736:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5737:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos1  A position in the string to start comparing from.
5738:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  The number of characters to compare.
5739:/usr/include/c++/8/bits/basic_string.h ****        *  @param __svt   An object convertible to string_view to compare
5740:/usr/include/c++/8/bits/basic_string.h ****        *                 against.
5741:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos2  A position in the string_view to start comparing from.
5742:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2  The number of characters to compare.
5743:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5744:/usr/include/c++/8/bits/basic_string.h ****        */
5745:/usr/include/c++/8/bits/basic_string.h ****       template<typename _Tp>
5746:/usr/include/c++/8/bits/basic_string.h **** 	_If_sv<_Tp, int>
5747:/usr/include/c++/8/bits/basic_string.h **** 	compare(size_type __pos1, size_type __n1, const _Tp& __svt,
5748:/usr/include/c++/8/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos) const
5749:/usr/include/c++/8/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5750:/usr/include/c++/8/bits/basic_string.h **** 	{
5751:/usr/include/c++/8/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5752:/usr/include/c++/8/bits/basic_string.h **** 	  return __sv_type(*this)
5753:/usr/include/c++/8/bits/basic_string.h **** 	    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
5754:/usr/include/c++/8/bits/basic_string.h **** 	}
5755:/usr/include/c++/8/bits/basic_string.h **** #endif // C++17
5756:/usr/include/c++/8/bits/basic_string.h **** 
5757:/usr/include/c++/8/bits/basic_string.h ****       /**
5758:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare substring to a string.
5759:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5760:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
5761:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to compare against.
5762:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5763:/usr/include/c++/8/bits/basic_string.h ****        *
5764:/usr/include/c++/8/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
5765:/usr/include/c++/8/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
5766:/usr/include/c++/8/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
5767:/usr/include/c++/8/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
5768:/usr/include/c++/8/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
5769:/usr/include/c++/8/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
5770:/usr/include/c++/8/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
5771:/usr/include/c++/8/bits/basic_string.h ****        *  strings by calling
5772:/usr/include/c++/8/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
5773:/usr/include/c++/8/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
5774:/usr/include/c++/8/bits/basic_string.h ****        *  the shorter one is ordered first.
5775:/usr/include/c++/8/bits/basic_string.h ****       */
5776:/usr/include/c++/8/bits/basic_string.h ****       int
5777:/usr/include/c++/8/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
5778:/usr/include/c++/8/bits/basic_string.h **** 
5779:/usr/include/c++/8/bits/basic_string.h ****       /**
5780:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
5781:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
5782:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5783:/usr/include/c++/8/bits/basic_string.h ****        *  @param __str  String to compare against.
5784:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
5785:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
5786:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5787:/usr/include/c++/8/bits/basic_string.h ****        *
5788:/usr/include/c++/8/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5789:/usr/include/c++/8/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
5790:/usr/include/c++/8/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
5791:/usr/include/c++/8/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
5792:/usr/include/c++/8/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
5793:/usr/include/c++/8/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
5794:/usr/include/c++/8/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
5795:/usr/include/c++/8/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
5796:/usr/include/c++/8/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
5797:/usr/include/c++/8/bits/basic_string.h ****        *  calling
5798:/usr/include/c++/8/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
5799:/usr/include/c++/8/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
5800:/usr/include/c++/8/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
5801:/usr/include/c++/8/bits/basic_string.h ****       */
5802:/usr/include/c++/8/bits/basic_string.h ****       int
5803:/usr/include/c++/8/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
5804:/usr/include/c++/8/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos) const;
5805:/usr/include/c++/8/bits/basic_string.h **** 
5806:/usr/include/c++/8/bits/basic_string.h ****       /**
5807:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare to a C string.
5808:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to compare against.
5809:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5810:/usr/include/c++/8/bits/basic_string.h ****        *
5811:/usr/include/c++/8/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
5812:/usr/include/c++/8/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
5813:/usr/include/c++/8/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
5814:/usr/include/c++/8/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
5815:/usr/include/c++/8/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
5816:/usr/include/c++/8/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
5817:/usr/include/c++/8/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
5818:/usr/include/c++/8/bits/basic_string.h ****        *  ordered first.
5819:/usr/include/c++/8/bits/basic_string.h ****       */
5820:/usr/include/c++/8/bits/basic_string.h ****       int
5821:/usr/include/c++/8/bits/basic_string.h ****       compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;
5822:/usr/include/c++/8/bits/basic_string.h **** 
5823:/usr/include/c++/8/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
5824:/usr/include/c++/8/bits/basic_string.h ****       // 5 String::compare specification questionable
5825:/usr/include/c++/8/bits/basic_string.h ****       /**
5826:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
5827:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5828:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5829:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  C string to compare against.
5830:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5831:/usr/include/c++/8/bits/basic_string.h ****        *
5832:/usr/include/c++/8/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5833:/usr/include/c++/8/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
5834:/usr/include/c++/8/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
5835:/usr/include/c++/8/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
5836:/usr/include/c++/8/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
5837:/usr/include/c++/8/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
5838:/usr/include/c++/8/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
5839:/usr/include/c++/8/bits/basic_string.h ****        *  function then compares the two string by calling
5840:/usr/include/c++/8/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
5841:/usr/include/c++/8/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
5842:/usr/include/c++/8/bits/basic_string.h ****        *  one is ordered first.
5843:/usr/include/c++/8/bits/basic_string.h ****       */
5844:/usr/include/c++/8/bits/basic_string.h ****       int
5845:/usr/include/c++/8/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
5846:/usr/include/c++/8/bits/basic_string.h **** 
5847:/usr/include/c++/8/bits/basic_string.h ****       /**
5848:/usr/include/c++/8/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
5849:/usr/include/c++/8/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5850:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5851:/usr/include/c++/8/bits/basic_string.h ****        *  @param __s  character %array to compare against.
5852:/usr/include/c++/8/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
5853:/usr/include/c++/8/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5854:/usr/include/c++/8/bits/basic_string.h ****        *
5855:/usr/include/c++/8/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5856:/usr/include/c++/8/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
5857:/usr/include/c++/8/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
5858:/usr/include/c++/8/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
5859:/usr/include/c++/8/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
5860:/usr/include/c++/8/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
5861:/usr/include/c++/8/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
5862:/usr/include/c++/8/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
5863:/usr/include/c++/8/bits/basic_string.h ****        *  function then compares the two strings by calling
5864:/usr/include/c++/8/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
5865:/usr/include/c++/8/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
5866:/usr/include/c++/8/bits/basic_string.h ****        *  one is ordered first.
5867:/usr/include/c++/8/bits/basic_string.h ****        *
5868:/usr/include/c++/8/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
5869:/usr/include/c++/8/bits/basic_string.h ****        *  no special meaning.
5870:/usr/include/c++/8/bits/basic_string.h ****       */
5871:/usr/include/c++/8/bits/basic_string.h ****       int
5872:/usr/include/c++/8/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
5873:/usr/include/c++/8/bits/basic_string.h **** 	      size_type __n2) const;
5874:/usr/include/c++/8/bits/basic_string.h **** 
5875:/usr/include/c++/8/bits/basic_string.h **** # ifdef _GLIBCXX_TM_TS_INTERNAL
5876:/usr/include/c++/8/bits/basic_string.h ****       friend void
5877:/usr/include/c++/8/bits/basic_string.h ****       ::_txnal_cow_string_C1_for_exceptions(void* that, const char* s,
5878:/usr/include/c++/8/bits/basic_string.h **** 					    void* exc);
5879:/usr/include/c++/8/bits/basic_string.h ****       friend const char*
5880:/usr/include/c++/8/bits/basic_string.h ****       ::_txnal_cow_string_c_str(const void *that);
5881:/usr/include/c++/8/bits/basic_string.h ****       friend void
5882:/usr/include/c++/8/bits/basic_string.h ****       ::_txnal_cow_string_D1(void *that);
5883:/usr/include/c++/8/bits/basic_string.h ****       friend void
5884:/usr/include/c++/8/bits/basic_string.h ****       ::_txnal_cow_string_D1_commit(void *that);
5885:/usr/include/c++/8/bits/basic_string.h **** # endif
5886:/usr/include/c++/8/bits/basic_string.h ****   };
5887:/usr/include/c++/8/bits/basic_string.h **** #endif  // !_GLIBCXX_USE_CXX11_ABI
5888:/usr/include/c++/8/bits/basic_string.h **** 
5889:/usr/include/c++/8/bits/basic_string.h **** #if __cpp_deduction_guides >= 201606
5890:/usr/include/c++/8/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
5891:/usr/include/c++/8/bits/basic_string.h ****   template<typename _InputIterator, typename _CharT
5892:/usr/include/c++/8/bits/basic_string.h **** 	     = typename iterator_traits<_InputIterator>::value_type,
5893:/usr/include/c++/8/bits/basic_string.h **** 	   typename _Allocator = allocator<_CharT>,
5894:/usr/include/c++/8/bits/basic_string.h **** 	   typename = _RequireInputIter<_InputIterator>,
5895:/usr/include/c++/8/bits/basic_string.h **** 	   typename = _RequireAllocator<_Allocator>>
5896:/usr/include/c++/8/bits/basic_string.h ****     basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())
5897:/usr/include/c++/8/bits/basic_string.h ****       -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;
5898:/usr/include/c++/8/bits/basic_string.h **** 
5899:/usr/include/c++/8/bits/basic_string.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
5900:/usr/include/c++/8/bits/basic_string.h ****   // 3075. basic_string needs deduction guides from basic_string_view
5901:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits,
5902:/usr/include/c++/8/bits/basic_string.h **** 	   typename _Allocator = allocator<_CharT>,
5903:/usr/include/c++/8/bits/basic_string.h **** 	   typename = _RequireAllocator<_Allocator>>
5904:/usr/include/c++/8/bits/basic_string.h ****     basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())
5905:/usr/include/c++/8/bits/basic_string.h ****       -> basic_string<_CharT, _Traits, _Allocator>;
5906:/usr/include/c++/8/bits/basic_string.h **** 
5907:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits,
5908:/usr/include/c++/8/bits/basic_string.h **** 	   typename _Allocator = allocator<_CharT>,
5909:/usr/include/c++/8/bits/basic_string.h **** 	   typename = _RequireAllocator<_Allocator>>
5910:/usr/include/c++/8/bits/basic_string.h ****     basic_string(basic_string_view<_CharT, _Traits>,
5911:/usr/include/c++/8/bits/basic_string.h **** 		 typename basic_string<_CharT, _Traits, _Allocator>::size_type,
5912:/usr/include/c++/8/bits/basic_string.h **** 		 typename basic_string<_CharT, _Traits, _Allocator>::size_type,
5913:/usr/include/c++/8/bits/basic_string.h **** 		 const _Allocator& = _Allocator())
5914:/usr/include/c++/8/bits/basic_string.h ****       -> basic_string<_CharT, _Traits, _Allocator>;
5915:/usr/include/c++/8/bits/basic_string.h **** _GLIBCXX_END_NAMESPACE_CXX11
5916:/usr/include/c++/8/bits/basic_string.h **** #endif
5917:/usr/include/c++/8/bits/basic_string.h **** 
5918:/usr/include/c++/8/bits/basic_string.h ****   // operator+
5919:/usr/include/c++/8/bits/basic_string.h ****   /**
5920:/usr/include/c++/8/bits/basic_string.h ****    *  @brief  Concatenate two strings.
5921:/usr/include/c++/8/bits/basic_string.h ****    *  @param __lhs  First string.
5922:/usr/include/c++/8/bits/basic_string.h ****    *  @param __rhs  Last string.
5923:/usr/include/c++/8/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
5924:/usr/include/c++/8/bits/basic_string.h ****    */
5925:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5926:/usr/include/c++/8/bits/basic_string.h ****     basic_string<_CharT, _Traits, _Alloc>
5927:/usr/include/c++/8/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5928:/usr/include/c++/8/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5929:/usr/include/c++/8/bits/basic_string.h ****     {
5930:/usr/include/c++/8/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
5931:/usr/include/c++/8/bits/basic_string.h ****       __str.append(__rhs);
5932:/usr/include/c++/8/bits/basic_string.h ****       return __str;
5933:/usr/include/c++/8/bits/basic_string.h ****     }
5934:/usr/include/c++/8/bits/basic_string.h **** 
5935:/usr/include/c++/8/bits/basic_string.h ****   /**
5936:/usr/include/c++/8/bits/basic_string.h ****    *  @brief  Concatenate C string and string.
5937:/usr/include/c++/8/bits/basic_string.h ****    *  @param __lhs  First string.
5938:/usr/include/c++/8/bits/basic_string.h ****    *  @param __rhs  Last string.
5939:/usr/include/c++/8/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
5940:/usr/include/c++/8/bits/basic_string.h ****    */
5941:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5942:/usr/include/c++/8/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
5943:/usr/include/c++/8/bits/basic_string.h ****     operator+(const _CharT* __lhs,
5944:/usr/include/c++/8/bits/basic_string.h **** 	      const basic_string<_CharT,_Traits,_Alloc>& __rhs);
5945:/usr/include/c++/8/bits/basic_string.h **** 
5946:/usr/include/c++/8/bits/basic_string.h ****   /**
5947:/usr/include/c++/8/bits/basic_string.h ****    *  @brief  Concatenate character and string.
5948:/usr/include/c++/8/bits/basic_string.h ****    *  @param __lhs  First string.
5949:/usr/include/c++/8/bits/basic_string.h ****    *  @param __rhs  Last string.
5950:/usr/include/c++/8/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
5951:/usr/include/c++/8/bits/basic_string.h ****    */
5952:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5953:/usr/include/c++/8/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
5954:/usr/include/c++/8/bits/basic_string.h ****     operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);
5955:/usr/include/c++/8/bits/basic_string.h **** 
5956:/usr/include/c++/8/bits/basic_string.h ****   /**
5957:/usr/include/c++/8/bits/basic_string.h ****    *  @brief  Concatenate string and C string.
5958:/usr/include/c++/8/bits/basic_string.h ****    *  @param __lhs  First string.
5959:/usr/include/c++/8/bits/basic_string.h ****    *  @param __rhs  Last string.
5960:/usr/include/c++/8/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
5961:/usr/include/c++/8/bits/basic_string.h ****    */
5962:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5963:/usr/include/c++/8/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5964:/usr/include/c++/8/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5965:/usr/include/c++/8/bits/basic_string.h **** 	      const _CharT* __rhs)
5966:/usr/include/c++/8/bits/basic_string.h ****     {
5967:/usr/include/c++/8/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
5968:/usr/include/c++/8/bits/basic_string.h ****       __str.append(__rhs);
5969:/usr/include/c++/8/bits/basic_string.h ****       return __str;
5970:/usr/include/c++/8/bits/basic_string.h ****     }
5971:/usr/include/c++/8/bits/basic_string.h **** 
5972:/usr/include/c++/8/bits/basic_string.h ****   /**
5973:/usr/include/c++/8/bits/basic_string.h ****    *  @brief  Concatenate string and character.
5974:/usr/include/c++/8/bits/basic_string.h ****    *  @param __lhs  First string.
5975:/usr/include/c++/8/bits/basic_string.h ****    *  @param __rhs  Last string.
5976:/usr/include/c++/8/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
5977:/usr/include/c++/8/bits/basic_string.h ****    */
5978:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5979:/usr/include/c++/8/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5980:/usr/include/c++/8/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
5981:/usr/include/c++/8/bits/basic_string.h ****     {
5982:/usr/include/c++/8/bits/basic_string.h ****       typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
5983:/usr/include/c++/8/bits/basic_string.h ****       typedef typename __string_type::size_type		__size_type;
5984:/usr/include/c++/8/bits/basic_string.h ****       __string_type __str(__lhs);
5985:/usr/include/c++/8/bits/basic_string.h ****       __str.append(__size_type(1), __rhs);
5986:/usr/include/c++/8/bits/basic_string.h ****       return __str;
5987:/usr/include/c++/8/bits/basic_string.h ****     }
5988:/usr/include/c++/8/bits/basic_string.h **** 
5989:/usr/include/c++/8/bits/basic_string.h **** #if __cplusplus >= 201103L
5990:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5991:/usr/include/c++/8/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5992:/usr/include/c++/8/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
5993:/usr/include/c++/8/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5994:/usr/include/c++/8/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
5995:/usr/include/c++/8/bits/basic_string.h **** 
5996:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5997:/usr/include/c++/8/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5998:/usr/include/c++/8/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5999:/usr/include/c++/8/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
6000:/usr/include/c++/8/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
6001:/usr/include/c++/8/bits/basic_string.h **** 
6002:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6003:/usr/include/c++/8/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6004:/usr/include/c++/8/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
6005:/usr/include/c++/8/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
6006:/usr/include/c++/8/bits/basic_string.h ****     {
6007:/usr/include/c++/8/bits/basic_string.h ****       const auto __size = __lhs.size() + __rhs.size();
6008:/usr/include/c++/8/bits/basic_string.h ****       const bool __cond = (__size > __lhs.capacity()
6009:/usr/include/c++/8/bits/basic_string.h **** 			   && __size <= __rhs.capacity());
6010:/usr/include/c++/8/bits/basic_string.h ****       return __cond ? std::move(__rhs.insert(0, __lhs))
6011:/usr/include/c++/8/bits/basic_string.h **** 	            : std::move(__lhs.append(__rhs));
6012:/usr/include/c++/8/bits/basic_string.h ****     }
6013:/usr/include/c++/8/bits/basic_string.h **** 
6014:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6015:/usr/include/c++/8/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6016:/usr/include/c++/8/bits/basic_string.h ****     operator+(const _CharT* __lhs,
6017:/usr/include/c++/8/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
6018:/usr/include/c++/8/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
6019:/usr/include/c++/8/bits/basic_string.h **** 
6020:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6021:/usr/include/c++/8/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6022:/usr/include/c++/8/bits/basic_string.h ****     operator+(_CharT __lhs,
6023:/usr/include/c++/8/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
6024:/usr/include/c++/8/bits/basic_string.h ****     { return std::move(__rhs.insert(0, 1, __lhs)); }
6025:/usr/include/c++/8/bits/basic_string.h **** 
6026:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6027:/usr/include/c++/8/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6028:/usr/include/c++/8/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
6029:/usr/include/c++/8/bits/basic_string.h **** 	      const _CharT* __rhs)
6030:/usr/include/c++/8/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
6031:/usr/include/c++/8/bits/basic_string.h **** 
6032:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6033:/usr/include/c++/8/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6034:/usr/include/c++/8/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
6035:/usr/include/c++/8/bits/basic_string.h **** 	      _CharT __rhs)
6036:/usr/include/c++/8/bits/basic_string.h ****     { return std::move(__lhs.append(1, __rhs)); }
6037:/usr/include/c++/8/bits/basic_string.h **** #endif
6038:/usr/include/c++/8/bits/basic_string.h **** 
6039:/usr/include/c++/8/bits/basic_string.h ****   // operator ==
6040:/usr/include/c++/8/bits/basic_string.h ****   /**
6041:/usr/include/c++/8/bits/basic_string.h ****    *  @brief  Test equivalence of two strings.
6042:/usr/include/c++/8/bits/basic_string.h ****    *  @param __lhs  First string.
6043:/usr/include/c++/8/bits/basic_string.h ****    *  @param __rhs  Second string.
6044:/usr/include/c++/8/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
6045:/usr/include/c++/8/bits/basic_string.h ****    */
6046:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6047:/usr/include/c++/8/bits/basic_string.h ****     inline bool
6048:/usr/include/c++/8/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6049:/usr/include/c++/8/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6050:/usr/include/c++/8/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6051:/usr/include/c++/8/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
6052:/usr/include/c++/8/bits/basic_string.h **** 
6053:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT>
6054:/usr/include/c++/8/bits/basic_string.h ****     inline
6055:/usr/include/c++/8/bits/basic_string.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
6056:/usr/include/c++/8/bits/basic_string.h ****     operator==(const basic_string<_CharT>& __lhs,
6057:/usr/include/c++/8/bits/basic_string.h **** 	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
6058:/usr/include/c++/8/bits/basic_string.h ****     { return (__lhs.size() == __rhs.size()
6059:/usr/include/c++/8/bits/basic_string.h **** 	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
6060:/usr/include/c++/8/bits/basic_string.h **** 						    __lhs.size())); }
6061:/usr/include/c++/8/bits/basic_string.h **** 
6062:/usr/include/c++/8/bits/basic_string.h ****   /**
6063:/usr/include/c++/8/bits/basic_string.h ****    *  @brief  Test equivalence of C string and string.
6064:/usr/include/c++/8/bits/basic_string.h ****    *  @param __lhs  C string.
6065:/usr/include/c++/8/bits/basic_string.h ****    *  @param __rhs  String.
6066:/usr/include/c++/8/bits/basic_string.h ****    *  @return  True if @a __rhs.compare(@a __lhs) == 0.  False otherwise.
6067:/usr/include/c++/8/bits/basic_string.h ****    */
6068:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6069:/usr/include/c++/8/bits/basic_string.h ****     inline bool
6070:/usr/include/c++/8/bits/basic_string.h ****     operator==(const _CharT* __lhs,
6071:/usr/include/c++/8/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6072:/usr/include/c++/8/bits/basic_string.h ****     { return __rhs.compare(__lhs) == 0; }
6073:/usr/include/c++/8/bits/basic_string.h **** 
6074:/usr/include/c++/8/bits/basic_string.h ****   /**
6075:/usr/include/c++/8/bits/basic_string.h ****    *  @brief  Test equivalence of string and C string.
6076:/usr/include/c++/8/bits/basic_string.h ****    *  @param __lhs  String.
6077:/usr/include/c++/8/bits/basic_string.h ****    *  @param __rhs  C string.
6078:/usr/include/c++/8/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
6079:/usr/include/c++/8/bits/basic_string.h ****    */
6080:/usr/include/c++/8/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6081:/usr/include/c++/8/bits/basic_string.h ****     inline bool
6082:/usr/include/c++/8/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 2200              		.loc 4 6082 5
 2201              		.cfi_startproc
 2202 0000 55       		pushq	%rbp	#
 2203              		.cfi_def_cfa_offset 16
 2204              		.cfi_offset 6, -16
 2205 0001 4889E5   		movq	%rsp, %rbp	#,
 2206              		.cfi_def_cfa_register 6
 2207 0004 4883EC10 		subq	$16, %rsp	#,
 2208 0008 48897DF8 		movq	%rdi, -8(%rbp)	# __lhs, __lhs
 2209 000c 488975F0 		movq	%rsi, -16(%rbp)	# __rhs, __rhs
 2210              	# /usr/include/c++/8/bits/basic_string.h:6084:     { return __lhs.compare(__rhs) == 0; }
6083:/usr/include/c++/8/bits/basic_string.h **** 	       const _CharT* __rhs)
6084:/usr/include/c++/8/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
 2211              		.loc 4 6084 35
 2212 0010 488B55F0 		movq	-16(%rbp), %rdx	# __rhs, tmp90
 2213 0014 488B45F8 		movq	-8(%rbp), %rax	# __lhs, tmp91
 2214 0018 4889D6   		movq	%rdx, %rsi	# tmp90,
 2215 001b 4889C7   		movq	%rax, %rdi	# tmp91,
 2216 001e E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc@PLT	#
 2216      00
 2217              	# /usr/include/c++/8/bits/basic_string.h:6084:     { return __lhs.compare(__rhs) == 0; }
 2218              		.loc 4 6084 38
 2219 0023 85C0     		testl	%eax, %eax	# _1
 2220 0025 0F94C0   		sete	%al	#, _6
 2221              	# /usr/include/c++/8/bits/basic_string.h:6084:     { return __lhs.compare(__rhs) == 0; }
 2222              		.loc 4 6084 41
 2223 0028 C9       		leave	
 2224              		.cfi_def_cfa 7, 8
 2225 0029 C3       		ret	
 2226              		.cfi_endproc
 2227              	.LFE2460:
 2229              		.section	.text._ZSt9transformIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char
 2230              		.weak	_ZSt9transformIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIc
 2232              	_ZSt9transformIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 2233              	.LFB2465:
 2234              		.file 5 "/usr/include/c++/8/bits/stl_algo.h"
   1:/usr/include/c++/8/bits/stl_algo.h **** // Algorithm implementation -*- C++ -*-
   2:/usr/include/c++/8/bits/stl_algo.h **** 
   3:/usr/include/c++/8/bits/stl_algo.h **** // Copyright (C) 2001-2018 Free Software Foundation, Inc.
   4:/usr/include/c++/8/bits/stl_algo.h **** //
   5:/usr/include/c++/8/bits/stl_algo.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/8/bits/stl_algo.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/8/bits/stl_algo.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/8/bits/stl_algo.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/8/bits/stl_algo.h **** // any later version.
  10:/usr/include/c++/8/bits/stl_algo.h **** 
  11:/usr/include/c++/8/bits/stl_algo.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/8/bits/stl_algo.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/8/bits/stl_algo.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/8/bits/stl_algo.h **** // GNU General Public License for more details.
  15:/usr/include/c++/8/bits/stl_algo.h **** 
  16:/usr/include/c++/8/bits/stl_algo.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/8/bits/stl_algo.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/8/bits/stl_algo.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/8/bits/stl_algo.h **** 
  20:/usr/include/c++/8/bits/stl_algo.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/8/bits/stl_algo.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/8/bits/stl_algo.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/8/bits/stl_algo.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/8/bits/stl_algo.h **** 
  25:/usr/include/c++/8/bits/stl_algo.h **** /*
  26:/usr/include/c++/8/bits/stl_algo.h ****  *
  27:/usr/include/c++/8/bits/stl_algo.h ****  * Copyright (c) 1994
  28:/usr/include/c++/8/bits/stl_algo.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/8/bits/stl_algo.h ****  *
  30:/usr/include/c++/8/bits/stl_algo.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/8/bits/stl_algo.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/8/bits/stl_algo.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/8/bits/stl_algo.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/8/bits/stl_algo.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/8/bits/stl_algo.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/8/bits/stl_algo.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/8/bits/stl_algo.h ****  *
  38:/usr/include/c++/8/bits/stl_algo.h ****  *
  39:/usr/include/c++/8/bits/stl_algo.h ****  * Copyright (c) 1996
  40:/usr/include/c++/8/bits/stl_algo.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/8/bits/stl_algo.h ****  *
  42:/usr/include/c++/8/bits/stl_algo.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/8/bits/stl_algo.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/8/bits/stl_algo.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/8/bits/stl_algo.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/8/bits/stl_algo.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/8/bits/stl_algo.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/8/bits/stl_algo.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/8/bits/stl_algo.h ****  */
  50:/usr/include/c++/8/bits/stl_algo.h **** 
  51:/usr/include/c++/8/bits/stl_algo.h **** /** @file bits/stl_algo.h
  52:/usr/include/c++/8/bits/stl_algo.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/8/bits/stl_algo.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/c++/8/bits/stl_algo.h ****  */
  55:/usr/include/c++/8/bits/stl_algo.h **** 
  56:/usr/include/c++/8/bits/stl_algo.h **** #ifndef _STL_ALGO_H
  57:/usr/include/c++/8/bits/stl_algo.h **** #define _STL_ALGO_H 1
  58:/usr/include/c++/8/bits/stl_algo.h **** 
  59:/usr/include/c++/8/bits/stl_algo.h **** #include <cstdlib>	     // for rand
  60:/usr/include/c++/8/bits/stl_algo.h **** #include <bits/algorithmfwd.h>
  61:/usr/include/c++/8/bits/stl_algo.h **** #include <bits/stl_heap.h>
  62:/usr/include/c++/8/bits/stl_algo.h **** #include <bits/stl_tempbuf.h>  // for _Temporary_buffer
  63:/usr/include/c++/8/bits/stl_algo.h **** #include <bits/predefined_ops.h>
  64:/usr/include/c++/8/bits/stl_algo.h **** 
  65:/usr/include/c++/8/bits/stl_algo.h **** #if __cplusplus >= 201103L
  66:/usr/include/c++/8/bits/stl_algo.h **** #include <bits/uniform_int_dist.h>
  67:/usr/include/c++/8/bits/stl_algo.h **** #endif
  68:/usr/include/c++/8/bits/stl_algo.h **** 
  69:/usr/include/c++/8/bits/stl_algo.h **** // See concept_check.h for the __glibcxx_*_requires macros.
  70:/usr/include/c++/8/bits/stl_algo.h **** 
  71:/usr/include/c++/8/bits/stl_algo.h **** namespace std _GLIBCXX_VISIBILITY(default)
  72:/usr/include/c++/8/bits/stl_algo.h **** {
  73:/usr/include/c++/8/bits/stl_algo.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  74:/usr/include/c++/8/bits/stl_algo.h **** 
  75:/usr/include/c++/8/bits/stl_algo.h ****   /// Swaps the median value of *__a, *__b and *__c under __comp to *__result
  76:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _Iterator, typename _Compare>
  77:/usr/include/c++/8/bits/stl_algo.h ****     void
  78:/usr/include/c++/8/bits/stl_algo.h ****     __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
  79:/usr/include/c++/8/bits/stl_algo.h **** 			   _Iterator __c, _Compare __comp)
  80:/usr/include/c++/8/bits/stl_algo.h ****     {
  81:/usr/include/c++/8/bits/stl_algo.h ****       if (__comp(__a, __b))
  82:/usr/include/c++/8/bits/stl_algo.h **** 	{
  83:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__comp(__b, __c))
  84:/usr/include/c++/8/bits/stl_algo.h **** 	    std::iter_swap(__result, __b);
  85:/usr/include/c++/8/bits/stl_algo.h **** 	  else if (__comp(__a, __c))
  86:/usr/include/c++/8/bits/stl_algo.h **** 	    std::iter_swap(__result, __c);
  87:/usr/include/c++/8/bits/stl_algo.h **** 	  else
  88:/usr/include/c++/8/bits/stl_algo.h **** 	    std::iter_swap(__result, __a);
  89:/usr/include/c++/8/bits/stl_algo.h **** 	}
  90:/usr/include/c++/8/bits/stl_algo.h ****       else if (__comp(__a, __c))
  91:/usr/include/c++/8/bits/stl_algo.h **** 	std::iter_swap(__result, __a);
  92:/usr/include/c++/8/bits/stl_algo.h ****       else if (__comp(__b, __c))
  93:/usr/include/c++/8/bits/stl_algo.h **** 	std::iter_swap(__result, __c);
  94:/usr/include/c++/8/bits/stl_algo.h ****       else
  95:/usr/include/c++/8/bits/stl_algo.h **** 	std::iter_swap(__result, __b);
  96:/usr/include/c++/8/bits/stl_algo.h ****     }
  97:/usr/include/c++/8/bits/stl_algo.h **** 
  98:/usr/include/c++/8/bits/stl_algo.h ****   /// This is an overload used by find algos for the Input Iterator case.
  99:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 100:/usr/include/c++/8/bits/stl_algo.h ****     inline _InputIterator
 101:/usr/include/c++/8/bits/stl_algo.h ****     __find_if(_InputIterator __first, _InputIterator __last,
 102:/usr/include/c++/8/bits/stl_algo.h **** 	      _Predicate __pred, input_iterator_tag)
 103:/usr/include/c++/8/bits/stl_algo.h ****     {
 104:/usr/include/c++/8/bits/stl_algo.h ****       while (__first != __last && !__pred(__first))
 105:/usr/include/c++/8/bits/stl_algo.h **** 	++__first;
 106:/usr/include/c++/8/bits/stl_algo.h ****       return __first;
 107:/usr/include/c++/8/bits/stl_algo.h ****     }
 108:/usr/include/c++/8/bits/stl_algo.h **** 
 109:/usr/include/c++/8/bits/stl_algo.h ****   /// This is an overload used by find algos for the RAI case.
 110:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Predicate>
 111:/usr/include/c++/8/bits/stl_algo.h ****     _RandomAccessIterator
 112:/usr/include/c++/8/bits/stl_algo.h ****     __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 113:/usr/include/c++/8/bits/stl_algo.h **** 	      _Predicate __pred, random_access_iterator_tag)
 114:/usr/include/c++/8/bits/stl_algo.h ****     {
 115:/usr/include/c++/8/bits/stl_algo.h ****       typename iterator_traits<_RandomAccessIterator>::difference_type
 116:/usr/include/c++/8/bits/stl_algo.h **** 	__trip_count = (__last - __first) >> 2;
 117:/usr/include/c++/8/bits/stl_algo.h **** 
 118:/usr/include/c++/8/bits/stl_algo.h ****       for (; __trip_count > 0; --__trip_count)
 119:/usr/include/c++/8/bits/stl_algo.h **** 	{
 120:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__pred(__first))
 121:/usr/include/c++/8/bits/stl_algo.h **** 	    return __first;
 122:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
 123:/usr/include/c++/8/bits/stl_algo.h **** 
 124:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__pred(__first))
 125:/usr/include/c++/8/bits/stl_algo.h **** 	    return __first;
 126:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
 127:/usr/include/c++/8/bits/stl_algo.h **** 
 128:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__pred(__first))
 129:/usr/include/c++/8/bits/stl_algo.h **** 	    return __first;
 130:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
 131:/usr/include/c++/8/bits/stl_algo.h **** 
 132:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__pred(__first))
 133:/usr/include/c++/8/bits/stl_algo.h **** 	    return __first;
 134:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
 135:/usr/include/c++/8/bits/stl_algo.h **** 	}
 136:/usr/include/c++/8/bits/stl_algo.h **** 
 137:/usr/include/c++/8/bits/stl_algo.h ****       switch (__last - __first)
 138:/usr/include/c++/8/bits/stl_algo.h **** 	{
 139:/usr/include/c++/8/bits/stl_algo.h **** 	case 3:
 140:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__pred(__first))
 141:/usr/include/c++/8/bits/stl_algo.h **** 	    return __first;
 142:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
 143:/usr/include/c++/8/bits/stl_algo.h **** 	case 2:
 144:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__pred(__first))
 145:/usr/include/c++/8/bits/stl_algo.h **** 	    return __first;
 146:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
 147:/usr/include/c++/8/bits/stl_algo.h **** 	case 1:
 148:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__pred(__first))
 149:/usr/include/c++/8/bits/stl_algo.h **** 	    return __first;
 150:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
 151:/usr/include/c++/8/bits/stl_algo.h **** 	case 0:
 152:/usr/include/c++/8/bits/stl_algo.h **** 	default:
 153:/usr/include/c++/8/bits/stl_algo.h **** 	  return __last;
 154:/usr/include/c++/8/bits/stl_algo.h **** 	}
 155:/usr/include/c++/8/bits/stl_algo.h ****     }
 156:/usr/include/c++/8/bits/stl_algo.h **** 
 157:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _Iterator, typename _Predicate>
 158:/usr/include/c++/8/bits/stl_algo.h ****     inline _Iterator
 159:/usr/include/c++/8/bits/stl_algo.h ****     __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 160:/usr/include/c++/8/bits/stl_algo.h ****     {
 161:/usr/include/c++/8/bits/stl_algo.h ****       return __find_if(__first, __last, __pred,
 162:/usr/include/c++/8/bits/stl_algo.h **** 		       std::__iterator_category(__first));
 163:/usr/include/c++/8/bits/stl_algo.h ****     }
 164:/usr/include/c++/8/bits/stl_algo.h **** 
 165:/usr/include/c++/8/bits/stl_algo.h ****   /// Provided for stable_partition to use.
 166:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 167:/usr/include/c++/8/bits/stl_algo.h ****     inline _InputIterator
 168:/usr/include/c++/8/bits/stl_algo.h ****     __find_if_not(_InputIterator __first, _InputIterator __last,
 169:/usr/include/c++/8/bits/stl_algo.h **** 		  _Predicate __pred)
 170:/usr/include/c++/8/bits/stl_algo.h ****     {
 171:/usr/include/c++/8/bits/stl_algo.h ****       return std::__find_if(__first, __last,
 172:/usr/include/c++/8/bits/stl_algo.h **** 			    __gnu_cxx::__ops::__negate(__pred),
 173:/usr/include/c++/8/bits/stl_algo.h **** 			    std::__iterator_category(__first));
 174:/usr/include/c++/8/bits/stl_algo.h ****     }
 175:/usr/include/c++/8/bits/stl_algo.h **** 
 176:/usr/include/c++/8/bits/stl_algo.h ****   /// Like find_if_not(), but uses and updates a count of the
 177:/usr/include/c++/8/bits/stl_algo.h ****   /// remaining range length instead of comparing against an end
 178:/usr/include/c++/8/bits/stl_algo.h ****   /// iterator.
 179:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate, typename _Distance>
 180:/usr/include/c++/8/bits/stl_algo.h ****     _InputIterator
 181:/usr/include/c++/8/bits/stl_algo.h ****     __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
 182:/usr/include/c++/8/bits/stl_algo.h ****     {
 183:/usr/include/c++/8/bits/stl_algo.h ****       for (; __len; --__len,  (void) ++__first)
 184:/usr/include/c++/8/bits/stl_algo.h **** 	if (!__pred(__first))
 185:/usr/include/c++/8/bits/stl_algo.h **** 	  break;
 186:/usr/include/c++/8/bits/stl_algo.h ****       return __first;
 187:/usr/include/c++/8/bits/stl_algo.h ****     }
 188:/usr/include/c++/8/bits/stl_algo.h **** 
 189:/usr/include/c++/8/bits/stl_algo.h ****   // set_difference
 190:/usr/include/c++/8/bits/stl_algo.h ****   // set_intersection
 191:/usr/include/c++/8/bits/stl_algo.h ****   // set_symmetric_difference
 192:/usr/include/c++/8/bits/stl_algo.h ****   // set_union
 193:/usr/include/c++/8/bits/stl_algo.h ****   // for_each
 194:/usr/include/c++/8/bits/stl_algo.h ****   // find
 195:/usr/include/c++/8/bits/stl_algo.h ****   // find_if
 196:/usr/include/c++/8/bits/stl_algo.h ****   // find_first_of
 197:/usr/include/c++/8/bits/stl_algo.h ****   // adjacent_find
 198:/usr/include/c++/8/bits/stl_algo.h ****   // count
 199:/usr/include/c++/8/bits/stl_algo.h ****   // count_if
 200:/usr/include/c++/8/bits/stl_algo.h ****   // search
 201:/usr/include/c++/8/bits/stl_algo.h **** 
 202:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 203:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 204:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator1
 205:/usr/include/c++/8/bits/stl_algo.h ****     __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 206:/usr/include/c++/8/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 207:/usr/include/c++/8/bits/stl_algo.h **** 	     _BinaryPredicate  __predicate)
 208:/usr/include/c++/8/bits/stl_algo.h ****     {
 209:/usr/include/c++/8/bits/stl_algo.h ****       // Test for empty ranges
 210:/usr/include/c++/8/bits/stl_algo.h ****       if (__first1 == __last1 || __first2 == __last2)
 211:/usr/include/c++/8/bits/stl_algo.h **** 	return __first1;
 212:/usr/include/c++/8/bits/stl_algo.h **** 
 213:/usr/include/c++/8/bits/stl_algo.h ****       // Test for a pattern of length 1.
 214:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator2 __p1(__first2);
 215:/usr/include/c++/8/bits/stl_algo.h ****       if (++__p1 == __last2)
 216:/usr/include/c++/8/bits/stl_algo.h **** 	return std::__find_if(__first1, __last1,
 217:/usr/include/c++/8/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
 218:/usr/include/c++/8/bits/stl_algo.h **** 
 219:/usr/include/c++/8/bits/stl_algo.h ****       // General case.
 220:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator2 __p;
 221:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator1 __current = __first1;
 222:/usr/include/c++/8/bits/stl_algo.h **** 
 223:/usr/include/c++/8/bits/stl_algo.h ****       for (;;)
 224:/usr/include/c++/8/bits/stl_algo.h **** 	{
 225:/usr/include/c++/8/bits/stl_algo.h **** 	  __first1 =
 226:/usr/include/c++/8/bits/stl_algo.h **** 	    std::__find_if(__first1, __last1,
 227:/usr/include/c++/8/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
 228:/usr/include/c++/8/bits/stl_algo.h **** 
 229:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__first1 == __last1)
 230:/usr/include/c++/8/bits/stl_algo.h **** 	    return __last1;
 231:/usr/include/c++/8/bits/stl_algo.h **** 
 232:/usr/include/c++/8/bits/stl_algo.h **** 	  __p = __p1;
 233:/usr/include/c++/8/bits/stl_algo.h **** 	  __current = __first1;
 234:/usr/include/c++/8/bits/stl_algo.h **** 	  if (++__current == __last1)
 235:/usr/include/c++/8/bits/stl_algo.h **** 	    return __last1;
 236:/usr/include/c++/8/bits/stl_algo.h **** 
 237:/usr/include/c++/8/bits/stl_algo.h **** 	  while (__predicate(__current, __p))
 238:/usr/include/c++/8/bits/stl_algo.h **** 	    {
 239:/usr/include/c++/8/bits/stl_algo.h **** 	      if (++__p == __last2)
 240:/usr/include/c++/8/bits/stl_algo.h **** 		return __first1;
 241:/usr/include/c++/8/bits/stl_algo.h **** 	      if (++__current == __last1)
 242:/usr/include/c++/8/bits/stl_algo.h **** 		return __last1;
 243:/usr/include/c++/8/bits/stl_algo.h **** 	    }
 244:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first1;
 245:/usr/include/c++/8/bits/stl_algo.h **** 	}
 246:/usr/include/c++/8/bits/stl_algo.h ****       return __first1;
 247:/usr/include/c++/8/bits/stl_algo.h ****     }
 248:/usr/include/c++/8/bits/stl_algo.h **** 
 249:/usr/include/c++/8/bits/stl_algo.h ****   // search_n
 250:/usr/include/c++/8/bits/stl_algo.h **** 
 251:/usr/include/c++/8/bits/stl_algo.h ****   /**
 252:/usr/include/c++/8/bits/stl_algo.h ****    *  This is an helper function for search_n overloaded for forward iterators.
 253:/usr/include/c++/8/bits/stl_algo.h ****   */
 254:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer,
 255:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 256:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator
 257:/usr/include/c++/8/bits/stl_algo.h ****     __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
 258:/usr/include/c++/8/bits/stl_algo.h **** 		   _Integer __count, _UnaryPredicate __unary_pred,
 259:/usr/include/c++/8/bits/stl_algo.h **** 		   std::forward_iterator_tag)
 260:/usr/include/c++/8/bits/stl_algo.h ****     {
 261:/usr/include/c++/8/bits/stl_algo.h ****       __first = std::__find_if(__first, __last, __unary_pred);
 262:/usr/include/c++/8/bits/stl_algo.h ****       while (__first != __last)
 263:/usr/include/c++/8/bits/stl_algo.h **** 	{
 264:/usr/include/c++/8/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::difference_type
 265:/usr/include/c++/8/bits/stl_algo.h **** 	    __n = __count;
 266:/usr/include/c++/8/bits/stl_algo.h **** 	  _ForwardIterator __i = __first;
 267:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__i;
 268:/usr/include/c++/8/bits/stl_algo.h **** 	  while (__i != __last && __n != 1 && __unary_pred(__i))
 269:/usr/include/c++/8/bits/stl_algo.h **** 	    {
 270:/usr/include/c++/8/bits/stl_algo.h **** 	      ++__i;
 271:/usr/include/c++/8/bits/stl_algo.h **** 	      --__n;
 272:/usr/include/c++/8/bits/stl_algo.h **** 	    }
 273:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__n == 1)
 274:/usr/include/c++/8/bits/stl_algo.h **** 	    return __first;
 275:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__i == __last)
 276:/usr/include/c++/8/bits/stl_algo.h **** 	    return __last;
 277:/usr/include/c++/8/bits/stl_algo.h **** 	  __first = std::__find_if(++__i, __last, __unary_pred);
 278:/usr/include/c++/8/bits/stl_algo.h **** 	}
 279:/usr/include/c++/8/bits/stl_algo.h ****       return __last;
 280:/usr/include/c++/8/bits/stl_algo.h ****     }
 281:/usr/include/c++/8/bits/stl_algo.h **** 
 282:/usr/include/c++/8/bits/stl_algo.h ****   /**
 283:/usr/include/c++/8/bits/stl_algo.h ****    *  This is an helper function for search_n overloaded for random access
 284:/usr/include/c++/8/bits/stl_algo.h ****    *  iterators.
 285:/usr/include/c++/8/bits/stl_algo.h ****   */
 286:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIter, typename _Integer,
 287:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 288:/usr/include/c++/8/bits/stl_algo.h ****     _RandomAccessIter
 289:/usr/include/c++/8/bits/stl_algo.h ****     __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
 290:/usr/include/c++/8/bits/stl_algo.h **** 		   _Integer __count, _UnaryPredicate __unary_pred,
 291:/usr/include/c++/8/bits/stl_algo.h **** 		   std::random_access_iterator_tag)
 292:/usr/include/c++/8/bits/stl_algo.h ****     {
 293:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 294:/usr/include/c++/8/bits/stl_algo.h **** 	_DistanceType;
 295:/usr/include/c++/8/bits/stl_algo.h **** 
 296:/usr/include/c++/8/bits/stl_algo.h ****       _DistanceType __tailSize = __last - __first;
 297:/usr/include/c++/8/bits/stl_algo.h ****       _DistanceType __remainder = __count;
 298:/usr/include/c++/8/bits/stl_algo.h **** 
 299:/usr/include/c++/8/bits/stl_algo.h ****       while (__remainder <= __tailSize) // the main loop...
 300:/usr/include/c++/8/bits/stl_algo.h **** 	{
 301:/usr/include/c++/8/bits/stl_algo.h **** 	  __first += __remainder;
 302:/usr/include/c++/8/bits/stl_algo.h **** 	  __tailSize -= __remainder;
 303:/usr/include/c++/8/bits/stl_algo.h **** 	  // __first here is always pointing to one past the last element of
 304:/usr/include/c++/8/bits/stl_algo.h **** 	  // next possible match.
 305:/usr/include/c++/8/bits/stl_algo.h **** 	  _RandomAccessIter __backTrack = __first; 
 306:/usr/include/c++/8/bits/stl_algo.h **** 	  while (__unary_pred(--__backTrack))
 307:/usr/include/c++/8/bits/stl_algo.h **** 	    {
 308:/usr/include/c++/8/bits/stl_algo.h **** 	      if (--__remainder == 0)
 309:/usr/include/c++/8/bits/stl_algo.h **** 		return (__first - __count); // Success
 310:/usr/include/c++/8/bits/stl_algo.h **** 	    }
 311:/usr/include/c++/8/bits/stl_algo.h **** 	  __remainder = __count + 1 - (__first - __backTrack);
 312:/usr/include/c++/8/bits/stl_algo.h **** 	}
 313:/usr/include/c++/8/bits/stl_algo.h ****       return __last; // Failure
 314:/usr/include/c++/8/bits/stl_algo.h ****     }
 315:/usr/include/c++/8/bits/stl_algo.h **** 
 316:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer,
 317:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 318:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator
 319:/usr/include/c++/8/bits/stl_algo.h ****     __search_n(_ForwardIterator __first, _ForwardIterator __last,
 320:/usr/include/c++/8/bits/stl_algo.h **** 	       _Integer __count,
 321:/usr/include/c++/8/bits/stl_algo.h **** 	       _UnaryPredicate __unary_pred)
 322:/usr/include/c++/8/bits/stl_algo.h ****     {
 323:/usr/include/c++/8/bits/stl_algo.h ****       if (__count <= 0)
 324:/usr/include/c++/8/bits/stl_algo.h **** 	return __first;
 325:/usr/include/c++/8/bits/stl_algo.h **** 
 326:/usr/include/c++/8/bits/stl_algo.h ****       if (__count == 1)
 327:/usr/include/c++/8/bits/stl_algo.h **** 	return std::__find_if(__first, __last, __unary_pred);
 328:/usr/include/c++/8/bits/stl_algo.h **** 
 329:/usr/include/c++/8/bits/stl_algo.h ****       return std::__search_n_aux(__first, __last, __count, __unary_pred,
 330:/usr/include/c++/8/bits/stl_algo.h **** 				 std::__iterator_category(__first));
 331:/usr/include/c++/8/bits/stl_algo.h ****     }
 332:/usr/include/c++/8/bits/stl_algo.h **** 
 333:/usr/include/c++/8/bits/stl_algo.h ****   // find_end for forward iterators.
 334:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 335:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 336:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator1
 337:/usr/include/c++/8/bits/stl_algo.h ****     __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 338:/usr/include/c++/8/bits/stl_algo.h **** 	       _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 339:/usr/include/c++/8/bits/stl_algo.h **** 	       forward_iterator_tag, forward_iterator_tag,
 340:/usr/include/c++/8/bits/stl_algo.h **** 	       _BinaryPredicate __comp)
 341:/usr/include/c++/8/bits/stl_algo.h ****     {
 342:/usr/include/c++/8/bits/stl_algo.h ****       if (__first2 == __last2)
 343:/usr/include/c++/8/bits/stl_algo.h **** 	return __last1;
 344:/usr/include/c++/8/bits/stl_algo.h **** 
 345:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator1 __result = __last1;
 346:/usr/include/c++/8/bits/stl_algo.h ****       while (1)
 347:/usr/include/c++/8/bits/stl_algo.h **** 	{
 348:/usr/include/c++/8/bits/stl_algo.h **** 	  _ForwardIterator1 __new_result
 349:/usr/include/c++/8/bits/stl_algo.h **** 	    = std::__search(__first1, __last1, __first2, __last2, __comp);
 350:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__new_result == __last1)
 351:/usr/include/c++/8/bits/stl_algo.h **** 	    return __result;
 352:/usr/include/c++/8/bits/stl_algo.h **** 	  else
 353:/usr/include/c++/8/bits/stl_algo.h **** 	    {
 354:/usr/include/c++/8/bits/stl_algo.h **** 	      __result = __new_result;
 355:/usr/include/c++/8/bits/stl_algo.h **** 	      __first1 = __new_result;
 356:/usr/include/c++/8/bits/stl_algo.h **** 	      ++__first1;
 357:/usr/include/c++/8/bits/stl_algo.h **** 	    }
 358:/usr/include/c++/8/bits/stl_algo.h **** 	}
 359:/usr/include/c++/8/bits/stl_algo.h ****     }
 360:/usr/include/c++/8/bits/stl_algo.h **** 
 361:/usr/include/c++/8/bits/stl_algo.h ****   // find_end for bidirectional iterators (much faster).
 362:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
 363:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 364:/usr/include/c++/8/bits/stl_algo.h ****     _BidirectionalIterator1
 365:/usr/include/c++/8/bits/stl_algo.h ****     __find_end(_BidirectionalIterator1 __first1,
 366:/usr/include/c++/8/bits/stl_algo.h **** 	       _BidirectionalIterator1 __last1,
 367:/usr/include/c++/8/bits/stl_algo.h **** 	       _BidirectionalIterator2 __first2,
 368:/usr/include/c++/8/bits/stl_algo.h **** 	       _BidirectionalIterator2 __last2,
 369:/usr/include/c++/8/bits/stl_algo.h **** 	       bidirectional_iterator_tag, bidirectional_iterator_tag,
 370:/usr/include/c++/8/bits/stl_algo.h **** 	       _BinaryPredicate __comp)
 371:/usr/include/c++/8/bits/stl_algo.h ****     {
 372:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
 373:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
 374:/usr/include/c++/8/bits/stl_algo.h **** 				  _BidirectionalIterator1>)
 375:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
 376:/usr/include/c++/8/bits/stl_algo.h **** 				  _BidirectionalIterator2>)
 377:/usr/include/c++/8/bits/stl_algo.h **** 
 378:/usr/include/c++/8/bits/stl_algo.h ****       typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
 379:/usr/include/c++/8/bits/stl_algo.h ****       typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;
 380:/usr/include/c++/8/bits/stl_algo.h **** 
 381:/usr/include/c++/8/bits/stl_algo.h ****       _RevIterator1 __rlast1(__first1);
 382:/usr/include/c++/8/bits/stl_algo.h ****       _RevIterator2 __rlast2(__first2);
 383:/usr/include/c++/8/bits/stl_algo.h ****       _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
 384:/usr/include/c++/8/bits/stl_algo.h **** 					      _RevIterator2(__last2), __rlast2,
 385:/usr/include/c++/8/bits/stl_algo.h **** 					      __comp);
 386:/usr/include/c++/8/bits/stl_algo.h **** 
 387:/usr/include/c++/8/bits/stl_algo.h ****       if (__rresult == __rlast1)
 388:/usr/include/c++/8/bits/stl_algo.h **** 	return __last1;
 389:/usr/include/c++/8/bits/stl_algo.h ****       else
 390:/usr/include/c++/8/bits/stl_algo.h **** 	{
 391:/usr/include/c++/8/bits/stl_algo.h **** 	  _BidirectionalIterator1 __result = __rresult.base();
 392:/usr/include/c++/8/bits/stl_algo.h **** 	  std::advance(__result, -std::distance(__first2, __last2));
 393:/usr/include/c++/8/bits/stl_algo.h **** 	  return __result;
 394:/usr/include/c++/8/bits/stl_algo.h **** 	}
 395:/usr/include/c++/8/bits/stl_algo.h ****     }
 396:/usr/include/c++/8/bits/stl_algo.h **** 
 397:/usr/include/c++/8/bits/stl_algo.h ****   /**
 398:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Find last matching subsequence in a sequence.
 399:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 400:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
 401:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
 402:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first2  Start of sequence to match.
 403:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last2   End of sequence to match.
 404:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   The last iterator @c i in the range
 405:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__first1,__last1-(__last2-__first2)) such that @c *(i+N) ==
 406:/usr/include/c++/8/bits/stl_algo.h ****    *  @p *(__first2+N) for each @c N in the range @p
 407:/usr/include/c++/8/bits/stl_algo.h ****    *  [0,__last2-__first2), or @p __last1 if no such iterator exists.
 408:/usr/include/c++/8/bits/stl_algo.h ****    *
 409:/usr/include/c++/8/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
 410:/usr/include/c++/8/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
 411:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first2,__last2) and returns an iterator to the __first
 412:/usr/include/c++/8/bits/stl_algo.h ****    *  element of the sub-sequence, or @p __last1 if the sub-sequence
 413:/usr/include/c++/8/bits/stl_algo.h ****    *  is not found.  The sub-sequence will be the last such
 414:/usr/include/c++/8/bits/stl_algo.h ****    *  subsequence contained in [__first1,__last1).
 415:/usr/include/c++/8/bits/stl_algo.h ****    *
 416:/usr/include/c++/8/bits/stl_algo.h ****    *  Because the sub-sequence must lie completely within the range @p
 417:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first1,__last1) it must start at a position less than @p
 418:/usr/include/c++/8/bits/stl_algo.h ****    *  __last1-(__last2-__first2) where @p __last2-__first2 is the
 419:/usr/include/c++/8/bits/stl_algo.h ****    *  length of the sub-sequence.  This means that the returned
 420:/usr/include/c++/8/bits/stl_algo.h ****    *  iterator @c i will be in the range @p
 421:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2))
 422:/usr/include/c++/8/bits/stl_algo.h ****   */
 423:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 424:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator1
 425:/usr/include/c++/8/bits/stl_algo.h ****     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 426:/usr/include/c++/8/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2)
 427:/usr/include/c++/8/bits/stl_algo.h ****     {
 428:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
 429:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
 430:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
 431:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 432:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
 433:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
 434:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 435:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
 436:/usr/include/c++/8/bits/stl_algo.h **** 
 437:/usr/include/c++/8/bits/stl_algo.h ****       return std::__find_end(__first1, __last1, __first2, __last2,
 438:/usr/include/c++/8/bits/stl_algo.h **** 			     std::__iterator_category(__first1),
 439:/usr/include/c++/8/bits/stl_algo.h **** 			     std::__iterator_category(__first2),
 440:/usr/include/c++/8/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_equal_to_iter());
 441:/usr/include/c++/8/bits/stl_algo.h ****     }
 442:/usr/include/c++/8/bits/stl_algo.h **** 
 443:/usr/include/c++/8/bits/stl_algo.h ****   /**
 444:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Find last matching subsequence in a sequence using a predicate.
 445:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 446:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
 447:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
 448:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first2  Start of sequence to match.
 449:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last2   End of sequence to match.
 450:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp    The predicate to use.
 451:/usr/include/c++/8/bits/stl_algo.h ****    *  @return The last iterator @c i in the range @p
 452:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2)) such that @c
 453:/usr/include/c++/8/bits/stl_algo.h ****    *  predicate(*(i+N), @p (__first2+N)) is true for each @c N in the
 454:/usr/include/c++/8/bits/stl_algo.h ****    *  range @p [0,__last2-__first2), or @p __last1 if no such iterator
 455:/usr/include/c++/8/bits/stl_algo.h ****    *  exists.
 456:/usr/include/c++/8/bits/stl_algo.h ****    *
 457:/usr/include/c++/8/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
 458:/usr/include/c++/8/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
 459:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first2,__last2) using comp as a predicate and returns an
 460:/usr/include/c++/8/bits/stl_algo.h ****    *  iterator to the first element of the sub-sequence, or @p __last1
 461:/usr/include/c++/8/bits/stl_algo.h ****    *  if the sub-sequence is not found.  The sub-sequence will be the
 462:/usr/include/c++/8/bits/stl_algo.h ****    *  last such subsequence contained in [__first,__last1).
 463:/usr/include/c++/8/bits/stl_algo.h ****    *
 464:/usr/include/c++/8/bits/stl_algo.h ****    *  Because the sub-sequence must lie completely within the range @p
 465:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first1,__last1) it must start at a position less than @p
 466:/usr/include/c++/8/bits/stl_algo.h ****    *  __last1-(__last2-__first2) where @p __last2-__first2 is the
 467:/usr/include/c++/8/bits/stl_algo.h ****    *  length of the sub-sequence.  This means that the returned
 468:/usr/include/c++/8/bits/stl_algo.h ****    *  iterator @c i will be in the range @p
 469:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2))
 470:/usr/include/c++/8/bits/stl_algo.h ****   */
 471:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 472:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 473:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator1
 474:/usr/include/c++/8/bits/stl_algo.h ****     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 475:/usr/include/c++/8/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 476:/usr/include/c++/8/bits/stl_algo.h **** 	     _BinaryPredicate __comp)
 477:/usr/include/c++/8/bits/stl_algo.h ****     {
 478:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
 479:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
 480:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
 481:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
 482:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
 483:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
 484:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 485:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
 486:/usr/include/c++/8/bits/stl_algo.h **** 
 487:/usr/include/c++/8/bits/stl_algo.h ****       return std::__find_end(__first1, __last1, __first2, __last2,
 488:/usr/include/c++/8/bits/stl_algo.h **** 			     std::__iterator_category(__first1),
 489:/usr/include/c++/8/bits/stl_algo.h **** 			     std::__iterator_category(__first2),
 490:/usr/include/c++/8/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_iter(__comp));
 491:/usr/include/c++/8/bits/stl_algo.h ****     }
 492:/usr/include/c++/8/bits/stl_algo.h **** 
 493:/usr/include/c++/8/bits/stl_algo.h **** #if __cplusplus >= 201103L
 494:/usr/include/c++/8/bits/stl_algo.h ****   /**
 495:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Checks that a predicate is true for all the elements
 496:/usr/include/c++/8/bits/stl_algo.h ****    *          of a sequence.
 497:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 498:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 499:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 500:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 501:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 502:/usr/include/c++/8/bits/stl_algo.h ****    *
 503:/usr/include/c++/8/bits/stl_algo.h ****    *  Returns true if @p __pred is true for each element in the range
 504:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__first,__last), and false otherwise.
 505:/usr/include/c++/8/bits/stl_algo.h ****   */
 506:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 507:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
 508:/usr/include/c++/8/bits/stl_algo.h ****     all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 509:/usr/include/c++/8/bits/stl_algo.h ****     { return __last == std::find_if_not(__first, __last, __pred); }
 510:/usr/include/c++/8/bits/stl_algo.h **** 
 511:/usr/include/c++/8/bits/stl_algo.h ****   /**
 512:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Checks that a predicate is false for all the elements
 513:/usr/include/c++/8/bits/stl_algo.h ****    *          of a sequence.
 514:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 515:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 516:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 517:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 518:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 519:/usr/include/c++/8/bits/stl_algo.h ****    *
 520:/usr/include/c++/8/bits/stl_algo.h ****    *  Returns true if @p __pred is false for each element in the range
 521:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__first,__last), and false otherwise.
 522:/usr/include/c++/8/bits/stl_algo.h ****   */
 523:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 524:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
 525:/usr/include/c++/8/bits/stl_algo.h ****     none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 526:/usr/include/c++/8/bits/stl_algo.h ****     { return __last == _GLIBCXX_STD_A::find_if(__first, __last, __pred); }
 527:/usr/include/c++/8/bits/stl_algo.h **** 
 528:/usr/include/c++/8/bits/stl_algo.h ****   /**
 529:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Checks that a predicate is false for at least an element
 530:/usr/include/c++/8/bits/stl_algo.h ****    *          of a sequence.
 531:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 532:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 533:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 534:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 535:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 536:/usr/include/c++/8/bits/stl_algo.h ****    *
 537:/usr/include/c++/8/bits/stl_algo.h ****    *  Returns true if an element exists in the range @p
 538:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first,__last) such that @p __pred is true, and false
 539:/usr/include/c++/8/bits/stl_algo.h ****    *  otherwise.
 540:/usr/include/c++/8/bits/stl_algo.h ****   */
 541:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 542:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
 543:/usr/include/c++/8/bits/stl_algo.h ****     any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 544:/usr/include/c++/8/bits/stl_algo.h ****     { return !std::none_of(__first, __last, __pred); }
 545:/usr/include/c++/8/bits/stl_algo.h **** 
 546:/usr/include/c++/8/bits/stl_algo.h ****   /**
 547:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Find the first element in a sequence for which a
 548:/usr/include/c++/8/bits/stl_algo.h ****    *          predicate is false.
 549:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 550:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 551:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 552:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 553:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   The first iterator @c i in the range @p [__first,__last)
 554:/usr/include/c++/8/bits/stl_algo.h ****    *  such that @p __pred(*i) is false, or @p __last if no such iterator exists.
 555:/usr/include/c++/8/bits/stl_algo.h ****   */
 556:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 557:/usr/include/c++/8/bits/stl_algo.h ****     inline _InputIterator
 558:/usr/include/c++/8/bits/stl_algo.h ****     find_if_not(_InputIterator __first, _InputIterator __last,
 559:/usr/include/c++/8/bits/stl_algo.h **** 		_Predicate __pred)
 560:/usr/include/c++/8/bits/stl_algo.h ****     {
 561:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
 562:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 563:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 564:/usr/include/c++/8/bits/stl_algo.h **** 	      typename iterator_traits<_InputIterator>::value_type>)
 565:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 566:/usr/include/c++/8/bits/stl_algo.h ****       return std::__find_if_not(__first, __last,
 567:/usr/include/c++/8/bits/stl_algo.h **** 				__gnu_cxx::__ops::__pred_iter(__pred));
 568:/usr/include/c++/8/bits/stl_algo.h ****     }
 569:/usr/include/c++/8/bits/stl_algo.h **** 
 570:/usr/include/c++/8/bits/stl_algo.h ****   /**
 571:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Checks whether the sequence is partitioned.
 572:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 573:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 574:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 575:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 576:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  True if the range @p [__first,__last) is partioned by @p __pred,
 577:/usr/include/c++/8/bits/stl_algo.h ****    *  i.e. if all elements that satisfy @p __pred appear before those that
 578:/usr/include/c++/8/bits/stl_algo.h ****    *  do not.
 579:/usr/include/c++/8/bits/stl_algo.h ****   */
 580:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 581:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
 582:/usr/include/c++/8/bits/stl_algo.h ****     is_partitioned(_InputIterator __first, _InputIterator __last,
 583:/usr/include/c++/8/bits/stl_algo.h **** 		   _Predicate __pred)
 584:/usr/include/c++/8/bits/stl_algo.h ****     {
 585:/usr/include/c++/8/bits/stl_algo.h ****       __first = std::find_if_not(__first, __last, __pred);
 586:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __last)
 587:/usr/include/c++/8/bits/stl_algo.h **** 	return true;
 588:/usr/include/c++/8/bits/stl_algo.h ****       ++__first;
 589:/usr/include/c++/8/bits/stl_algo.h ****       return std::none_of(__first, __last, __pred);
 590:/usr/include/c++/8/bits/stl_algo.h ****     }
 591:/usr/include/c++/8/bits/stl_algo.h **** 
 592:/usr/include/c++/8/bits/stl_algo.h ****   /**
 593:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Find the partition point of a partitioned range.
 594:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 595:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
 596:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
 597:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 598:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  An iterator @p mid such that @p all_of(__first, mid, __pred)
 599:/usr/include/c++/8/bits/stl_algo.h ****    *           and @p none_of(mid, __last, __pred) are both true.
 600:/usr/include/c++/8/bits/stl_algo.h ****   */
 601:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 602:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator
 603:/usr/include/c++/8/bits/stl_algo.h ****     partition_point(_ForwardIterator __first, _ForwardIterator __last,
 604:/usr/include/c++/8/bits/stl_algo.h **** 		    _Predicate __pred)
 605:/usr/include/c++/8/bits/stl_algo.h ****     {
 606:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
 607:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
 608:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 609:/usr/include/c++/8/bits/stl_algo.h **** 	      typename iterator_traits<_ForwardIterator>::value_type>)
 610:/usr/include/c++/8/bits/stl_algo.h **** 
 611:/usr/include/c++/8/bits/stl_algo.h ****       // A specific debug-mode test will be necessary...
 612:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 613:/usr/include/c++/8/bits/stl_algo.h **** 
 614:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
 615:/usr/include/c++/8/bits/stl_algo.h **** 	_DistanceType;
 616:/usr/include/c++/8/bits/stl_algo.h **** 
 617:/usr/include/c++/8/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
 618:/usr/include/c++/8/bits/stl_algo.h ****       _DistanceType __half;
 619:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __middle;
 620:/usr/include/c++/8/bits/stl_algo.h **** 
 621:/usr/include/c++/8/bits/stl_algo.h ****       while (__len > 0)
 622:/usr/include/c++/8/bits/stl_algo.h **** 	{
 623:/usr/include/c++/8/bits/stl_algo.h **** 	  __half = __len >> 1;
 624:/usr/include/c++/8/bits/stl_algo.h **** 	  __middle = __first;
 625:/usr/include/c++/8/bits/stl_algo.h **** 	  std::advance(__middle, __half);
 626:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__pred(*__middle))
 627:/usr/include/c++/8/bits/stl_algo.h **** 	    {
 628:/usr/include/c++/8/bits/stl_algo.h **** 	      __first = __middle;
 629:/usr/include/c++/8/bits/stl_algo.h **** 	      ++__first;
 630:/usr/include/c++/8/bits/stl_algo.h **** 	      __len = __len - __half - 1;
 631:/usr/include/c++/8/bits/stl_algo.h **** 	    }
 632:/usr/include/c++/8/bits/stl_algo.h **** 	  else
 633:/usr/include/c++/8/bits/stl_algo.h **** 	    __len = __half;
 634:/usr/include/c++/8/bits/stl_algo.h **** 	}
 635:/usr/include/c++/8/bits/stl_algo.h ****       return __first;
 636:/usr/include/c++/8/bits/stl_algo.h ****     }
 637:/usr/include/c++/8/bits/stl_algo.h **** #endif
 638:/usr/include/c++/8/bits/stl_algo.h **** 
 639:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 640:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Predicate>
 641:/usr/include/c++/8/bits/stl_algo.h ****     _OutputIterator
 642:/usr/include/c++/8/bits/stl_algo.h ****     __remove_copy_if(_InputIterator __first, _InputIterator __last,
 643:/usr/include/c++/8/bits/stl_algo.h **** 		     _OutputIterator __result, _Predicate __pred)
 644:/usr/include/c++/8/bits/stl_algo.h ****     {
 645:/usr/include/c++/8/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 646:/usr/include/c++/8/bits/stl_algo.h **** 	if (!__pred(__first))
 647:/usr/include/c++/8/bits/stl_algo.h **** 	  {
 648:/usr/include/c++/8/bits/stl_algo.h **** 	    *__result = *__first;
 649:/usr/include/c++/8/bits/stl_algo.h **** 	    ++__result;
 650:/usr/include/c++/8/bits/stl_algo.h **** 	  }
 651:/usr/include/c++/8/bits/stl_algo.h ****       return __result;
 652:/usr/include/c++/8/bits/stl_algo.h ****     }
 653:/usr/include/c++/8/bits/stl_algo.h **** 
 654:/usr/include/c++/8/bits/stl_algo.h ****   /**
 655:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Copy a sequence, removing elements of a given value.
 656:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 657:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 658:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 659:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 660:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __value   The value to be removed.
 661:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 662:/usr/include/c++/8/bits/stl_algo.h ****    *
 663:/usr/include/c++/8/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) not equal
 664:/usr/include/c++/8/bits/stl_algo.h ****    *  to @p __value to the range beginning at @p __result.
 665:/usr/include/c++/8/bits/stl_algo.h ****    *  remove_copy() is stable, so the relative order of elements that
 666:/usr/include/c++/8/bits/stl_algo.h ****    *  are copied is unchanged.
 667:/usr/include/c++/8/bits/stl_algo.h ****   */
 668:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator, typename _Tp>
 669:/usr/include/c++/8/bits/stl_algo.h ****     inline _OutputIterator
 670:/usr/include/c++/8/bits/stl_algo.h ****     remove_copy(_InputIterator __first, _InputIterator __last,
 671:/usr/include/c++/8/bits/stl_algo.h **** 		_OutputIterator __result, const _Tp& __value)
 672:/usr/include/c++/8/bits/stl_algo.h ****     {
 673:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
 674:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 675:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 676:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 677:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 678:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
 679:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 680:/usr/include/c++/8/bits/stl_algo.h **** 
 681:/usr/include/c++/8/bits/stl_algo.h ****       return std::__remove_copy_if(__first, __last, __result,
 682:/usr/include/c++/8/bits/stl_algo.h **** 	__gnu_cxx::__ops::__iter_equals_val(__value));
 683:/usr/include/c++/8/bits/stl_algo.h ****     }
 684:/usr/include/c++/8/bits/stl_algo.h **** 
 685:/usr/include/c++/8/bits/stl_algo.h ****   /**
 686:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Copy a sequence, removing elements for which a predicate is true.
 687:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 688:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 689:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 690:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 691:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 692:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 693:/usr/include/c++/8/bits/stl_algo.h ****    *
 694:/usr/include/c++/8/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 695:/usr/include/c++/8/bits/stl_algo.h ****    *  @p __pred returns false to the range beginning at @p __result.
 696:/usr/include/c++/8/bits/stl_algo.h ****    *
 697:/usr/include/c++/8/bits/stl_algo.h ****    *  remove_copy_if() is stable, so the relative order of elements that are
 698:/usr/include/c++/8/bits/stl_algo.h ****    *  copied is unchanged.
 699:/usr/include/c++/8/bits/stl_algo.h ****   */
 700:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 701:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Predicate>
 702:/usr/include/c++/8/bits/stl_algo.h ****     inline _OutputIterator
 703:/usr/include/c++/8/bits/stl_algo.h ****     remove_copy_if(_InputIterator __first, _InputIterator __last,
 704:/usr/include/c++/8/bits/stl_algo.h **** 		   _OutputIterator __result, _Predicate __pred)
 705:/usr/include/c++/8/bits/stl_algo.h ****     {
 706:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
 707:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 708:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 709:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 710:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 711:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 712:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 713:/usr/include/c++/8/bits/stl_algo.h **** 
 714:/usr/include/c++/8/bits/stl_algo.h ****       return std::__remove_copy_if(__first, __last, __result,
 715:/usr/include/c++/8/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__pred_iter(__pred));
 716:/usr/include/c++/8/bits/stl_algo.h ****     }
 717:/usr/include/c++/8/bits/stl_algo.h **** 
 718:/usr/include/c++/8/bits/stl_algo.h **** #if __cplusplus >= 201103L
 719:/usr/include/c++/8/bits/stl_algo.h ****   /**
 720:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Copy the elements of a sequence for which a predicate is true.
 721:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 722:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 723:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 724:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 725:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 726:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 727:/usr/include/c++/8/bits/stl_algo.h ****    *
 728:/usr/include/c++/8/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 729:/usr/include/c++/8/bits/stl_algo.h ****    *  @p __pred returns true to the range beginning at @p __result.
 730:/usr/include/c++/8/bits/stl_algo.h ****    *
 731:/usr/include/c++/8/bits/stl_algo.h ****    *  copy_if() is stable, so the relative order of elements that are
 732:/usr/include/c++/8/bits/stl_algo.h ****    *  copied is unchanged.
 733:/usr/include/c++/8/bits/stl_algo.h ****   */
 734:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 735:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Predicate>
 736:/usr/include/c++/8/bits/stl_algo.h ****     _OutputIterator
 737:/usr/include/c++/8/bits/stl_algo.h ****     copy_if(_InputIterator __first, _InputIterator __last,
 738:/usr/include/c++/8/bits/stl_algo.h **** 	    _OutputIterator __result, _Predicate __pred)
 739:/usr/include/c++/8/bits/stl_algo.h ****     {
 740:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
 741:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 742:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 743:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 744:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 745:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 746:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 747:/usr/include/c++/8/bits/stl_algo.h **** 
 748:/usr/include/c++/8/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 749:/usr/include/c++/8/bits/stl_algo.h **** 	if (__pred(*__first))
 750:/usr/include/c++/8/bits/stl_algo.h **** 	  {
 751:/usr/include/c++/8/bits/stl_algo.h **** 	    *__result = *__first;
 752:/usr/include/c++/8/bits/stl_algo.h **** 	    ++__result;
 753:/usr/include/c++/8/bits/stl_algo.h **** 	  }
 754:/usr/include/c++/8/bits/stl_algo.h ****       return __result;
 755:/usr/include/c++/8/bits/stl_algo.h ****     }
 756:/usr/include/c++/8/bits/stl_algo.h **** 
 757:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 758:/usr/include/c++/8/bits/stl_algo.h ****     _OutputIterator
 759:/usr/include/c++/8/bits/stl_algo.h ****     __copy_n(_InputIterator __first, _Size __n,
 760:/usr/include/c++/8/bits/stl_algo.h **** 	     _OutputIterator __result, input_iterator_tag)
 761:/usr/include/c++/8/bits/stl_algo.h ****     {
 762:/usr/include/c++/8/bits/stl_algo.h ****       if (__n > 0)
 763:/usr/include/c++/8/bits/stl_algo.h **** 	{
 764:/usr/include/c++/8/bits/stl_algo.h **** 	  while (true)
 765:/usr/include/c++/8/bits/stl_algo.h **** 	    {
 766:/usr/include/c++/8/bits/stl_algo.h **** 	      *__result = *__first;
 767:/usr/include/c++/8/bits/stl_algo.h **** 	      ++__result;
 768:/usr/include/c++/8/bits/stl_algo.h **** 	      if (--__n > 0)
 769:/usr/include/c++/8/bits/stl_algo.h **** 		++__first;
 770:/usr/include/c++/8/bits/stl_algo.h **** 	      else
 771:/usr/include/c++/8/bits/stl_algo.h **** 		break;
 772:/usr/include/c++/8/bits/stl_algo.h **** 	    }
 773:/usr/include/c++/8/bits/stl_algo.h **** 	}
 774:/usr/include/c++/8/bits/stl_algo.h ****       return __result;
 775:/usr/include/c++/8/bits/stl_algo.h ****     }
 776:/usr/include/c++/8/bits/stl_algo.h **** 
 777:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size,
 778:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _OutputIterator>
 779:/usr/include/c++/8/bits/stl_algo.h ****     inline _OutputIterator
 780:/usr/include/c++/8/bits/stl_algo.h ****     __copy_n(_RandomAccessIterator __first, _Size __n,
 781:/usr/include/c++/8/bits/stl_algo.h **** 	     _OutputIterator __result, random_access_iterator_tag)
 782:/usr/include/c++/8/bits/stl_algo.h ****     { return std::copy(__first, __first + __n, __result); }
 783:/usr/include/c++/8/bits/stl_algo.h **** 
 784:/usr/include/c++/8/bits/stl_algo.h ****   /**
 785:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Copies the range [first,first+n) into [result,result+n).
 786:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 787:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 788:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __n      The number of elements to copy.
 789:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __result An output iterator.
 790:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  result+n.
 791:/usr/include/c++/8/bits/stl_algo.h ****    *
 792:/usr/include/c++/8/bits/stl_algo.h ****    *  This inline function will boil down to a call to @c memmove whenever
 793:/usr/include/c++/8/bits/stl_algo.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 794:/usr/include/c++/8/bits/stl_algo.h ****    *  loop count will be known (and therefore a candidate for compiler
 795:/usr/include/c++/8/bits/stl_algo.h ****    *  optimizations such as unrolling).
 796:/usr/include/c++/8/bits/stl_algo.h ****   */
 797:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 798:/usr/include/c++/8/bits/stl_algo.h ****     inline _OutputIterator
 799:/usr/include/c++/8/bits/stl_algo.h ****     copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
 800:/usr/include/c++/8/bits/stl_algo.h ****     {
 801:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
 802:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 803:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 804:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 805:/usr/include/c++/8/bits/stl_algo.h **** 
 806:/usr/include/c++/8/bits/stl_algo.h ****       return std::__copy_n(__first, __n, __result,
 807:/usr/include/c++/8/bits/stl_algo.h **** 			   std::__iterator_category(__first));
 808:/usr/include/c++/8/bits/stl_algo.h ****     }
 809:/usr/include/c++/8/bits/stl_algo.h **** 
 810:/usr/include/c++/8/bits/stl_algo.h ****   /**
 811:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Copy the elements of a sequence to separate output sequences
 812:/usr/include/c++/8/bits/stl_algo.h ****    *         depending on the truth value of a predicate.
 813:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 814:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 815:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 816:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __out_true   An output iterator.
 817:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __out_false  An output iterator.
 818:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 819:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   A pair designating the ends of the resulting sequences.
 820:/usr/include/c++/8/bits/stl_algo.h ****    *
 821:/usr/include/c++/8/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 822:/usr/include/c++/8/bits/stl_algo.h ****    *  @p __pred returns true to the range beginning at @p out_true
 823:/usr/include/c++/8/bits/stl_algo.h ****    *  and each element for which @p __pred returns false to @p __out_false.
 824:/usr/include/c++/8/bits/stl_algo.h ****   */
 825:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator1,
 826:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _OutputIterator2, typename _Predicate>
 827:/usr/include/c++/8/bits/stl_algo.h ****     pair<_OutputIterator1, _OutputIterator2>
 828:/usr/include/c++/8/bits/stl_algo.h ****     partition_copy(_InputIterator __first, _InputIterator __last,
 829:/usr/include/c++/8/bits/stl_algo.h **** 		   _OutputIterator1 __out_true, _OutputIterator2 __out_false,
 830:/usr/include/c++/8/bits/stl_algo.h **** 		   _Predicate __pred)
 831:/usr/include/c++/8/bits/stl_algo.h ****     {
 832:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
 833:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 834:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator1,
 835:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 836:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator2,
 837:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 838:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 839:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 840:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 841:/usr/include/c++/8/bits/stl_algo.h ****       
 842:/usr/include/c++/8/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 843:/usr/include/c++/8/bits/stl_algo.h **** 	if (__pred(*__first))
 844:/usr/include/c++/8/bits/stl_algo.h **** 	  {
 845:/usr/include/c++/8/bits/stl_algo.h **** 	    *__out_true = *__first;
 846:/usr/include/c++/8/bits/stl_algo.h **** 	    ++__out_true;
 847:/usr/include/c++/8/bits/stl_algo.h **** 	  }
 848:/usr/include/c++/8/bits/stl_algo.h **** 	else
 849:/usr/include/c++/8/bits/stl_algo.h **** 	  {
 850:/usr/include/c++/8/bits/stl_algo.h **** 	    *__out_false = *__first;
 851:/usr/include/c++/8/bits/stl_algo.h **** 	    ++__out_false;
 852:/usr/include/c++/8/bits/stl_algo.h **** 	  }
 853:/usr/include/c++/8/bits/stl_algo.h **** 
 854:/usr/include/c++/8/bits/stl_algo.h ****       return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
 855:/usr/include/c++/8/bits/stl_algo.h ****     }
 856:/usr/include/c++/8/bits/stl_algo.h **** #endif
 857:/usr/include/c++/8/bits/stl_algo.h **** 
 858:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 859:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator
 860:/usr/include/c++/8/bits/stl_algo.h ****     __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 861:/usr/include/c++/8/bits/stl_algo.h **** 		_Predicate __pred)
 862:/usr/include/c++/8/bits/stl_algo.h ****     {
 863:/usr/include/c++/8/bits/stl_algo.h ****       __first = std::__find_if(__first, __last, __pred);
 864:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __last)
 865:/usr/include/c++/8/bits/stl_algo.h **** 	return __first;
 866:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __result = __first;
 867:/usr/include/c++/8/bits/stl_algo.h ****       ++__first;
 868:/usr/include/c++/8/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 869:/usr/include/c++/8/bits/stl_algo.h **** 	if (!__pred(__first))
 870:/usr/include/c++/8/bits/stl_algo.h **** 	  {
 871:/usr/include/c++/8/bits/stl_algo.h **** 	    *__result = _GLIBCXX_MOVE(*__first);
 872:/usr/include/c++/8/bits/stl_algo.h **** 	    ++__result;
 873:/usr/include/c++/8/bits/stl_algo.h **** 	  }
 874:/usr/include/c++/8/bits/stl_algo.h ****       return __result;
 875:/usr/include/c++/8/bits/stl_algo.h ****     }
 876:/usr/include/c++/8/bits/stl_algo.h **** 
 877:/usr/include/c++/8/bits/stl_algo.h ****   /**
 878:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Remove elements from a sequence.
 879:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 880:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 881:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 882:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __value  The value to be removed.
 883:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 884:/usr/include/c++/8/bits/stl_algo.h ****    *
 885:/usr/include/c++/8/bits/stl_algo.h ****    *  All elements equal to @p __value are removed from the range
 886:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__first,__last).
 887:/usr/include/c++/8/bits/stl_algo.h ****    *
 888:/usr/include/c++/8/bits/stl_algo.h ****    *  remove() is stable, so the relative order of elements that are
 889:/usr/include/c++/8/bits/stl_algo.h ****    *  not removed is unchanged.
 890:/usr/include/c++/8/bits/stl_algo.h ****    *
 891:/usr/include/c++/8/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 892:/usr/include/c++/8/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 893:/usr/include/c++/8/bits/stl_algo.h ****   */
 894:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
 895:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
 896:/usr/include/c++/8/bits/stl_algo.h ****     remove(_ForwardIterator __first, _ForwardIterator __last,
 897:/usr/include/c++/8/bits/stl_algo.h **** 	   const _Tp& __value)
 898:/usr/include/c++/8/bits/stl_algo.h ****     {
 899:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
 900:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 901:/usr/include/c++/8/bits/stl_algo.h **** 				  _ForwardIterator>)
 902:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 903:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
 904:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 905:/usr/include/c++/8/bits/stl_algo.h **** 
 906:/usr/include/c++/8/bits/stl_algo.h ****       return std::__remove_if(__first, __last,
 907:/usr/include/c++/8/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_equals_val(__value));
 908:/usr/include/c++/8/bits/stl_algo.h ****     }
 909:/usr/include/c++/8/bits/stl_algo.h **** 
 910:/usr/include/c++/8/bits/stl_algo.h ****   /**
 911:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Remove elements from a sequence using a predicate.
 912:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 913:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
 914:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
 915:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 916:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 917:/usr/include/c++/8/bits/stl_algo.h ****    *
 918:/usr/include/c++/8/bits/stl_algo.h ****    *  All elements for which @p __pred returns true are removed from the range
 919:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__first,__last).
 920:/usr/include/c++/8/bits/stl_algo.h ****    *
 921:/usr/include/c++/8/bits/stl_algo.h ****    *  remove_if() is stable, so the relative order of elements that are
 922:/usr/include/c++/8/bits/stl_algo.h ****    *  not removed is unchanged.
 923:/usr/include/c++/8/bits/stl_algo.h ****    *
 924:/usr/include/c++/8/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 925:/usr/include/c++/8/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 926:/usr/include/c++/8/bits/stl_algo.h ****   */
 927:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 928:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
 929:/usr/include/c++/8/bits/stl_algo.h ****     remove_if(_ForwardIterator __first, _ForwardIterator __last,
 930:/usr/include/c++/8/bits/stl_algo.h **** 	      _Predicate __pred)
 931:/usr/include/c++/8/bits/stl_algo.h ****     {
 932:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
 933:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 934:/usr/include/c++/8/bits/stl_algo.h **** 				  _ForwardIterator>)
 935:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 936:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
 937:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 938:/usr/include/c++/8/bits/stl_algo.h **** 
 939:/usr/include/c++/8/bits/stl_algo.h ****       return std::__remove_if(__first, __last,
 940:/usr/include/c++/8/bits/stl_algo.h **** 			      __gnu_cxx::__ops::__pred_iter(__pred));
 941:/usr/include/c++/8/bits/stl_algo.h ****     }
 942:/usr/include/c++/8/bits/stl_algo.h **** 
 943:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
 944:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator
 945:/usr/include/c++/8/bits/stl_algo.h ****     __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
 946:/usr/include/c++/8/bits/stl_algo.h **** 		    _BinaryPredicate __binary_pred)
 947:/usr/include/c++/8/bits/stl_algo.h ****     {
 948:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __last)
 949:/usr/include/c++/8/bits/stl_algo.h **** 	return __last;
 950:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __next = __first;
 951:/usr/include/c++/8/bits/stl_algo.h ****       while (++__next != __last)
 952:/usr/include/c++/8/bits/stl_algo.h **** 	{
 953:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__binary_pred(__first, __next))
 954:/usr/include/c++/8/bits/stl_algo.h **** 	    return __first;
 955:/usr/include/c++/8/bits/stl_algo.h **** 	  __first = __next;
 956:/usr/include/c++/8/bits/stl_algo.h **** 	}
 957:/usr/include/c++/8/bits/stl_algo.h ****       return __last;
 958:/usr/include/c++/8/bits/stl_algo.h ****     }
 959:/usr/include/c++/8/bits/stl_algo.h **** 
 960:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
 961:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator
 962:/usr/include/c++/8/bits/stl_algo.h ****     __unique(_ForwardIterator __first, _ForwardIterator __last,
 963:/usr/include/c++/8/bits/stl_algo.h **** 	     _BinaryPredicate __binary_pred)
 964:/usr/include/c++/8/bits/stl_algo.h ****     {
 965:/usr/include/c++/8/bits/stl_algo.h ****       // Skip the beginning, if already unique.
 966:/usr/include/c++/8/bits/stl_algo.h ****       __first = std::__adjacent_find(__first, __last, __binary_pred);
 967:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __last)
 968:/usr/include/c++/8/bits/stl_algo.h **** 	return __last;
 969:/usr/include/c++/8/bits/stl_algo.h **** 
 970:/usr/include/c++/8/bits/stl_algo.h ****       // Do the real copy work.
 971:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __dest = __first;
 972:/usr/include/c++/8/bits/stl_algo.h ****       ++__first;
 973:/usr/include/c++/8/bits/stl_algo.h ****       while (++__first != __last)
 974:/usr/include/c++/8/bits/stl_algo.h **** 	if (!__binary_pred(__dest, __first))
 975:/usr/include/c++/8/bits/stl_algo.h **** 	  *++__dest = _GLIBCXX_MOVE(*__first);
 976:/usr/include/c++/8/bits/stl_algo.h ****       return ++__dest;
 977:/usr/include/c++/8/bits/stl_algo.h ****     }
 978:/usr/include/c++/8/bits/stl_algo.h **** 
 979:/usr/include/c++/8/bits/stl_algo.h ****   /**
 980:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Remove consecutive duplicate values from a sequence.
 981:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 982:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
 983:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
 984:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
 985:/usr/include/c++/8/bits/stl_algo.h ****    *
 986:/usr/include/c++/8/bits/stl_algo.h ****    *  Removes all but the first element from each group of consecutive
 987:/usr/include/c++/8/bits/stl_algo.h ****    *  values that compare equal.
 988:/usr/include/c++/8/bits/stl_algo.h ****    *  unique() is stable, so the relative order of elements that are
 989:/usr/include/c++/8/bits/stl_algo.h ****    *  not removed is unchanged.
 990:/usr/include/c++/8/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 991:/usr/include/c++/8/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 992:/usr/include/c++/8/bits/stl_algo.h ****   */
 993:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator>
 994:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
 995:/usr/include/c++/8/bits/stl_algo.h ****     unique(_ForwardIterator __first, _ForwardIterator __last)
 996:/usr/include/c++/8/bits/stl_algo.h ****     {
 997:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
 998:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 999:/usr/include/c++/8/bits/stl_algo.h **** 				  _ForwardIterator>)
1000:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualityComparableConcept<
1001:/usr/include/c++/8/bits/stl_algo.h **** 		     typename iterator_traits<_ForwardIterator>::value_type>)
1002:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1003:/usr/include/c++/8/bits/stl_algo.h **** 
1004:/usr/include/c++/8/bits/stl_algo.h ****       return std::__unique(__first, __last,
1005:/usr/include/c++/8/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_equal_to_iter());
1006:/usr/include/c++/8/bits/stl_algo.h ****     }
1007:/usr/include/c++/8/bits/stl_algo.h **** 
1008:/usr/include/c++/8/bits/stl_algo.h ****   /**
1009:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Remove consecutive values from a sequence using a predicate.
1010:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1011:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first        A forward iterator.
1012:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last         A forward iterator.
1013:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __binary_pred  A binary predicate.
1014:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
1015:/usr/include/c++/8/bits/stl_algo.h ****    *
1016:/usr/include/c++/8/bits/stl_algo.h ****    *  Removes all but the first element from each group of consecutive
1017:/usr/include/c++/8/bits/stl_algo.h ****    *  values for which @p __binary_pred returns true.
1018:/usr/include/c++/8/bits/stl_algo.h ****    *  unique() is stable, so the relative order of elements that are
1019:/usr/include/c++/8/bits/stl_algo.h ****    *  not removed is unchanged.
1020:/usr/include/c++/8/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
1021:/usr/include/c++/8/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
1022:/usr/include/c++/8/bits/stl_algo.h ****   */
1023:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
1024:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
1025:/usr/include/c++/8/bits/stl_algo.h ****     unique(_ForwardIterator __first, _ForwardIterator __last,
1026:/usr/include/c++/8/bits/stl_algo.h **** 	   _BinaryPredicate __binary_pred)
1027:/usr/include/c++/8/bits/stl_algo.h ****     {
1028:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
1029:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1030:/usr/include/c++/8/bits/stl_algo.h **** 				  _ForwardIterator>)
1031:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1032:/usr/include/c++/8/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type,
1033:/usr/include/c++/8/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type>)
1034:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1035:/usr/include/c++/8/bits/stl_algo.h **** 
1036:/usr/include/c++/8/bits/stl_algo.h ****       return std::__unique(__first, __last,
1037:/usr/include/c++/8/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
1038:/usr/include/c++/8/bits/stl_algo.h ****     }
1039:/usr/include/c++/8/bits/stl_algo.h **** 
1040:/usr/include/c++/8/bits/stl_algo.h ****   /**
1041:/usr/include/c++/8/bits/stl_algo.h ****    *  This is an uglified
1042:/usr/include/c++/8/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1043:/usr/include/c++/8/bits/stl_algo.h ****    *              _BinaryPredicate)
1044:/usr/include/c++/8/bits/stl_algo.h ****    *  overloaded for forward iterators and output iterator as result.
1045:/usr/include/c++/8/bits/stl_algo.h ****   */
1046:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _OutputIterator,
1047:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1048:/usr/include/c++/8/bits/stl_algo.h ****     _OutputIterator
1049:/usr/include/c++/8/bits/stl_algo.h ****     __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
1050:/usr/include/c++/8/bits/stl_algo.h **** 		  _OutputIterator __result, _BinaryPredicate __binary_pred,
1051:/usr/include/c++/8/bits/stl_algo.h **** 		  forward_iterator_tag, output_iterator_tag)
1052:/usr/include/c++/8/bits/stl_algo.h ****     {
1053:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1054:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1055:/usr/include/c++/8/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type,
1056:/usr/include/c++/8/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type>)
1057:/usr/include/c++/8/bits/stl_algo.h **** 
1058:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __next = __first;
1059:/usr/include/c++/8/bits/stl_algo.h ****       *__result = *__first;
1060:/usr/include/c++/8/bits/stl_algo.h ****       while (++__next != __last)
1061:/usr/include/c++/8/bits/stl_algo.h **** 	if (!__binary_pred(__first, __next))
1062:/usr/include/c++/8/bits/stl_algo.h **** 	  {
1063:/usr/include/c++/8/bits/stl_algo.h **** 	    __first = __next;
1064:/usr/include/c++/8/bits/stl_algo.h **** 	    *++__result = *__first;
1065:/usr/include/c++/8/bits/stl_algo.h **** 	  }
1066:/usr/include/c++/8/bits/stl_algo.h ****       return ++__result;
1067:/usr/include/c++/8/bits/stl_algo.h ****     }
1068:/usr/include/c++/8/bits/stl_algo.h **** 
1069:/usr/include/c++/8/bits/stl_algo.h ****   /**
1070:/usr/include/c++/8/bits/stl_algo.h ****    *  This is an uglified
1071:/usr/include/c++/8/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1072:/usr/include/c++/8/bits/stl_algo.h ****    *              _BinaryPredicate)
1073:/usr/include/c++/8/bits/stl_algo.h ****    *  overloaded for input iterators and output iterator as result.
1074:/usr/include/c++/8/bits/stl_algo.h ****   */
1075:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
1076:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1077:/usr/include/c++/8/bits/stl_algo.h ****     _OutputIterator
1078:/usr/include/c++/8/bits/stl_algo.h ****     __unique_copy(_InputIterator __first, _InputIterator __last,
1079:/usr/include/c++/8/bits/stl_algo.h **** 		  _OutputIterator __result, _BinaryPredicate __binary_pred,
1080:/usr/include/c++/8/bits/stl_algo.h **** 		  input_iterator_tag, output_iterator_tag)
1081:/usr/include/c++/8/bits/stl_algo.h ****     {
1082:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1083:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1084:/usr/include/c++/8/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type,
1085:/usr/include/c++/8/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type>)
1086:/usr/include/c++/8/bits/stl_algo.h **** 
1087:/usr/include/c++/8/bits/stl_algo.h ****       typename iterator_traits<_InputIterator>::value_type __value = *__first;
1088:/usr/include/c++/8/bits/stl_algo.h ****       __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
1089:/usr/include/c++/8/bits/stl_algo.h **** 	__rebound_pred
1090:/usr/include/c++/8/bits/stl_algo.h **** 	= __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
1091:/usr/include/c++/8/bits/stl_algo.h ****       *__result = __value;
1092:/usr/include/c++/8/bits/stl_algo.h ****       while (++__first != __last)
1093:/usr/include/c++/8/bits/stl_algo.h **** 	if (!__rebound_pred(__first, __value))
1094:/usr/include/c++/8/bits/stl_algo.h **** 	  {
1095:/usr/include/c++/8/bits/stl_algo.h **** 	    __value = *__first;
1096:/usr/include/c++/8/bits/stl_algo.h **** 	    *++__result = __value;
1097:/usr/include/c++/8/bits/stl_algo.h **** 	  }
1098:/usr/include/c++/8/bits/stl_algo.h ****       return ++__result;
1099:/usr/include/c++/8/bits/stl_algo.h ****     }
1100:/usr/include/c++/8/bits/stl_algo.h **** 
1101:/usr/include/c++/8/bits/stl_algo.h ****   /**
1102:/usr/include/c++/8/bits/stl_algo.h ****    *  This is an uglified
1103:/usr/include/c++/8/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1104:/usr/include/c++/8/bits/stl_algo.h ****    *              _BinaryPredicate)
1105:/usr/include/c++/8/bits/stl_algo.h ****    *  overloaded for input iterators and forward iterator as result.
1106:/usr/include/c++/8/bits/stl_algo.h ****   */
1107:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _ForwardIterator,
1108:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1109:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator
1110:/usr/include/c++/8/bits/stl_algo.h ****     __unique_copy(_InputIterator __first, _InputIterator __last,
1111:/usr/include/c++/8/bits/stl_algo.h **** 		  _ForwardIterator __result, _BinaryPredicate __binary_pred,
1112:/usr/include/c++/8/bits/stl_algo.h **** 		  input_iterator_tag, forward_iterator_tag)
1113:/usr/include/c++/8/bits/stl_algo.h ****     {
1114:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1115:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1116:/usr/include/c++/8/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type,
1117:/usr/include/c++/8/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type>)
1118:/usr/include/c++/8/bits/stl_algo.h ****       *__result = *__first;
1119:/usr/include/c++/8/bits/stl_algo.h ****       while (++__first != __last)
1120:/usr/include/c++/8/bits/stl_algo.h **** 	if (!__binary_pred(__result, __first))
1121:/usr/include/c++/8/bits/stl_algo.h **** 	  *++__result = *__first;
1122:/usr/include/c++/8/bits/stl_algo.h ****       return ++__result;
1123:/usr/include/c++/8/bits/stl_algo.h ****     }
1124:/usr/include/c++/8/bits/stl_algo.h **** 
1125:/usr/include/c++/8/bits/stl_algo.h ****   /**
1126:/usr/include/c++/8/bits/stl_algo.h ****    *  This is an uglified reverse(_BidirectionalIterator,
1127:/usr/include/c++/8/bits/stl_algo.h ****    *                              _BidirectionalIterator)
1128:/usr/include/c++/8/bits/stl_algo.h ****    *  overloaded for bidirectional iterators.
1129:/usr/include/c++/8/bits/stl_algo.h ****   */
1130:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1131:/usr/include/c++/8/bits/stl_algo.h ****     void
1132:/usr/include/c++/8/bits/stl_algo.h ****     __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
1133:/usr/include/c++/8/bits/stl_algo.h **** 	      bidirectional_iterator_tag)
1134:/usr/include/c++/8/bits/stl_algo.h ****     {
1135:/usr/include/c++/8/bits/stl_algo.h ****       while (true)
1136:/usr/include/c++/8/bits/stl_algo.h **** 	if (__first == __last || __first == --__last)
1137:/usr/include/c++/8/bits/stl_algo.h **** 	  return;
1138:/usr/include/c++/8/bits/stl_algo.h **** 	else
1139:/usr/include/c++/8/bits/stl_algo.h **** 	  {
1140:/usr/include/c++/8/bits/stl_algo.h **** 	    std::iter_swap(__first, __last);
1141:/usr/include/c++/8/bits/stl_algo.h **** 	    ++__first;
1142:/usr/include/c++/8/bits/stl_algo.h **** 	  }
1143:/usr/include/c++/8/bits/stl_algo.h ****     }
1144:/usr/include/c++/8/bits/stl_algo.h **** 
1145:/usr/include/c++/8/bits/stl_algo.h ****   /**
1146:/usr/include/c++/8/bits/stl_algo.h ****    *  This is an uglified reverse(_BidirectionalIterator,
1147:/usr/include/c++/8/bits/stl_algo.h ****    *                              _BidirectionalIterator)
1148:/usr/include/c++/8/bits/stl_algo.h ****    *  overloaded for random access iterators.
1149:/usr/include/c++/8/bits/stl_algo.h ****   */
1150:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator>
1151:/usr/include/c++/8/bits/stl_algo.h ****     void
1152:/usr/include/c++/8/bits/stl_algo.h ****     __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
1153:/usr/include/c++/8/bits/stl_algo.h **** 	      random_access_iterator_tag)
1154:/usr/include/c++/8/bits/stl_algo.h ****     {
1155:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __last)
1156:/usr/include/c++/8/bits/stl_algo.h **** 	return;
1157:/usr/include/c++/8/bits/stl_algo.h ****       --__last;
1158:/usr/include/c++/8/bits/stl_algo.h ****       while (__first < __last)
1159:/usr/include/c++/8/bits/stl_algo.h **** 	{
1160:/usr/include/c++/8/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1161:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
1162:/usr/include/c++/8/bits/stl_algo.h **** 	  --__last;
1163:/usr/include/c++/8/bits/stl_algo.h **** 	}
1164:/usr/include/c++/8/bits/stl_algo.h ****     }
1165:/usr/include/c++/8/bits/stl_algo.h **** 
1166:/usr/include/c++/8/bits/stl_algo.h ****   /**
1167:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Reverse a sequence.
1168:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1169:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  A bidirectional iterator.
1170:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   A bidirectional iterator.
1171:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   reverse() returns no value.
1172:/usr/include/c++/8/bits/stl_algo.h ****    *
1173:/usr/include/c++/8/bits/stl_algo.h ****    *  Reverses the order of the elements in the range @p [__first,__last),
1174:/usr/include/c++/8/bits/stl_algo.h ****    *  so that the first element becomes the last etc.
1175:/usr/include/c++/8/bits/stl_algo.h ****    *  For every @c i such that @p 0<=i<=(__last-__first)/2), @p reverse()
1176:/usr/include/c++/8/bits/stl_algo.h ****    *  swaps @p *(__first+i) and @p *(__last-(i+1))
1177:/usr/include/c++/8/bits/stl_algo.h ****   */
1178:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1179:/usr/include/c++/8/bits/stl_algo.h ****     inline void
1180:/usr/include/c++/8/bits/stl_algo.h ****     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
1181:/usr/include/c++/8/bits/stl_algo.h ****     {
1182:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
1183:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
1184:/usr/include/c++/8/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1185:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1186:/usr/include/c++/8/bits/stl_algo.h ****       std::__reverse(__first, __last, std::__iterator_category(__first));
1187:/usr/include/c++/8/bits/stl_algo.h ****     }
1188:/usr/include/c++/8/bits/stl_algo.h **** 
1189:/usr/include/c++/8/bits/stl_algo.h ****   /**
1190:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Copy a sequence, reversing its elements.
1191:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1192:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   A bidirectional iterator.
1193:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    A bidirectional iterator.
1194:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __result  An output iterator.
1195:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
1196:/usr/include/c++/8/bits/stl_algo.h ****    *
1197:/usr/include/c++/8/bits/stl_algo.h ****    *  Copies the elements in the range @p [__first,__last) to the
1198:/usr/include/c++/8/bits/stl_algo.h ****    *  range @p [__result,__result+(__last-__first)) such that the
1199:/usr/include/c++/8/bits/stl_algo.h ****    *  order of the elements is reversed.  For every @c i such that @p
1200:/usr/include/c++/8/bits/stl_algo.h ****    *  0<=i<=(__last-__first), @p reverse_copy() performs the
1201:/usr/include/c++/8/bits/stl_algo.h ****    *  assignment @p *(__result+(__last-__first)-1-i) = *(__first+i).
1202:/usr/include/c++/8/bits/stl_algo.h ****    *  The ranges @p [__first,__last) and @p
1203:/usr/include/c++/8/bits/stl_algo.h ****    *  [__result,__result+(__last-__first)) must not overlap.
1204:/usr/include/c++/8/bits/stl_algo.h ****   */
1205:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _OutputIterator>
1206:/usr/include/c++/8/bits/stl_algo.h ****     _OutputIterator
1207:/usr/include/c++/8/bits/stl_algo.h ****     reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
1208:/usr/include/c++/8/bits/stl_algo.h **** 		 _OutputIterator __result)
1209:/usr/include/c++/8/bits/stl_algo.h ****     {
1210:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
1211:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
1212:/usr/include/c++/8/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1213:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
1214:/usr/include/c++/8/bits/stl_algo.h **** 		typename iterator_traits<_BidirectionalIterator>::value_type>)
1215:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1216:/usr/include/c++/8/bits/stl_algo.h **** 
1217:/usr/include/c++/8/bits/stl_algo.h ****       while (__first != __last)
1218:/usr/include/c++/8/bits/stl_algo.h **** 	{
1219:/usr/include/c++/8/bits/stl_algo.h **** 	  --__last;
1220:/usr/include/c++/8/bits/stl_algo.h **** 	  *__result = *__last;
1221:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__result;
1222:/usr/include/c++/8/bits/stl_algo.h **** 	}
1223:/usr/include/c++/8/bits/stl_algo.h ****       return __result;
1224:/usr/include/c++/8/bits/stl_algo.h ****     }
1225:/usr/include/c++/8/bits/stl_algo.h **** 
1226:/usr/include/c++/8/bits/stl_algo.h ****   /**
1227:/usr/include/c++/8/bits/stl_algo.h ****    *  This is a helper function for the rotate algorithm specialized on RAIs.
1228:/usr/include/c++/8/bits/stl_algo.h ****    *  It returns the greatest common divisor of two integer values.
1229:/usr/include/c++/8/bits/stl_algo.h ****   */
1230:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _EuclideanRingElement>
1231:/usr/include/c++/8/bits/stl_algo.h ****     _EuclideanRingElement
1232:/usr/include/c++/8/bits/stl_algo.h ****     __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
1233:/usr/include/c++/8/bits/stl_algo.h ****     {
1234:/usr/include/c++/8/bits/stl_algo.h ****       while (__n != 0)
1235:/usr/include/c++/8/bits/stl_algo.h **** 	{
1236:/usr/include/c++/8/bits/stl_algo.h **** 	  _EuclideanRingElement __t = __m % __n;
1237:/usr/include/c++/8/bits/stl_algo.h **** 	  __m = __n;
1238:/usr/include/c++/8/bits/stl_algo.h **** 	  __n = __t;
1239:/usr/include/c++/8/bits/stl_algo.h **** 	}
1240:/usr/include/c++/8/bits/stl_algo.h ****       return __m;
1241:/usr/include/c++/8/bits/stl_algo.h ****     }
1242:/usr/include/c++/8/bits/stl_algo.h **** 
1243:/usr/include/c++/8/bits/stl_algo.h ****   inline namespace _V2
1244:/usr/include/c++/8/bits/stl_algo.h ****   {
1245:/usr/include/c++/8/bits/stl_algo.h **** 
1246:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the rotate algorithm.
1247:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator>
1248:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator
1249:/usr/include/c++/8/bits/stl_algo.h ****     __rotate(_ForwardIterator __first,
1250:/usr/include/c++/8/bits/stl_algo.h **** 	     _ForwardIterator __middle,
1251:/usr/include/c++/8/bits/stl_algo.h **** 	     _ForwardIterator __last,
1252:/usr/include/c++/8/bits/stl_algo.h **** 	     forward_iterator_tag)
1253:/usr/include/c++/8/bits/stl_algo.h ****     {
1254:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __middle)
1255:/usr/include/c++/8/bits/stl_algo.h **** 	return __last;
1256:/usr/include/c++/8/bits/stl_algo.h ****       else if (__last  == __middle)
1257:/usr/include/c++/8/bits/stl_algo.h **** 	return __first;
1258:/usr/include/c++/8/bits/stl_algo.h **** 
1259:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __first2 = __middle;
1260:/usr/include/c++/8/bits/stl_algo.h ****       do
1261:/usr/include/c++/8/bits/stl_algo.h **** 	{
1262:/usr/include/c++/8/bits/stl_algo.h **** 	  std::iter_swap(__first, __first2);
1263:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
1264:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first2;
1265:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__first == __middle)
1266:/usr/include/c++/8/bits/stl_algo.h **** 	    __middle = __first2;
1267:/usr/include/c++/8/bits/stl_algo.h **** 	}
1268:/usr/include/c++/8/bits/stl_algo.h ****       while (__first2 != __last);
1269:/usr/include/c++/8/bits/stl_algo.h **** 
1270:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __ret = __first;
1271:/usr/include/c++/8/bits/stl_algo.h **** 
1272:/usr/include/c++/8/bits/stl_algo.h ****       __first2 = __middle;
1273:/usr/include/c++/8/bits/stl_algo.h **** 
1274:/usr/include/c++/8/bits/stl_algo.h ****       while (__first2 != __last)
1275:/usr/include/c++/8/bits/stl_algo.h **** 	{
1276:/usr/include/c++/8/bits/stl_algo.h **** 	  std::iter_swap(__first, __first2);
1277:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
1278:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first2;
1279:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__first == __middle)
1280:/usr/include/c++/8/bits/stl_algo.h **** 	    __middle = __first2;
1281:/usr/include/c++/8/bits/stl_algo.h **** 	  else if (__first2 == __last)
1282:/usr/include/c++/8/bits/stl_algo.h **** 	    __first2 = __middle;
1283:/usr/include/c++/8/bits/stl_algo.h **** 	}
1284:/usr/include/c++/8/bits/stl_algo.h ****       return __ret;
1285:/usr/include/c++/8/bits/stl_algo.h ****     }
1286:/usr/include/c++/8/bits/stl_algo.h **** 
1287:/usr/include/c++/8/bits/stl_algo.h ****    /// This is a helper function for the rotate algorithm.
1288:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1289:/usr/include/c++/8/bits/stl_algo.h ****     _BidirectionalIterator
1290:/usr/include/c++/8/bits/stl_algo.h ****     __rotate(_BidirectionalIterator __first,
1291:/usr/include/c++/8/bits/stl_algo.h **** 	     _BidirectionalIterator __middle,
1292:/usr/include/c++/8/bits/stl_algo.h **** 	     _BidirectionalIterator __last,
1293:/usr/include/c++/8/bits/stl_algo.h **** 	      bidirectional_iterator_tag)
1294:/usr/include/c++/8/bits/stl_algo.h ****     {
1295:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
1296:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
1297:/usr/include/c++/8/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1298:/usr/include/c++/8/bits/stl_algo.h **** 
1299:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __middle)
1300:/usr/include/c++/8/bits/stl_algo.h **** 	return __last;
1301:/usr/include/c++/8/bits/stl_algo.h ****       else if (__last  == __middle)
1302:/usr/include/c++/8/bits/stl_algo.h **** 	return __first;
1303:/usr/include/c++/8/bits/stl_algo.h **** 
1304:/usr/include/c++/8/bits/stl_algo.h ****       std::__reverse(__first,  __middle, bidirectional_iterator_tag());
1305:/usr/include/c++/8/bits/stl_algo.h ****       std::__reverse(__middle, __last,   bidirectional_iterator_tag());
1306:/usr/include/c++/8/bits/stl_algo.h **** 
1307:/usr/include/c++/8/bits/stl_algo.h ****       while (__first != __middle && __middle != __last)
1308:/usr/include/c++/8/bits/stl_algo.h **** 	{
1309:/usr/include/c++/8/bits/stl_algo.h **** 	  std::iter_swap(__first, --__last);
1310:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
1311:/usr/include/c++/8/bits/stl_algo.h **** 	}
1312:/usr/include/c++/8/bits/stl_algo.h **** 
1313:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __middle)
1314:/usr/include/c++/8/bits/stl_algo.h **** 	{
1315:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__reverse(__middle, __last,   bidirectional_iterator_tag());
1316:/usr/include/c++/8/bits/stl_algo.h **** 	  return __last;
1317:/usr/include/c++/8/bits/stl_algo.h **** 	}
1318:/usr/include/c++/8/bits/stl_algo.h ****       else
1319:/usr/include/c++/8/bits/stl_algo.h **** 	{
1320:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__reverse(__first,  __middle, bidirectional_iterator_tag());
1321:/usr/include/c++/8/bits/stl_algo.h **** 	  return __first;
1322:/usr/include/c++/8/bits/stl_algo.h **** 	}
1323:/usr/include/c++/8/bits/stl_algo.h ****     }
1324:/usr/include/c++/8/bits/stl_algo.h **** 
1325:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the rotate algorithm.
1326:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator>
1327:/usr/include/c++/8/bits/stl_algo.h ****     _RandomAccessIterator
1328:/usr/include/c++/8/bits/stl_algo.h ****     __rotate(_RandomAccessIterator __first,
1329:/usr/include/c++/8/bits/stl_algo.h **** 	     _RandomAccessIterator __middle,
1330:/usr/include/c++/8/bits/stl_algo.h **** 	     _RandomAccessIterator __last,
1331:/usr/include/c++/8/bits/stl_algo.h **** 	     random_access_iterator_tag)
1332:/usr/include/c++/8/bits/stl_algo.h ****     {
1333:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
1334:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
1335:/usr/include/c++/8/bits/stl_algo.h **** 				  _RandomAccessIterator>)
1336:/usr/include/c++/8/bits/stl_algo.h **** 
1337:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __middle)
1338:/usr/include/c++/8/bits/stl_algo.h **** 	return __last;
1339:/usr/include/c++/8/bits/stl_algo.h ****       else if (__last  == __middle)
1340:/usr/include/c++/8/bits/stl_algo.h **** 	return __first;
1341:/usr/include/c++/8/bits/stl_algo.h **** 
1342:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
1343:/usr/include/c++/8/bits/stl_algo.h **** 	_Distance;
1344:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1345:/usr/include/c++/8/bits/stl_algo.h **** 	_ValueType;
1346:/usr/include/c++/8/bits/stl_algo.h **** 
1347:/usr/include/c++/8/bits/stl_algo.h ****       _Distance __n = __last   - __first;
1348:/usr/include/c++/8/bits/stl_algo.h ****       _Distance __k = __middle - __first;
1349:/usr/include/c++/8/bits/stl_algo.h **** 
1350:/usr/include/c++/8/bits/stl_algo.h ****       if (__k == __n - __k)
1351:/usr/include/c++/8/bits/stl_algo.h **** 	{
1352:/usr/include/c++/8/bits/stl_algo.h **** 	  std::swap_ranges(__first, __middle, __middle);
1353:/usr/include/c++/8/bits/stl_algo.h **** 	  return __middle;
1354:/usr/include/c++/8/bits/stl_algo.h **** 	}
1355:/usr/include/c++/8/bits/stl_algo.h **** 
1356:/usr/include/c++/8/bits/stl_algo.h ****       _RandomAccessIterator __p = __first;
1357:/usr/include/c++/8/bits/stl_algo.h ****       _RandomAccessIterator __ret = __first + (__last - __middle);
1358:/usr/include/c++/8/bits/stl_algo.h **** 
1359:/usr/include/c++/8/bits/stl_algo.h ****       for (;;)
1360:/usr/include/c++/8/bits/stl_algo.h **** 	{
1361:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__k < __n - __k)
1362:/usr/include/c++/8/bits/stl_algo.h **** 	    {
1363:/usr/include/c++/8/bits/stl_algo.h **** 	      if (__is_pod(_ValueType) && __k == 1)
1364:/usr/include/c++/8/bits/stl_algo.h **** 		{
1365:/usr/include/c++/8/bits/stl_algo.h **** 		  _ValueType __t = _GLIBCXX_MOVE(*__p);
1366:/usr/include/c++/8/bits/stl_algo.h **** 		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
1367:/usr/include/c++/8/bits/stl_algo.h **** 		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
1368:/usr/include/c++/8/bits/stl_algo.h **** 		  return __ret;
1369:/usr/include/c++/8/bits/stl_algo.h **** 		}
1370:/usr/include/c++/8/bits/stl_algo.h **** 	      _RandomAccessIterator __q = __p + __k;
1371:/usr/include/c++/8/bits/stl_algo.h **** 	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
1372:/usr/include/c++/8/bits/stl_algo.h **** 		{
1373:/usr/include/c++/8/bits/stl_algo.h **** 		  std::iter_swap(__p, __q);
1374:/usr/include/c++/8/bits/stl_algo.h **** 		  ++__p;
1375:/usr/include/c++/8/bits/stl_algo.h **** 		  ++__q;
1376:/usr/include/c++/8/bits/stl_algo.h **** 		}
1377:/usr/include/c++/8/bits/stl_algo.h **** 	      __n %= __k;
1378:/usr/include/c++/8/bits/stl_algo.h **** 	      if (__n == 0)
1379:/usr/include/c++/8/bits/stl_algo.h **** 		return __ret;
1380:/usr/include/c++/8/bits/stl_algo.h **** 	      std::swap(__n, __k);
1381:/usr/include/c++/8/bits/stl_algo.h **** 	      __k = __n - __k;
1382:/usr/include/c++/8/bits/stl_algo.h **** 	    }
1383:/usr/include/c++/8/bits/stl_algo.h **** 	  else
1384:/usr/include/c++/8/bits/stl_algo.h **** 	    {
1385:/usr/include/c++/8/bits/stl_algo.h **** 	      __k = __n - __k;
1386:/usr/include/c++/8/bits/stl_algo.h **** 	      if (__is_pod(_ValueType) && __k == 1)
1387:/usr/include/c++/8/bits/stl_algo.h **** 		{
1388:/usr/include/c++/8/bits/stl_algo.h **** 		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
1389:/usr/include/c++/8/bits/stl_algo.h **** 		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
1390:/usr/include/c++/8/bits/stl_algo.h **** 		  *__p = _GLIBCXX_MOVE(__t);
1391:/usr/include/c++/8/bits/stl_algo.h **** 		  return __ret;
1392:/usr/include/c++/8/bits/stl_algo.h **** 		}
1393:/usr/include/c++/8/bits/stl_algo.h **** 	      _RandomAccessIterator __q = __p + __n;
1394:/usr/include/c++/8/bits/stl_algo.h **** 	      __p = __q - __k;
1395:/usr/include/c++/8/bits/stl_algo.h **** 	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
1396:/usr/include/c++/8/bits/stl_algo.h **** 		{
1397:/usr/include/c++/8/bits/stl_algo.h **** 		  --__p;
1398:/usr/include/c++/8/bits/stl_algo.h **** 		  --__q;
1399:/usr/include/c++/8/bits/stl_algo.h **** 		  std::iter_swap(__p, __q);
1400:/usr/include/c++/8/bits/stl_algo.h **** 		}
1401:/usr/include/c++/8/bits/stl_algo.h **** 	      __n %= __k;
1402:/usr/include/c++/8/bits/stl_algo.h **** 	      if (__n == 0)
1403:/usr/include/c++/8/bits/stl_algo.h **** 		return __ret;
1404:/usr/include/c++/8/bits/stl_algo.h **** 	      std::swap(__n, __k);
1405:/usr/include/c++/8/bits/stl_algo.h **** 	    }
1406:/usr/include/c++/8/bits/stl_algo.h **** 	}
1407:/usr/include/c++/8/bits/stl_algo.h ****     }
1408:/usr/include/c++/8/bits/stl_algo.h **** 
1409:/usr/include/c++/8/bits/stl_algo.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
1410:/usr/include/c++/8/bits/stl_algo.h ****    // DR 488. rotate throws away useful information
1411:/usr/include/c++/8/bits/stl_algo.h ****   /**
1412:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Rotate the elements of a sequence.
1413:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1414:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1415:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __middle  A forward iterator.
1416:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1417:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  first + (last - middle).
1418:/usr/include/c++/8/bits/stl_algo.h ****    *
1419:/usr/include/c++/8/bits/stl_algo.h ****    *  Rotates the elements of the range @p [__first,__last) by 
1420:/usr/include/c++/8/bits/stl_algo.h ****    *  @p (__middle - __first) positions so that the element at @p __middle
1421:/usr/include/c++/8/bits/stl_algo.h ****    *  is moved to @p __first, the element at @p __middle+1 is moved to
1422:/usr/include/c++/8/bits/stl_algo.h ****    *  @p __first+1 and so on for each element in the range
1423:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__first,__last).
1424:/usr/include/c++/8/bits/stl_algo.h ****    *
1425:/usr/include/c++/8/bits/stl_algo.h ****    *  This effectively swaps the ranges @p [__first,__middle) and
1426:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__middle,__last).
1427:/usr/include/c++/8/bits/stl_algo.h ****    *
1428:/usr/include/c++/8/bits/stl_algo.h ****    *  Performs
1429:/usr/include/c++/8/bits/stl_algo.h ****    *   @p *(__first+(n+(__last-__middle))%(__last-__first))=*(__first+n)
1430:/usr/include/c++/8/bits/stl_algo.h ****    *  for each @p n in the range @p [0,__last-__first).
1431:/usr/include/c++/8/bits/stl_algo.h ****   */
1432:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator>
1433:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
1434:/usr/include/c++/8/bits/stl_algo.h ****     rotate(_ForwardIterator __first, _ForwardIterator __middle,
1435:/usr/include/c++/8/bits/stl_algo.h **** 	   _ForwardIterator __last)
1436:/usr/include/c++/8/bits/stl_algo.h ****     {
1437:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
1438:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1439:/usr/include/c++/8/bits/stl_algo.h **** 				  _ForwardIterator>)
1440:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __middle);
1441:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__middle, __last);
1442:/usr/include/c++/8/bits/stl_algo.h **** 
1443:/usr/include/c++/8/bits/stl_algo.h ****       return std::__rotate(__first, __middle, __last,
1444:/usr/include/c++/8/bits/stl_algo.h **** 			   std::__iterator_category(__first));
1445:/usr/include/c++/8/bits/stl_algo.h ****     }
1446:/usr/include/c++/8/bits/stl_algo.h **** 
1447:/usr/include/c++/8/bits/stl_algo.h ****   } // namespace _V2
1448:/usr/include/c++/8/bits/stl_algo.h **** 
1449:/usr/include/c++/8/bits/stl_algo.h ****   /**
1450:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Copy a sequence, rotating its elements.
1451:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1452:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1453:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __middle  A forward iterator.
1454:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1455:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __result  An output iterator.
1456:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
1457:/usr/include/c++/8/bits/stl_algo.h ****    *
1458:/usr/include/c++/8/bits/stl_algo.h ****    *  Copies the elements of the range @p [__first,__last) to the
1459:/usr/include/c++/8/bits/stl_algo.h ****    *  range beginning at @result, rotating the copied elements by 
1460:/usr/include/c++/8/bits/stl_algo.h ****    *  @p (__middle-__first) positions so that the element at @p __middle
1461:/usr/include/c++/8/bits/stl_algo.h ****    *  is moved to @p __result, the element at @p __middle+1 is moved
1462:/usr/include/c++/8/bits/stl_algo.h ****    *  to @p __result+1 and so on for each element in the range @p
1463:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first,__last).
1464:/usr/include/c++/8/bits/stl_algo.h ****    *
1465:/usr/include/c++/8/bits/stl_algo.h ****    *  Performs 
1466:/usr/include/c++/8/bits/stl_algo.h ****    *  @p *(__result+(n+(__last-__middle))%(__last-__first))=*(__first+n)
1467:/usr/include/c++/8/bits/stl_algo.h ****    *  for each @p n in the range @p [0,__last-__first).
1468:/usr/include/c++/8/bits/stl_algo.h ****   */
1469:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _OutputIterator>
1470:/usr/include/c++/8/bits/stl_algo.h ****     inline _OutputIterator
1471:/usr/include/c++/8/bits/stl_algo.h ****     rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
1472:/usr/include/c++/8/bits/stl_algo.h **** 		_ForwardIterator __last, _OutputIterator __result)
1473:/usr/include/c++/8/bits/stl_algo.h ****     {
1474:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
1475:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
1476:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
1477:/usr/include/c++/8/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type>)
1478:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __middle);
1479:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__middle, __last);
1480:/usr/include/c++/8/bits/stl_algo.h **** 
1481:/usr/include/c++/8/bits/stl_algo.h ****       return std::copy(__first, __middle,
1482:/usr/include/c++/8/bits/stl_algo.h **** 		       std::copy(__middle, __last, __result));
1483:/usr/include/c++/8/bits/stl_algo.h ****     }
1484:/usr/include/c++/8/bits/stl_algo.h **** 
1485:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function...
1486:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1487:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator
1488:/usr/include/c++/8/bits/stl_algo.h ****     __partition(_ForwardIterator __first, _ForwardIterator __last,
1489:/usr/include/c++/8/bits/stl_algo.h **** 		_Predicate __pred, forward_iterator_tag)
1490:/usr/include/c++/8/bits/stl_algo.h ****     {
1491:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __last)
1492:/usr/include/c++/8/bits/stl_algo.h **** 	return __first;
1493:/usr/include/c++/8/bits/stl_algo.h **** 
1494:/usr/include/c++/8/bits/stl_algo.h ****       while (__pred(*__first))
1495:/usr/include/c++/8/bits/stl_algo.h **** 	if (++__first == __last)
1496:/usr/include/c++/8/bits/stl_algo.h **** 	  return __first;
1497:/usr/include/c++/8/bits/stl_algo.h **** 
1498:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __next = __first;
1499:/usr/include/c++/8/bits/stl_algo.h **** 
1500:/usr/include/c++/8/bits/stl_algo.h ****       while (++__next != __last)
1501:/usr/include/c++/8/bits/stl_algo.h **** 	if (__pred(*__next))
1502:/usr/include/c++/8/bits/stl_algo.h **** 	  {
1503:/usr/include/c++/8/bits/stl_algo.h **** 	    std::iter_swap(__first, __next);
1504:/usr/include/c++/8/bits/stl_algo.h **** 	    ++__first;
1505:/usr/include/c++/8/bits/stl_algo.h **** 	  }
1506:/usr/include/c++/8/bits/stl_algo.h **** 
1507:/usr/include/c++/8/bits/stl_algo.h ****       return __first;
1508:/usr/include/c++/8/bits/stl_algo.h ****     }
1509:/usr/include/c++/8/bits/stl_algo.h **** 
1510:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function...
1511:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Predicate>
1512:/usr/include/c++/8/bits/stl_algo.h ****     _BidirectionalIterator
1513:/usr/include/c++/8/bits/stl_algo.h ****     __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
1514:/usr/include/c++/8/bits/stl_algo.h **** 		_Predicate __pred, bidirectional_iterator_tag)
1515:/usr/include/c++/8/bits/stl_algo.h ****     {
1516:/usr/include/c++/8/bits/stl_algo.h ****       while (true)
1517:/usr/include/c++/8/bits/stl_algo.h **** 	{
1518:/usr/include/c++/8/bits/stl_algo.h **** 	  while (true)
1519:/usr/include/c++/8/bits/stl_algo.h **** 	    if (__first == __last)
1520:/usr/include/c++/8/bits/stl_algo.h **** 	      return __first;
1521:/usr/include/c++/8/bits/stl_algo.h **** 	    else if (__pred(*__first))
1522:/usr/include/c++/8/bits/stl_algo.h **** 	      ++__first;
1523:/usr/include/c++/8/bits/stl_algo.h **** 	    else
1524:/usr/include/c++/8/bits/stl_algo.h **** 	      break;
1525:/usr/include/c++/8/bits/stl_algo.h **** 	  --__last;
1526:/usr/include/c++/8/bits/stl_algo.h **** 	  while (true)
1527:/usr/include/c++/8/bits/stl_algo.h **** 	    if (__first == __last)
1528:/usr/include/c++/8/bits/stl_algo.h **** 	      return __first;
1529:/usr/include/c++/8/bits/stl_algo.h **** 	    else if (!bool(__pred(*__last)))
1530:/usr/include/c++/8/bits/stl_algo.h **** 	      --__last;
1531:/usr/include/c++/8/bits/stl_algo.h **** 	    else
1532:/usr/include/c++/8/bits/stl_algo.h **** 	      break;
1533:/usr/include/c++/8/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1534:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
1535:/usr/include/c++/8/bits/stl_algo.h **** 	}
1536:/usr/include/c++/8/bits/stl_algo.h ****     }
1537:/usr/include/c++/8/bits/stl_algo.h **** 
1538:/usr/include/c++/8/bits/stl_algo.h ****   // partition
1539:/usr/include/c++/8/bits/stl_algo.h **** 
1540:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function...
1541:/usr/include/c++/8/bits/stl_algo.h ****   /// Requires __first != __last and !__pred(__first)
1542:/usr/include/c++/8/bits/stl_algo.h ****   /// and __len == distance(__first, __last).
1543:/usr/include/c++/8/bits/stl_algo.h ****   ///
1544:/usr/include/c++/8/bits/stl_algo.h ****   /// !__pred(__first) allows us to guarantee that we don't
1545:/usr/include/c++/8/bits/stl_algo.h ****   /// move-assign an element onto itself.
1546:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
1547:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Distance>
1548:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator
1549:/usr/include/c++/8/bits/stl_algo.h ****     __stable_partition_adaptive(_ForwardIterator __first,
1550:/usr/include/c++/8/bits/stl_algo.h **** 				_ForwardIterator __last,
1551:/usr/include/c++/8/bits/stl_algo.h **** 				_Predicate __pred, _Distance __len,
1552:/usr/include/c++/8/bits/stl_algo.h **** 				_Pointer __buffer,
1553:/usr/include/c++/8/bits/stl_algo.h **** 				_Distance __buffer_size)
1554:/usr/include/c++/8/bits/stl_algo.h ****     {
1555:/usr/include/c++/8/bits/stl_algo.h ****       if (__len == 1)
1556:/usr/include/c++/8/bits/stl_algo.h **** 	return __first;
1557:/usr/include/c++/8/bits/stl_algo.h **** 
1558:/usr/include/c++/8/bits/stl_algo.h ****       if (__len <= __buffer_size)
1559:/usr/include/c++/8/bits/stl_algo.h **** 	{
1560:/usr/include/c++/8/bits/stl_algo.h **** 	  _ForwardIterator __result1 = __first;
1561:/usr/include/c++/8/bits/stl_algo.h **** 	  _Pointer __result2 = __buffer;
1562:/usr/include/c++/8/bits/stl_algo.h **** 
1563:/usr/include/c++/8/bits/stl_algo.h **** 	  // The precondition guarantees that !__pred(__first), so
1564:/usr/include/c++/8/bits/stl_algo.h **** 	  // move that element to the buffer before starting the loop.
1565:/usr/include/c++/8/bits/stl_algo.h **** 	  // This ensures that we only call __pred once per element.
1566:/usr/include/c++/8/bits/stl_algo.h **** 	  *__result2 = _GLIBCXX_MOVE(*__first);
1567:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__result2;
1568:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
1569:/usr/include/c++/8/bits/stl_algo.h **** 	  for (; __first != __last; ++__first)
1570:/usr/include/c++/8/bits/stl_algo.h **** 	    if (__pred(__first))
1571:/usr/include/c++/8/bits/stl_algo.h **** 	      {
1572:/usr/include/c++/8/bits/stl_algo.h **** 		*__result1 = _GLIBCXX_MOVE(*__first);
1573:/usr/include/c++/8/bits/stl_algo.h **** 		++__result1;
1574:/usr/include/c++/8/bits/stl_algo.h **** 	      }
1575:/usr/include/c++/8/bits/stl_algo.h **** 	    else
1576:/usr/include/c++/8/bits/stl_algo.h **** 	      {
1577:/usr/include/c++/8/bits/stl_algo.h **** 		*__result2 = _GLIBCXX_MOVE(*__first);
1578:/usr/include/c++/8/bits/stl_algo.h **** 		++__result2;
1579:/usr/include/c++/8/bits/stl_algo.h **** 	      }
1580:/usr/include/c++/8/bits/stl_algo.h **** 
1581:/usr/include/c++/8/bits/stl_algo.h **** 	  _GLIBCXX_MOVE3(__buffer, __result2, __result1);
1582:/usr/include/c++/8/bits/stl_algo.h **** 	  return __result1;
1583:/usr/include/c++/8/bits/stl_algo.h **** 	}
1584:/usr/include/c++/8/bits/stl_algo.h **** 
1585:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __middle = __first;
1586:/usr/include/c++/8/bits/stl_algo.h ****       std::advance(__middle, __len / 2);
1587:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __left_split =
1588:/usr/include/c++/8/bits/stl_algo.h **** 	std::__stable_partition_adaptive(__first, __middle, __pred,
1589:/usr/include/c++/8/bits/stl_algo.h **** 					 __len / 2, __buffer,
1590:/usr/include/c++/8/bits/stl_algo.h **** 					 __buffer_size);
1591:/usr/include/c++/8/bits/stl_algo.h **** 
1592:/usr/include/c++/8/bits/stl_algo.h ****       // Advance past true-predicate values to satisfy this
1593:/usr/include/c++/8/bits/stl_algo.h ****       // function's preconditions.
1594:/usr/include/c++/8/bits/stl_algo.h ****       _Distance __right_len = __len - __len / 2;
1595:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __right_split =
1596:/usr/include/c++/8/bits/stl_algo.h **** 	std::__find_if_not_n(__middle, __right_len, __pred);
1597:/usr/include/c++/8/bits/stl_algo.h **** 
1598:/usr/include/c++/8/bits/stl_algo.h ****       if (__right_len)
1599:/usr/include/c++/8/bits/stl_algo.h **** 	__right_split =
1600:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__stable_partition_adaptive(__right_split, __last, __pred,
1601:/usr/include/c++/8/bits/stl_algo.h **** 					   __right_len,
1602:/usr/include/c++/8/bits/stl_algo.h **** 					   __buffer, __buffer_size);
1603:/usr/include/c++/8/bits/stl_algo.h **** 
1604:/usr/include/c++/8/bits/stl_algo.h ****       std::rotate(__left_split, __middle, __right_split);
1605:/usr/include/c++/8/bits/stl_algo.h ****       std::advance(__left_split, std::distance(__middle, __right_split));
1606:/usr/include/c++/8/bits/stl_algo.h ****       return __left_split;
1607:/usr/include/c++/8/bits/stl_algo.h ****     }
1608:/usr/include/c++/8/bits/stl_algo.h **** 
1609:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1610:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator
1611:/usr/include/c++/8/bits/stl_algo.h ****     __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
1612:/usr/include/c++/8/bits/stl_algo.h **** 		       _Predicate __pred)
1613:/usr/include/c++/8/bits/stl_algo.h ****     {
1614:/usr/include/c++/8/bits/stl_algo.h ****       __first = std::__find_if_not(__first, __last, __pred);
1615:/usr/include/c++/8/bits/stl_algo.h **** 
1616:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __last)
1617:/usr/include/c++/8/bits/stl_algo.h **** 	return __first;
1618:/usr/include/c++/8/bits/stl_algo.h **** 
1619:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
1620:/usr/include/c++/8/bits/stl_algo.h **** 	_ValueType;
1621:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
1622:/usr/include/c++/8/bits/stl_algo.h **** 	_DistanceType;
1623:/usr/include/c++/8/bits/stl_algo.h **** 
1624:/usr/include/c++/8/bits/stl_algo.h ****       _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first, __last);
1625:/usr/include/c++/8/bits/stl_algo.h ****       return
1626:/usr/include/c++/8/bits/stl_algo.h **** 	std::__stable_partition_adaptive(__first, __last, __pred,
1627:/usr/include/c++/8/bits/stl_algo.h **** 					 _DistanceType(__buf.requested_size()),
1628:/usr/include/c++/8/bits/stl_algo.h **** 					 __buf.begin(),
1629:/usr/include/c++/8/bits/stl_algo.h **** 					 _DistanceType(__buf.size()));
1630:/usr/include/c++/8/bits/stl_algo.h ****     }
1631:/usr/include/c++/8/bits/stl_algo.h **** 
1632:/usr/include/c++/8/bits/stl_algo.h ****   /**
1633:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Move elements for which a predicate is true to the beginning
1634:/usr/include/c++/8/bits/stl_algo.h ****    *         of a sequence, preserving relative ordering.
1635:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1636:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1637:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1638:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred    A predicate functor.
1639:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  An iterator @p middle such that @p __pred(i) is true for each
1640:/usr/include/c++/8/bits/stl_algo.h ****    *  iterator @p i in the range @p [first,middle) and false for each @p i
1641:/usr/include/c++/8/bits/stl_algo.h ****    *  in the range @p [middle,last).
1642:/usr/include/c++/8/bits/stl_algo.h ****    *
1643:/usr/include/c++/8/bits/stl_algo.h ****    *  Performs the same function as @p partition() with the additional
1644:/usr/include/c++/8/bits/stl_algo.h ****    *  guarantee that the relative ordering of elements in each group is
1645:/usr/include/c++/8/bits/stl_algo.h ****    *  preserved, so any two elements @p x and @p y in the range
1646:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__first,__last) such that @p __pred(x)==__pred(y) will have the same
1647:/usr/include/c++/8/bits/stl_algo.h ****    *  relative ordering after calling @p stable_partition().
1648:/usr/include/c++/8/bits/stl_algo.h ****   */
1649:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1650:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
1651:/usr/include/c++/8/bits/stl_algo.h ****     stable_partition(_ForwardIterator __first, _ForwardIterator __last,
1652:/usr/include/c++/8/bits/stl_algo.h **** 		     _Predicate __pred)
1653:/usr/include/c++/8/bits/stl_algo.h ****     {
1654:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
1655:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1656:/usr/include/c++/8/bits/stl_algo.h **** 				  _ForwardIterator>)
1657:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
1658:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
1659:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1660:/usr/include/c++/8/bits/stl_algo.h **** 
1661:/usr/include/c++/8/bits/stl_algo.h ****       return std::__stable_partition(__first, __last,
1662:/usr/include/c++/8/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__pred_iter(__pred));
1663:/usr/include/c++/8/bits/stl_algo.h ****     }
1664:/usr/include/c++/8/bits/stl_algo.h **** 
1665:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the sort routines.
1666:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1667:/usr/include/c++/8/bits/stl_algo.h ****     void
1668:/usr/include/c++/8/bits/stl_algo.h ****     __heap_select(_RandomAccessIterator __first,
1669:/usr/include/c++/8/bits/stl_algo.h **** 		  _RandomAccessIterator __middle,
1670:/usr/include/c++/8/bits/stl_algo.h **** 		  _RandomAccessIterator __last, _Compare __comp)
1671:/usr/include/c++/8/bits/stl_algo.h ****     {
1672:/usr/include/c++/8/bits/stl_algo.h ****       std::__make_heap(__first, __middle, __comp);
1673:/usr/include/c++/8/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
1674:/usr/include/c++/8/bits/stl_algo.h **** 	if (__comp(__i, __first))
1675:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__pop_heap(__first, __middle, __i, __comp);
1676:/usr/include/c++/8/bits/stl_algo.h ****     }
1677:/usr/include/c++/8/bits/stl_algo.h **** 
1678:/usr/include/c++/8/bits/stl_algo.h ****   // partial_sort
1679:/usr/include/c++/8/bits/stl_algo.h **** 
1680:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator,
1681:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Compare>
1682:/usr/include/c++/8/bits/stl_algo.h ****     _RandomAccessIterator
1683:/usr/include/c++/8/bits/stl_algo.h ****     __partial_sort_copy(_InputIterator __first, _InputIterator __last,
1684:/usr/include/c++/8/bits/stl_algo.h **** 			_RandomAccessIterator __result_first,
1685:/usr/include/c++/8/bits/stl_algo.h **** 			_RandomAccessIterator __result_last,
1686:/usr/include/c++/8/bits/stl_algo.h **** 			_Compare __comp)
1687:/usr/include/c++/8/bits/stl_algo.h ****     {
1688:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1689:/usr/include/c++/8/bits/stl_algo.h **** 	_InputValueType;
1690:/usr/include/c++/8/bits/stl_algo.h ****       typedef iterator_traits<_RandomAccessIterator> _RItTraits;
1691:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename _RItTraits::difference_type _DistanceType;
1692:/usr/include/c++/8/bits/stl_algo.h **** 
1693:/usr/include/c++/8/bits/stl_algo.h ****       if (__result_first == __result_last)
1694:/usr/include/c++/8/bits/stl_algo.h **** 	return __result_last;
1695:/usr/include/c++/8/bits/stl_algo.h ****       _RandomAccessIterator __result_real_last = __result_first;
1696:/usr/include/c++/8/bits/stl_algo.h ****       while (__first != __last && __result_real_last != __result_last)
1697:/usr/include/c++/8/bits/stl_algo.h **** 	{
1698:/usr/include/c++/8/bits/stl_algo.h **** 	  *__result_real_last = *__first;
1699:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__result_real_last;
1700:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
1701:/usr/include/c++/8/bits/stl_algo.h **** 	}
1702:/usr/include/c++/8/bits/stl_algo.h ****       
1703:/usr/include/c++/8/bits/stl_algo.h ****       std::__make_heap(__result_first, __result_real_last, __comp);
1704:/usr/include/c++/8/bits/stl_algo.h ****       while (__first != __last)
1705:/usr/include/c++/8/bits/stl_algo.h **** 	{
1706:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__comp(__first, __result_first))
1707:/usr/include/c++/8/bits/stl_algo.h **** 	    std::__adjust_heap(__result_first, _DistanceType(0),
1708:/usr/include/c++/8/bits/stl_algo.h **** 			       _DistanceType(__result_real_last
1709:/usr/include/c++/8/bits/stl_algo.h **** 					     - __result_first),
1710:/usr/include/c++/8/bits/stl_algo.h **** 			       _InputValueType(*__first), __comp);
1711:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
1712:/usr/include/c++/8/bits/stl_algo.h **** 	}
1713:/usr/include/c++/8/bits/stl_algo.h ****       std::__sort_heap(__result_first, __result_real_last, __comp);
1714:/usr/include/c++/8/bits/stl_algo.h ****       return __result_real_last;
1715:/usr/include/c++/8/bits/stl_algo.h ****     }
1716:/usr/include/c++/8/bits/stl_algo.h **** 
1717:/usr/include/c++/8/bits/stl_algo.h ****   /**
1718:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Copy the smallest elements of a sequence.
1719:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
1720:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
1721:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
1722:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __result_first   A random-access iterator.
1723:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __result_last    Another random-access iterator.
1724:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   An iterator indicating the end of the resulting sequence.
1725:/usr/include/c++/8/bits/stl_algo.h ****    *
1726:/usr/include/c++/8/bits/stl_algo.h ****    *  Copies and sorts the smallest N values from the range @p [__first,__last)
1727:/usr/include/c++/8/bits/stl_algo.h ****    *  to the range beginning at @p __result_first, where the number of
1728:/usr/include/c++/8/bits/stl_algo.h ****    *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
1729:/usr/include/c++/8/bits/stl_algo.h ****    *  @p (__result_last-__result_first).
1730:/usr/include/c++/8/bits/stl_algo.h ****    *  After the sort if @e i and @e j are iterators in the range
1731:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__result_first,__result_first+N) such that i precedes j then
1732:/usr/include/c++/8/bits/stl_algo.h ****    *  *j<*i is false.
1733:/usr/include/c++/8/bits/stl_algo.h ****    *  The value returned is @p __result_first+N.
1734:/usr/include/c++/8/bits/stl_algo.h ****   */
1735:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator>
1736:/usr/include/c++/8/bits/stl_algo.h ****     inline _RandomAccessIterator
1737:/usr/include/c++/8/bits/stl_algo.h ****     partial_sort_copy(_InputIterator __first, _InputIterator __last,
1738:/usr/include/c++/8/bits/stl_algo.h **** 		      _RandomAccessIterator __result_first,
1739:/usr/include/c++/8/bits/stl_algo.h **** 		      _RandomAccessIterator __result_last)
1740:/usr/include/c++/8/bits/stl_algo.h ****     {
1741:/usr/include/c++/8/bits/stl_algo.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
1742:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1743:/usr/include/c++/8/bits/stl_algo.h **** 	_InputValueType;
1744:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1745:/usr/include/c++/8/bits/stl_algo.h **** 	_OutputValueType;
1746:/usr/include/c++/8/bits/stl_algo.h **** #endif
1747:/usr/include/c++/8/bits/stl_algo.h **** 
1748:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
1749:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
1750:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,
1751:/usr/include/c++/8/bits/stl_algo.h **** 				  _OutputValueType>)
1752:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<_InputValueType,
1753:/usr/include/c++/8/bits/stl_algo.h **** 						     _OutputValueType>)
1754:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_OutputValueType>)
1755:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1756:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
1757:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__result_first, __result_last);
1758:/usr/include/c++/8/bits/stl_algo.h **** 
1759:/usr/include/c++/8/bits/stl_algo.h ****       return std::__partial_sort_copy(__first, __last,
1760:/usr/include/c++/8/bits/stl_algo.h **** 				      __result_first, __result_last,
1761:/usr/include/c++/8/bits/stl_algo.h **** 				      __gnu_cxx::__ops::__iter_less_iter());
1762:/usr/include/c++/8/bits/stl_algo.h ****     }
1763:/usr/include/c++/8/bits/stl_algo.h **** 
1764:/usr/include/c++/8/bits/stl_algo.h ****   /**
1765:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Copy the smallest elements of a sequence using a predicate for
1766:/usr/include/c++/8/bits/stl_algo.h ****    *         comparison.
1767:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
1768:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An input iterator.
1769:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another input iterator.
1770:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __result_first   A random-access iterator.
1771:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __result_last    Another random-access iterator.
1772:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
1773:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   An iterator indicating the end of the resulting sequence.
1774:/usr/include/c++/8/bits/stl_algo.h ****    *
1775:/usr/include/c++/8/bits/stl_algo.h ****    *  Copies and sorts the smallest N values from the range @p [__first,__last)
1776:/usr/include/c++/8/bits/stl_algo.h ****    *  to the range beginning at @p result_first, where the number of
1777:/usr/include/c++/8/bits/stl_algo.h ****    *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
1778:/usr/include/c++/8/bits/stl_algo.h ****    *  @p (__result_last-__result_first).
1779:/usr/include/c++/8/bits/stl_algo.h ****    *  After the sort if @e i and @e j are iterators in the range
1780:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__result_first,__result_first+N) such that i precedes j then
1781:/usr/include/c++/8/bits/stl_algo.h ****    *  @p __comp(*j,*i) is false.
1782:/usr/include/c++/8/bits/stl_algo.h ****    *  The value returned is @p __result_first+N.
1783:/usr/include/c++/8/bits/stl_algo.h ****   */
1784:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator,
1785:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Compare>
1786:/usr/include/c++/8/bits/stl_algo.h ****     inline _RandomAccessIterator
1787:/usr/include/c++/8/bits/stl_algo.h ****     partial_sort_copy(_InputIterator __first, _InputIterator __last,
1788:/usr/include/c++/8/bits/stl_algo.h **** 		      _RandomAccessIterator __result_first,
1789:/usr/include/c++/8/bits/stl_algo.h **** 		      _RandomAccessIterator __result_last,
1790:/usr/include/c++/8/bits/stl_algo.h **** 		      _Compare __comp)
1791:/usr/include/c++/8/bits/stl_algo.h ****     {
1792:/usr/include/c++/8/bits/stl_algo.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
1793:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1794:/usr/include/c++/8/bits/stl_algo.h **** 	_InputValueType;
1795:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1796:/usr/include/c++/8/bits/stl_algo.h **** 	_OutputValueType;
1797:/usr/include/c++/8/bits/stl_algo.h **** #endif
1798:/usr/include/c++/8/bits/stl_algo.h **** 
1799:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
1800:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
1801:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
1802:/usr/include/c++/8/bits/stl_algo.h **** 				  _RandomAccessIterator>)
1803:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,
1804:/usr/include/c++/8/bits/stl_algo.h **** 				  _OutputValueType>)
1805:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
1806:/usr/include/c++/8/bits/stl_algo.h **** 				  _InputValueType, _OutputValueType>)
1807:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
1808:/usr/include/c++/8/bits/stl_algo.h **** 				  _OutputValueType, _OutputValueType>)
1809:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1810:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
1811:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__result_first, __result_last);
1812:/usr/include/c++/8/bits/stl_algo.h **** 
1813:/usr/include/c++/8/bits/stl_algo.h ****       return std::__partial_sort_copy(__first, __last,
1814:/usr/include/c++/8/bits/stl_algo.h **** 				      __result_first, __result_last,
1815:/usr/include/c++/8/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_iter(__comp));
1816:/usr/include/c++/8/bits/stl_algo.h ****     }
1817:/usr/include/c++/8/bits/stl_algo.h **** 
1818:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1819:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1820:/usr/include/c++/8/bits/stl_algo.h ****     void
1821:/usr/include/c++/8/bits/stl_algo.h ****     __unguarded_linear_insert(_RandomAccessIterator __last,
1822:/usr/include/c++/8/bits/stl_algo.h **** 			      _Compare __comp)
1823:/usr/include/c++/8/bits/stl_algo.h ****     {
1824:/usr/include/c++/8/bits/stl_algo.h ****       typename iterator_traits<_RandomAccessIterator>::value_type
1825:/usr/include/c++/8/bits/stl_algo.h **** 	__val = _GLIBCXX_MOVE(*__last);
1826:/usr/include/c++/8/bits/stl_algo.h ****       _RandomAccessIterator __next = __last;
1827:/usr/include/c++/8/bits/stl_algo.h ****       --__next;
1828:/usr/include/c++/8/bits/stl_algo.h ****       while (__comp(__val, __next))
1829:/usr/include/c++/8/bits/stl_algo.h **** 	{
1830:/usr/include/c++/8/bits/stl_algo.h **** 	  *__last = _GLIBCXX_MOVE(*__next);
1831:/usr/include/c++/8/bits/stl_algo.h **** 	  __last = __next;
1832:/usr/include/c++/8/bits/stl_algo.h **** 	  --__next;
1833:/usr/include/c++/8/bits/stl_algo.h **** 	}
1834:/usr/include/c++/8/bits/stl_algo.h ****       *__last = _GLIBCXX_MOVE(__val);
1835:/usr/include/c++/8/bits/stl_algo.h ****     }
1836:/usr/include/c++/8/bits/stl_algo.h **** 
1837:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1838:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1839:/usr/include/c++/8/bits/stl_algo.h ****     void
1840:/usr/include/c++/8/bits/stl_algo.h ****     __insertion_sort(_RandomAccessIterator __first,
1841:/usr/include/c++/8/bits/stl_algo.h **** 		     _RandomAccessIterator __last, _Compare __comp)
1842:/usr/include/c++/8/bits/stl_algo.h ****     {
1843:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __last) return;
1844:/usr/include/c++/8/bits/stl_algo.h **** 
1845:/usr/include/c++/8/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
1846:/usr/include/c++/8/bits/stl_algo.h **** 	{
1847:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__comp(__i, __first))
1848:/usr/include/c++/8/bits/stl_algo.h **** 	    {
1849:/usr/include/c++/8/bits/stl_algo.h **** 	      typename iterator_traits<_RandomAccessIterator>::value_type
1850:/usr/include/c++/8/bits/stl_algo.h **** 		__val = _GLIBCXX_MOVE(*__i);
1851:/usr/include/c++/8/bits/stl_algo.h **** 	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
1852:/usr/include/c++/8/bits/stl_algo.h **** 	      *__first = _GLIBCXX_MOVE(__val);
1853:/usr/include/c++/8/bits/stl_algo.h **** 	    }
1854:/usr/include/c++/8/bits/stl_algo.h **** 	  else
1855:/usr/include/c++/8/bits/stl_algo.h **** 	    std::__unguarded_linear_insert(__i,
1856:/usr/include/c++/8/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
1857:/usr/include/c++/8/bits/stl_algo.h **** 	}
1858:/usr/include/c++/8/bits/stl_algo.h ****     }
1859:/usr/include/c++/8/bits/stl_algo.h **** 
1860:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1861:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1862:/usr/include/c++/8/bits/stl_algo.h ****     inline void
1863:/usr/include/c++/8/bits/stl_algo.h ****     __unguarded_insertion_sort(_RandomAccessIterator __first,
1864:/usr/include/c++/8/bits/stl_algo.h **** 			       _RandomAccessIterator __last, _Compare __comp)
1865:/usr/include/c++/8/bits/stl_algo.h ****     {
1866:/usr/include/c++/8/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
1867:/usr/include/c++/8/bits/stl_algo.h **** 	std::__unguarded_linear_insert(__i,
1868:/usr/include/c++/8/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
1869:/usr/include/c++/8/bits/stl_algo.h ****     }
1870:/usr/include/c++/8/bits/stl_algo.h **** 
1871:/usr/include/c++/8/bits/stl_algo.h ****   /**
1872:/usr/include/c++/8/bits/stl_algo.h ****    *  @doctodo
1873:/usr/include/c++/8/bits/stl_algo.h ****    *  This controls some aspect of the sort routines.
1874:/usr/include/c++/8/bits/stl_algo.h ****   */
1875:/usr/include/c++/8/bits/stl_algo.h ****   enum { _S_threshold = 16 };
1876:/usr/include/c++/8/bits/stl_algo.h **** 
1877:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1878:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1879:/usr/include/c++/8/bits/stl_algo.h ****     void
1880:/usr/include/c++/8/bits/stl_algo.h ****     __final_insertion_sort(_RandomAccessIterator __first,
1881:/usr/include/c++/8/bits/stl_algo.h **** 			   _RandomAccessIterator __last, _Compare __comp)
1882:/usr/include/c++/8/bits/stl_algo.h ****     {
1883:/usr/include/c++/8/bits/stl_algo.h ****       if (__last - __first > int(_S_threshold))
1884:/usr/include/c++/8/bits/stl_algo.h **** 	{
1885:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
1886:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
1887:/usr/include/c++/8/bits/stl_algo.h **** 					  __comp);
1888:/usr/include/c++/8/bits/stl_algo.h **** 	}
1889:/usr/include/c++/8/bits/stl_algo.h ****       else
1890:/usr/include/c++/8/bits/stl_algo.h **** 	std::__insertion_sort(__first, __last, __comp);
1891:/usr/include/c++/8/bits/stl_algo.h ****     }
1892:/usr/include/c++/8/bits/stl_algo.h **** 
1893:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function...
1894:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1895:/usr/include/c++/8/bits/stl_algo.h ****     _RandomAccessIterator
1896:/usr/include/c++/8/bits/stl_algo.h ****     __unguarded_partition(_RandomAccessIterator __first,
1897:/usr/include/c++/8/bits/stl_algo.h **** 			  _RandomAccessIterator __last,
1898:/usr/include/c++/8/bits/stl_algo.h **** 			  _RandomAccessIterator __pivot, _Compare __comp)
1899:/usr/include/c++/8/bits/stl_algo.h ****     {
1900:/usr/include/c++/8/bits/stl_algo.h ****       while (true)
1901:/usr/include/c++/8/bits/stl_algo.h **** 	{
1902:/usr/include/c++/8/bits/stl_algo.h **** 	  while (__comp(__first, __pivot))
1903:/usr/include/c++/8/bits/stl_algo.h **** 	    ++__first;
1904:/usr/include/c++/8/bits/stl_algo.h **** 	  --__last;
1905:/usr/include/c++/8/bits/stl_algo.h **** 	  while (__comp(__pivot, __last))
1906:/usr/include/c++/8/bits/stl_algo.h **** 	    --__last;
1907:/usr/include/c++/8/bits/stl_algo.h **** 	  if (!(__first < __last))
1908:/usr/include/c++/8/bits/stl_algo.h **** 	    return __first;
1909:/usr/include/c++/8/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1910:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
1911:/usr/include/c++/8/bits/stl_algo.h **** 	}
1912:/usr/include/c++/8/bits/stl_algo.h ****     }
1913:/usr/include/c++/8/bits/stl_algo.h **** 
1914:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function...
1915:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1916:/usr/include/c++/8/bits/stl_algo.h ****     inline _RandomAccessIterator
1917:/usr/include/c++/8/bits/stl_algo.h ****     __unguarded_partition_pivot(_RandomAccessIterator __first,
1918:/usr/include/c++/8/bits/stl_algo.h **** 				_RandomAccessIterator __last, _Compare __comp)
1919:/usr/include/c++/8/bits/stl_algo.h ****     {
1920:/usr/include/c++/8/bits/stl_algo.h ****       _RandomAccessIterator __mid = __first + (__last - __first) / 2;
1921:/usr/include/c++/8/bits/stl_algo.h ****       std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
1922:/usr/include/c++/8/bits/stl_algo.h **** 				  __comp);
1923:/usr/include/c++/8/bits/stl_algo.h ****       return std::__unguarded_partition(__first + 1, __last, __first, __comp);
1924:/usr/include/c++/8/bits/stl_algo.h ****     }
1925:/usr/include/c++/8/bits/stl_algo.h **** 
1926:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1927:/usr/include/c++/8/bits/stl_algo.h ****     inline void
1928:/usr/include/c++/8/bits/stl_algo.h ****     __partial_sort(_RandomAccessIterator __first,
1929:/usr/include/c++/8/bits/stl_algo.h **** 		   _RandomAccessIterator __middle,
1930:/usr/include/c++/8/bits/stl_algo.h **** 		   _RandomAccessIterator __last,
1931:/usr/include/c++/8/bits/stl_algo.h **** 		   _Compare __comp)
1932:/usr/include/c++/8/bits/stl_algo.h ****     {
1933:/usr/include/c++/8/bits/stl_algo.h ****       std::__heap_select(__first, __middle, __last, __comp);
1934:/usr/include/c++/8/bits/stl_algo.h ****       std::__sort_heap(__first, __middle, __comp);
1935:/usr/include/c++/8/bits/stl_algo.h ****     }
1936:/usr/include/c++/8/bits/stl_algo.h **** 
1937:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1938:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size, typename _Compare>
1939:/usr/include/c++/8/bits/stl_algo.h ****     void
1940:/usr/include/c++/8/bits/stl_algo.h ****     __introsort_loop(_RandomAccessIterator __first,
1941:/usr/include/c++/8/bits/stl_algo.h **** 		     _RandomAccessIterator __last,
1942:/usr/include/c++/8/bits/stl_algo.h **** 		     _Size __depth_limit, _Compare __comp)
1943:/usr/include/c++/8/bits/stl_algo.h ****     {
1944:/usr/include/c++/8/bits/stl_algo.h ****       while (__last - __first > int(_S_threshold))
1945:/usr/include/c++/8/bits/stl_algo.h **** 	{
1946:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__depth_limit == 0)
1947:/usr/include/c++/8/bits/stl_algo.h **** 	    {
1948:/usr/include/c++/8/bits/stl_algo.h **** 	      std::__partial_sort(__first, __last, __last, __comp);
1949:/usr/include/c++/8/bits/stl_algo.h **** 	      return;
1950:/usr/include/c++/8/bits/stl_algo.h **** 	    }
1951:/usr/include/c++/8/bits/stl_algo.h **** 	  --__depth_limit;
1952:/usr/include/c++/8/bits/stl_algo.h **** 	  _RandomAccessIterator __cut =
1953:/usr/include/c++/8/bits/stl_algo.h **** 	    std::__unguarded_partition_pivot(__first, __last, __comp);
1954:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
1955:/usr/include/c++/8/bits/stl_algo.h **** 	  __last = __cut;
1956:/usr/include/c++/8/bits/stl_algo.h **** 	}
1957:/usr/include/c++/8/bits/stl_algo.h ****     }
1958:/usr/include/c++/8/bits/stl_algo.h **** 
1959:/usr/include/c++/8/bits/stl_algo.h ****   // sort
1960:/usr/include/c++/8/bits/stl_algo.h **** 
1961:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1962:/usr/include/c++/8/bits/stl_algo.h ****     inline void
1963:/usr/include/c++/8/bits/stl_algo.h ****     __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
1964:/usr/include/c++/8/bits/stl_algo.h **** 	   _Compare __comp)
1965:/usr/include/c++/8/bits/stl_algo.h ****     {
1966:/usr/include/c++/8/bits/stl_algo.h ****       if (__first != __last)
1967:/usr/include/c++/8/bits/stl_algo.h **** 	{
1968:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__introsort_loop(__first, __last,
1969:/usr/include/c++/8/bits/stl_algo.h **** 				std::__lg(__last - __first) * 2,
1970:/usr/include/c++/8/bits/stl_algo.h **** 				__comp);
1971:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__final_insertion_sort(__first, __last, __comp);
1972:/usr/include/c++/8/bits/stl_algo.h **** 	}
1973:/usr/include/c++/8/bits/stl_algo.h ****     }
1974:/usr/include/c++/8/bits/stl_algo.h **** 
1975:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size, typename _Compare>
1976:/usr/include/c++/8/bits/stl_algo.h ****     void
1977:/usr/include/c++/8/bits/stl_algo.h ****     __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
1978:/usr/include/c++/8/bits/stl_algo.h **** 		  _RandomAccessIterator __last, _Size __depth_limit,
1979:/usr/include/c++/8/bits/stl_algo.h **** 		  _Compare __comp)
1980:/usr/include/c++/8/bits/stl_algo.h ****     {
1981:/usr/include/c++/8/bits/stl_algo.h ****       while (__last - __first > 3)
1982:/usr/include/c++/8/bits/stl_algo.h **** 	{
1983:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__depth_limit == 0)
1984:/usr/include/c++/8/bits/stl_algo.h **** 	    {
1985:/usr/include/c++/8/bits/stl_algo.h **** 	      std::__heap_select(__first, __nth + 1, __last, __comp);
1986:/usr/include/c++/8/bits/stl_algo.h **** 	      // Place the nth largest element in its final position.
1987:/usr/include/c++/8/bits/stl_algo.h **** 	      std::iter_swap(__first, __nth);
1988:/usr/include/c++/8/bits/stl_algo.h **** 	      return;
1989:/usr/include/c++/8/bits/stl_algo.h **** 	    }
1990:/usr/include/c++/8/bits/stl_algo.h **** 	  --__depth_limit;
1991:/usr/include/c++/8/bits/stl_algo.h **** 	  _RandomAccessIterator __cut =
1992:/usr/include/c++/8/bits/stl_algo.h **** 	    std::__unguarded_partition_pivot(__first, __last, __comp);
1993:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__cut <= __nth)
1994:/usr/include/c++/8/bits/stl_algo.h **** 	    __first = __cut;
1995:/usr/include/c++/8/bits/stl_algo.h **** 	  else
1996:/usr/include/c++/8/bits/stl_algo.h **** 	    __last = __cut;
1997:/usr/include/c++/8/bits/stl_algo.h **** 	}
1998:/usr/include/c++/8/bits/stl_algo.h ****       std::__insertion_sort(__first, __last, __comp);
1999:/usr/include/c++/8/bits/stl_algo.h ****     }
2000:/usr/include/c++/8/bits/stl_algo.h **** 
2001:/usr/include/c++/8/bits/stl_algo.h ****   // nth_element
2002:/usr/include/c++/8/bits/stl_algo.h **** 
2003:/usr/include/c++/8/bits/stl_algo.h ****   // lower_bound moved to stl_algobase.h
2004:/usr/include/c++/8/bits/stl_algo.h **** 
2005:/usr/include/c++/8/bits/stl_algo.h ****   /**
2006:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Finds the first position in which @p __val could be inserted
2007:/usr/include/c++/8/bits/stl_algo.h ****    *         without changing the ordering.
2008:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2009:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
2010:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2011:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __val     The search term.
2012:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2013:/usr/include/c++/8/bits/stl_algo.h ****    *  @return An iterator pointing to the first element <em>not less
2014:/usr/include/c++/8/bits/stl_algo.h ****    *           than</em> @p __val, or end() if every element is less
2015:/usr/include/c++/8/bits/stl_algo.h ****    *           than @p __val.
2016:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2017:/usr/include/c++/8/bits/stl_algo.h ****    *
2018:/usr/include/c++/8/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2019:/usr/include/c++/8/bits/stl_algo.h ****    *  the function used for the initial sort.
2020:/usr/include/c++/8/bits/stl_algo.h ****   */
2021:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2022:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
2023:/usr/include/c++/8/bits/stl_algo.h ****     lower_bound(_ForwardIterator __first, _ForwardIterator __last,
2024:/usr/include/c++/8/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2025:/usr/include/c++/8/bits/stl_algo.h ****     {
2026:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
2027:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2028:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2029:/usr/include/c++/8/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2030:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2031:/usr/include/c++/8/bits/stl_algo.h **** 						__val, __comp);
2032:/usr/include/c++/8/bits/stl_algo.h **** 
2033:/usr/include/c++/8/bits/stl_algo.h ****       return std::__lower_bound(__first, __last, __val,
2034:/usr/include/c++/8/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_val(__comp));
2035:/usr/include/c++/8/bits/stl_algo.h ****     }
2036:/usr/include/c++/8/bits/stl_algo.h **** 
2037:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2038:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator
2039:/usr/include/c++/8/bits/stl_algo.h ****     __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2040:/usr/include/c++/8/bits/stl_algo.h **** 		  const _Tp& __val, _Compare __comp)
2041:/usr/include/c++/8/bits/stl_algo.h ****     {
2042:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
2043:/usr/include/c++/8/bits/stl_algo.h **** 	_DistanceType;
2044:/usr/include/c++/8/bits/stl_algo.h **** 
2045:/usr/include/c++/8/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
2046:/usr/include/c++/8/bits/stl_algo.h **** 
2047:/usr/include/c++/8/bits/stl_algo.h ****       while (__len > 0)
2048:/usr/include/c++/8/bits/stl_algo.h **** 	{
2049:/usr/include/c++/8/bits/stl_algo.h **** 	  _DistanceType __half = __len >> 1;
2050:/usr/include/c++/8/bits/stl_algo.h **** 	  _ForwardIterator __middle = __first;
2051:/usr/include/c++/8/bits/stl_algo.h **** 	  std::advance(__middle, __half);
2052:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__comp(__val, __middle))
2053:/usr/include/c++/8/bits/stl_algo.h **** 	    __len = __half;
2054:/usr/include/c++/8/bits/stl_algo.h **** 	  else
2055:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2056:/usr/include/c++/8/bits/stl_algo.h **** 	      __first = __middle;
2057:/usr/include/c++/8/bits/stl_algo.h **** 	      ++__first;
2058:/usr/include/c++/8/bits/stl_algo.h **** 	      __len = __len - __half - 1;
2059:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2060:/usr/include/c++/8/bits/stl_algo.h **** 	}
2061:/usr/include/c++/8/bits/stl_algo.h ****       return __first;
2062:/usr/include/c++/8/bits/stl_algo.h ****     }
2063:/usr/include/c++/8/bits/stl_algo.h **** 
2064:/usr/include/c++/8/bits/stl_algo.h ****   /**
2065:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Finds the last position in which @p __val could be inserted
2066:/usr/include/c++/8/bits/stl_algo.h ****    *         without changing the ordering.
2067:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2068:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
2069:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2070:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __val     The search term.
2071:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  An iterator pointing to the first element greater than @p __val,
2072:/usr/include/c++/8/bits/stl_algo.h ****    *           or end() if no elements are greater than @p __val.
2073:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2074:/usr/include/c++/8/bits/stl_algo.h ****   */
2075:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2076:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
2077:/usr/include/c++/8/bits/stl_algo.h ****     upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2078:/usr/include/c++/8/bits/stl_algo.h **** 		const _Tp& __val)
2079:/usr/include/c++/8/bits/stl_algo.h ****     {
2080:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
2081:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2082:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2083:/usr/include/c++/8/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2084:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2085:/usr/include/c++/8/bits/stl_algo.h **** 
2086:/usr/include/c++/8/bits/stl_algo.h ****       return std::__upper_bound(__first, __last, __val,
2087:/usr/include/c++/8/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_less_iter());
2088:/usr/include/c++/8/bits/stl_algo.h ****     }
2089:/usr/include/c++/8/bits/stl_algo.h **** 
2090:/usr/include/c++/8/bits/stl_algo.h ****   /**
2091:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Finds the last position in which @p __val could be inserted
2092:/usr/include/c++/8/bits/stl_algo.h ****    *         without changing the ordering.
2093:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2094:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
2095:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2096:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __val     The search term.
2097:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2098:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  An iterator pointing to the first element greater than @p __val,
2099:/usr/include/c++/8/bits/stl_algo.h ****    *           or end() if no elements are greater than @p __val.
2100:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2101:/usr/include/c++/8/bits/stl_algo.h ****    *
2102:/usr/include/c++/8/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2103:/usr/include/c++/8/bits/stl_algo.h ****    *  the function used for the initial sort.
2104:/usr/include/c++/8/bits/stl_algo.h ****   */
2105:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2106:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
2107:/usr/include/c++/8/bits/stl_algo.h ****     upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2108:/usr/include/c++/8/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2109:/usr/include/c++/8/bits/stl_algo.h ****     {
2110:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
2111:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2112:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2113:/usr/include/c++/8/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2114:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2115:/usr/include/c++/8/bits/stl_algo.h **** 						__val, __comp);
2116:/usr/include/c++/8/bits/stl_algo.h **** 
2117:/usr/include/c++/8/bits/stl_algo.h ****       return std::__upper_bound(__first, __last, __val,
2118:/usr/include/c++/8/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
2119:/usr/include/c++/8/bits/stl_algo.h ****     }
2120:/usr/include/c++/8/bits/stl_algo.h **** 
2121:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp,
2122:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _CompareItTp, typename _CompareTpIt>
2123:/usr/include/c++/8/bits/stl_algo.h ****     pair<_ForwardIterator, _ForwardIterator>
2124:/usr/include/c++/8/bits/stl_algo.h ****     __equal_range(_ForwardIterator __first, _ForwardIterator __last,
2125:/usr/include/c++/8/bits/stl_algo.h **** 		  const _Tp& __val,
2126:/usr/include/c++/8/bits/stl_algo.h **** 		  _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
2127:/usr/include/c++/8/bits/stl_algo.h ****     {
2128:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
2129:/usr/include/c++/8/bits/stl_algo.h **** 	_DistanceType;
2130:/usr/include/c++/8/bits/stl_algo.h **** 
2131:/usr/include/c++/8/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
2132:/usr/include/c++/8/bits/stl_algo.h **** 
2133:/usr/include/c++/8/bits/stl_algo.h ****       while (__len > 0)
2134:/usr/include/c++/8/bits/stl_algo.h **** 	{
2135:/usr/include/c++/8/bits/stl_algo.h **** 	  _DistanceType __half = __len >> 1;
2136:/usr/include/c++/8/bits/stl_algo.h **** 	  _ForwardIterator __middle = __first;
2137:/usr/include/c++/8/bits/stl_algo.h **** 	  std::advance(__middle, __half);
2138:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__comp_it_val(__middle, __val))
2139:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2140:/usr/include/c++/8/bits/stl_algo.h **** 	      __first = __middle;
2141:/usr/include/c++/8/bits/stl_algo.h **** 	      ++__first;
2142:/usr/include/c++/8/bits/stl_algo.h **** 	      __len = __len - __half - 1;
2143:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2144:/usr/include/c++/8/bits/stl_algo.h **** 	  else if (__comp_val_it(__val, __middle))
2145:/usr/include/c++/8/bits/stl_algo.h **** 	    __len = __half;
2146:/usr/include/c++/8/bits/stl_algo.h **** 	  else
2147:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2148:/usr/include/c++/8/bits/stl_algo.h **** 	      _ForwardIterator __left
2149:/usr/include/c++/8/bits/stl_algo.h **** 		= std::__lower_bound(__first, __middle, __val, __comp_it_val);
2150:/usr/include/c++/8/bits/stl_algo.h **** 	      std::advance(__first, __len);
2151:/usr/include/c++/8/bits/stl_algo.h **** 	      _ForwardIterator __right
2152:/usr/include/c++/8/bits/stl_algo.h **** 		= std::__upper_bound(++__middle, __first, __val, __comp_val_it);
2153:/usr/include/c++/8/bits/stl_algo.h **** 	      return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
2154:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2155:/usr/include/c++/8/bits/stl_algo.h **** 	}
2156:/usr/include/c++/8/bits/stl_algo.h ****       return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
2157:/usr/include/c++/8/bits/stl_algo.h ****     }
2158:/usr/include/c++/8/bits/stl_algo.h **** 
2159:/usr/include/c++/8/bits/stl_algo.h ****   /**
2160:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Finds the largest subrange in which @p __val could be inserted
2161:/usr/include/c++/8/bits/stl_algo.h ****    *         at any place in it without changing the ordering.
2162:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2163:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
2164:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2165:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __val     The search term.
2166:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  An pair of iterators defining the subrange.
2167:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2168:/usr/include/c++/8/bits/stl_algo.h ****    *
2169:/usr/include/c++/8/bits/stl_algo.h ****    *  This is equivalent to
2170:/usr/include/c++/8/bits/stl_algo.h ****    *  @code
2171:/usr/include/c++/8/bits/stl_algo.h ****    *    std::make_pair(lower_bound(__first, __last, __val),
2172:/usr/include/c++/8/bits/stl_algo.h ****    *                   upper_bound(__first, __last, __val))
2173:/usr/include/c++/8/bits/stl_algo.h ****    *  @endcode
2174:/usr/include/c++/8/bits/stl_algo.h ****    *  but does not actually call those functions.
2175:/usr/include/c++/8/bits/stl_algo.h ****   */
2176:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2177:/usr/include/c++/8/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
2178:/usr/include/c++/8/bits/stl_algo.h ****     equal_range(_ForwardIterator __first, _ForwardIterator __last,
2179:/usr/include/c++/8/bits/stl_algo.h **** 		const _Tp& __val)
2180:/usr/include/c++/8/bits/stl_algo.h ****     {
2181:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
2182:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2183:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2184:/usr/include/c++/8/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2185:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2186:/usr/include/c++/8/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2187:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower(__first, __last, __val);
2188:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2189:/usr/include/c++/8/bits/stl_algo.h **** 
2190:/usr/include/c++/8/bits/stl_algo.h ****       return std::__equal_range(__first, __last, __val,
2191:/usr/include/c++/8/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_less_val(),
2192:/usr/include/c++/8/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_less_iter());
2193:/usr/include/c++/8/bits/stl_algo.h ****     }
2194:/usr/include/c++/8/bits/stl_algo.h **** 
2195:/usr/include/c++/8/bits/stl_algo.h ****   /**
2196:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Finds the largest subrange in which @p __val could be inserted
2197:/usr/include/c++/8/bits/stl_algo.h ****    *         at any place in it without changing the ordering.
2198:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
2199:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2200:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __val     The search term.
2201:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2202:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  An pair of iterators defining the subrange.
2203:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2204:/usr/include/c++/8/bits/stl_algo.h ****    *
2205:/usr/include/c++/8/bits/stl_algo.h ****    *  This is equivalent to
2206:/usr/include/c++/8/bits/stl_algo.h ****    *  @code
2207:/usr/include/c++/8/bits/stl_algo.h ****    *    std::make_pair(lower_bound(__first, __last, __val, __comp),
2208:/usr/include/c++/8/bits/stl_algo.h ****    *                   upper_bound(__first, __last, __val, __comp))
2209:/usr/include/c++/8/bits/stl_algo.h ****    *  @endcode
2210:/usr/include/c++/8/bits/stl_algo.h ****    *  but does not actually call those functions.
2211:/usr/include/c++/8/bits/stl_algo.h ****   */
2212:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2213:/usr/include/c++/8/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
2214:/usr/include/c++/8/bits/stl_algo.h ****     equal_range(_ForwardIterator __first, _ForwardIterator __last,
2215:/usr/include/c++/8/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2216:/usr/include/c++/8/bits/stl_algo.h ****     {
2217:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
2218:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2219:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2220:/usr/include/c++/8/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2221:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2222:/usr/include/c++/8/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2223:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2224:/usr/include/c++/8/bits/stl_algo.h **** 						__val, __comp);
2225:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2226:/usr/include/c++/8/bits/stl_algo.h **** 						__val, __comp);
2227:/usr/include/c++/8/bits/stl_algo.h **** 
2228:/usr/include/c++/8/bits/stl_algo.h ****       return std::__equal_range(__first, __last, __val,
2229:/usr/include/c++/8/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_val(__comp),
2230:/usr/include/c++/8/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
2231:/usr/include/c++/8/bits/stl_algo.h ****     }
2232:/usr/include/c++/8/bits/stl_algo.h **** 
2233:/usr/include/c++/8/bits/stl_algo.h ****   /**
2234:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Determines whether an element exists in a range.
2235:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2236:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
2237:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2238:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __val     The search term.
2239:/usr/include/c++/8/bits/stl_algo.h ****    *  @return True if @p __val (or its equivalent) is in [@p
2240:/usr/include/c++/8/bits/stl_algo.h ****    *  __first,@p __last ].
2241:/usr/include/c++/8/bits/stl_algo.h ****    *
2242:/usr/include/c++/8/bits/stl_algo.h ****    *  Note that this does not actually return an iterator to @p __val.  For
2243:/usr/include/c++/8/bits/stl_algo.h ****    *  that, use std::find or a container's specialized find member functions.
2244:/usr/include/c++/8/bits/stl_algo.h ****   */
2245:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2246:/usr/include/c++/8/bits/stl_algo.h ****     bool
2247:/usr/include/c++/8/bits/stl_algo.h ****     binary_search(_ForwardIterator __first, _ForwardIterator __last,
2248:/usr/include/c++/8/bits/stl_algo.h **** 		  const _Tp& __val)
2249:/usr/include/c++/8/bits/stl_algo.h ****     {
2250:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
2251:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2252:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2253:/usr/include/c++/8/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2254:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower(__first, __last, __val);
2255:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2256:/usr/include/c++/8/bits/stl_algo.h **** 
2257:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __i
2258:/usr/include/c++/8/bits/stl_algo.h **** 	= std::__lower_bound(__first, __last, __val,
2259:/usr/include/c++/8/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_less_val());
2260:/usr/include/c++/8/bits/stl_algo.h ****       return __i != __last && !(__val < *__i);
2261:/usr/include/c++/8/bits/stl_algo.h ****     }
2262:/usr/include/c++/8/bits/stl_algo.h **** 
2263:/usr/include/c++/8/bits/stl_algo.h ****   /**
2264:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Determines whether an element exists in a range.
2265:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2266:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
2267:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2268:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __val     The search term.
2269:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2270:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  True if @p __val (or its equivalent) is in @p [__first,__last].
2271:/usr/include/c++/8/bits/stl_algo.h ****    *
2272:/usr/include/c++/8/bits/stl_algo.h ****    *  Note that this does not actually return an iterator to @p __val.  For
2273:/usr/include/c++/8/bits/stl_algo.h ****    *  that, use std::find or a container's specialized find member functions.
2274:/usr/include/c++/8/bits/stl_algo.h ****    *
2275:/usr/include/c++/8/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2276:/usr/include/c++/8/bits/stl_algo.h ****    *  the function used for the initial sort.
2277:/usr/include/c++/8/bits/stl_algo.h ****   */
2278:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2279:/usr/include/c++/8/bits/stl_algo.h ****     bool
2280:/usr/include/c++/8/bits/stl_algo.h ****     binary_search(_ForwardIterator __first, _ForwardIterator __last,
2281:/usr/include/c++/8/bits/stl_algo.h **** 		  const _Tp& __val, _Compare __comp)
2282:/usr/include/c++/8/bits/stl_algo.h ****     {
2283:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
2284:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2285:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2286:/usr/include/c++/8/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2287:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2288:/usr/include/c++/8/bits/stl_algo.h **** 						__val, __comp);
2289:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2290:/usr/include/c++/8/bits/stl_algo.h **** 						__val, __comp);
2291:/usr/include/c++/8/bits/stl_algo.h **** 
2292:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __i
2293:/usr/include/c++/8/bits/stl_algo.h **** 	= std::__lower_bound(__first, __last, __val,
2294:/usr/include/c++/8/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_val(__comp));
2295:/usr/include/c++/8/bits/stl_algo.h ****       return __i != __last && !bool(__comp(__val, *__i));
2296:/usr/include/c++/8/bits/stl_algo.h ****     }
2297:/usr/include/c++/8/bits/stl_algo.h **** 
2298:/usr/include/c++/8/bits/stl_algo.h ****   // merge
2299:/usr/include/c++/8/bits/stl_algo.h **** 
2300:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the __merge_adaptive routines.
2301:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2302:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _OutputIterator, typename _Compare>
2303:/usr/include/c++/8/bits/stl_algo.h ****     void
2304:/usr/include/c++/8/bits/stl_algo.h ****     __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
2305:/usr/include/c++/8/bits/stl_algo.h **** 			  _InputIterator2 __first2, _InputIterator2 __last2,
2306:/usr/include/c++/8/bits/stl_algo.h **** 			  _OutputIterator __result, _Compare __comp)
2307:/usr/include/c++/8/bits/stl_algo.h ****     {
2308:/usr/include/c++/8/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2309:/usr/include/c++/8/bits/stl_algo.h **** 	{
2310:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__comp(__first2, __first1))
2311:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2312:/usr/include/c++/8/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first2);
2313:/usr/include/c++/8/bits/stl_algo.h **** 	      ++__first2;
2314:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2315:/usr/include/c++/8/bits/stl_algo.h **** 	  else
2316:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2317:/usr/include/c++/8/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first1);
2318:/usr/include/c++/8/bits/stl_algo.h **** 	      ++__first1;
2319:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2320:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__result;
2321:/usr/include/c++/8/bits/stl_algo.h **** 	}
2322:/usr/include/c++/8/bits/stl_algo.h ****       if (__first1 != __last1)
2323:/usr/include/c++/8/bits/stl_algo.h **** 	_GLIBCXX_MOVE3(__first1, __last1, __result);
2324:/usr/include/c++/8/bits/stl_algo.h ****     }
2325:/usr/include/c++/8/bits/stl_algo.h **** 
2326:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the __merge_adaptive routines.
2327:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
2328:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BidirectionalIterator3, typename _Compare>
2329:/usr/include/c++/8/bits/stl_algo.h ****     void
2330:/usr/include/c++/8/bits/stl_algo.h ****     __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
2331:/usr/include/c++/8/bits/stl_algo.h **** 				   _BidirectionalIterator1 __last1,
2332:/usr/include/c++/8/bits/stl_algo.h **** 				   _BidirectionalIterator2 __first2,
2333:/usr/include/c++/8/bits/stl_algo.h **** 				   _BidirectionalIterator2 __last2,
2334:/usr/include/c++/8/bits/stl_algo.h **** 				   _BidirectionalIterator3 __result,
2335:/usr/include/c++/8/bits/stl_algo.h **** 				   _Compare __comp)
2336:/usr/include/c++/8/bits/stl_algo.h ****     {
2337:/usr/include/c++/8/bits/stl_algo.h ****       if (__first1 == __last1)
2338:/usr/include/c++/8/bits/stl_algo.h **** 	{
2339:/usr/include/c++/8/bits/stl_algo.h **** 	  _GLIBCXX_MOVE_BACKWARD3(__first2, __last2, __result);
2340:/usr/include/c++/8/bits/stl_algo.h **** 	  return;
2341:/usr/include/c++/8/bits/stl_algo.h **** 	}
2342:/usr/include/c++/8/bits/stl_algo.h ****       else if (__first2 == __last2)
2343:/usr/include/c++/8/bits/stl_algo.h **** 	return;
2344:/usr/include/c++/8/bits/stl_algo.h **** 
2345:/usr/include/c++/8/bits/stl_algo.h ****       --__last1;
2346:/usr/include/c++/8/bits/stl_algo.h ****       --__last2;
2347:/usr/include/c++/8/bits/stl_algo.h ****       while (true)
2348:/usr/include/c++/8/bits/stl_algo.h **** 	{
2349:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__comp(__last2, __last1))
2350:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2351:/usr/include/c++/8/bits/stl_algo.h **** 	      *--__result = _GLIBCXX_MOVE(*__last1);
2352:/usr/include/c++/8/bits/stl_algo.h **** 	      if (__first1 == __last1)
2353:/usr/include/c++/8/bits/stl_algo.h **** 		{
2354:/usr/include/c++/8/bits/stl_algo.h **** 		  _GLIBCXX_MOVE_BACKWARD3(__first2, ++__last2, __result);
2355:/usr/include/c++/8/bits/stl_algo.h **** 		  return;
2356:/usr/include/c++/8/bits/stl_algo.h **** 		}
2357:/usr/include/c++/8/bits/stl_algo.h **** 	      --__last1;
2358:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2359:/usr/include/c++/8/bits/stl_algo.h **** 	  else
2360:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2361:/usr/include/c++/8/bits/stl_algo.h **** 	      *--__result = _GLIBCXX_MOVE(*__last2);
2362:/usr/include/c++/8/bits/stl_algo.h **** 	      if (__first2 == __last2)
2363:/usr/include/c++/8/bits/stl_algo.h **** 		return;
2364:/usr/include/c++/8/bits/stl_algo.h **** 	      --__last2;
2365:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2366:/usr/include/c++/8/bits/stl_algo.h **** 	}
2367:/usr/include/c++/8/bits/stl_algo.h ****     }
2368:/usr/include/c++/8/bits/stl_algo.h **** 
2369:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2370:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
2371:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Distance>
2372:/usr/include/c++/8/bits/stl_algo.h ****     _BidirectionalIterator1
2373:/usr/include/c++/8/bits/stl_algo.h ****     __rotate_adaptive(_BidirectionalIterator1 __first,
2374:/usr/include/c++/8/bits/stl_algo.h **** 		      _BidirectionalIterator1 __middle,
2375:/usr/include/c++/8/bits/stl_algo.h **** 		      _BidirectionalIterator1 __last,
2376:/usr/include/c++/8/bits/stl_algo.h **** 		      _Distance __len1, _Distance __len2,
2377:/usr/include/c++/8/bits/stl_algo.h **** 		      _BidirectionalIterator2 __buffer,
2378:/usr/include/c++/8/bits/stl_algo.h **** 		      _Distance __buffer_size)
2379:/usr/include/c++/8/bits/stl_algo.h ****     {
2380:/usr/include/c++/8/bits/stl_algo.h ****       _BidirectionalIterator2 __buffer_end;
2381:/usr/include/c++/8/bits/stl_algo.h ****       if (__len1 > __len2 && __len2 <= __buffer_size)
2382:/usr/include/c++/8/bits/stl_algo.h **** 	{
2383:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__len2)
2384:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2385:/usr/include/c++/8/bits/stl_algo.h **** 	      __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);
2386:/usr/include/c++/8/bits/stl_algo.h **** 	      _GLIBCXX_MOVE_BACKWARD3(__first, __middle, __last);
2387:/usr/include/c++/8/bits/stl_algo.h **** 	      return _GLIBCXX_MOVE3(__buffer, __buffer_end, __first);
2388:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2389:/usr/include/c++/8/bits/stl_algo.h **** 	  else
2390:/usr/include/c++/8/bits/stl_algo.h **** 	    return __first;
2391:/usr/include/c++/8/bits/stl_algo.h **** 	}
2392:/usr/include/c++/8/bits/stl_algo.h ****       else if (__len1 <= __buffer_size)
2393:/usr/include/c++/8/bits/stl_algo.h **** 	{
2394:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__len1)
2395:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2396:/usr/include/c++/8/bits/stl_algo.h **** 	      __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);
2397:/usr/include/c++/8/bits/stl_algo.h **** 	      _GLIBCXX_MOVE3(__middle, __last, __first);
2398:/usr/include/c++/8/bits/stl_algo.h **** 	      return _GLIBCXX_MOVE_BACKWARD3(__buffer, __buffer_end, __last);
2399:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2400:/usr/include/c++/8/bits/stl_algo.h **** 	  else
2401:/usr/include/c++/8/bits/stl_algo.h **** 	    return __last;
2402:/usr/include/c++/8/bits/stl_algo.h **** 	}
2403:/usr/include/c++/8/bits/stl_algo.h ****       else
2404:/usr/include/c++/8/bits/stl_algo.h **** 	{
2405:/usr/include/c++/8/bits/stl_algo.h **** 	  std::rotate(__first, __middle, __last);
2406:/usr/include/c++/8/bits/stl_algo.h **** 	  std::advance(__first, std::distance(__middle, __last));
2407:/usr/include/c++/8/bits/stl_algo.h **** 	  return __first;
2408:/usr/include/c++/8/bits/stl_algo.h **** 	}
2409:/usr/include/c++/8/bits/stl_algo.h ****     }
2410:/usr/include/c++/8/bits/stl_algo.h **** 
2411:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2412:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Distance, 
2413:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Pointer, typename _Compare>
2414:/usr/include/c++/8/bits/stl_algo.h ****     void
2415:/usr/include/c++/8/bits/stl_algo.h ****     __merge_adaptive(_BidirectionalIterator __first,
2416:/usr/include/c++/8/bits/stl_algo.h **** 		     _BidirectionalIterator __middle,
2417:/usr/include/c++/8/bits/stl_algo.h **** 		     _BidirectionalIterator __last,
2418:/usr/include/c++/8/bits/stl_algo.h **** 		     _Distance __len1, _Distance __len2,
2419:/usr/include/c++/8/bits/stl_algo.h **** 		     _Pointer __buffer, _Distance __buffer_size,
2420:/usr/include/c++/8/bits/stl_algo.h **** 		     _Compare __comp)
2421:/usr/include/c++/8/bits/stl_algo.h ****     {
2422:/usr/include/c++/8/bits/stl_algo.h ****       if (__len1 <= __len2 && __len1 <= __buffer_size)
2423:/usr/include/c++/8/bits/stl_algo.h **** 	{
2424:/usr/include/c++/8/bits/stl_algo.h **** 	  _Pointer __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);
2425:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
2426:/usr/include/c++/8/bits/stl_algo.h **** 				     __first, __comp);
2427:/usr/include/c++/8/bits/stl_algo.h **** 	}
2428:/usr/include/c++/8/bits/stl_algo.h ****       else if (__len2 <= __buffer_size)
2429:/usr/include/c++/8/bits/stl_algo.h **** 	{
2430:/usr/include/c++/8/bits/stl_algo.h **** 	  _Pointer __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);
2431:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__move_merge_adaptive_backward(__first, __middle, __buffer,
2432:/usr/include/c++/8/bits/stl_algo.h **** 					      __buffer_end, __last, __comp);
2433:/usr/include/c++/8/bits/stl_algo.h **** 	}
2434:/usr/include/c++/8/bits/stl_algo.h ****       else
2435:/usr/include/c++/8/bits/stl_algo.h **** 	{
2436:/usr/include/c++/8/bits/stl_algo.h **** 	  _BidirectionalIterator __first_cut = __first;
2437:/usr/include/c++/8/bits/stl_algo.h **** 	  _BidirectionalIterator __second_cut = __middle;
2438:/usr/include/c++/8/bits/stl_algo.h **** 	  _Distance __len11 = 0;
2439:/usr/include/c++/8/bits/stl_algo.h **** 	  _Distance __len22 = 0;
2440:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__len1 > __len2)
2441:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2442:/usr/include/c++/8/bits/stl_algo.h **** 	      __len11 = __len1 / 2;
2443:/usr/include/c++/8/bits/stl_algo.h **** 	      std::advance(__first_cut, __len11);
2444:/usr/include/c++/8/bits/stl_algo.h **** 	      __second_cut
2445:/usr/include/c++/8/bits/stl_algo.h **** 		= std::__lower_bound(__middle, __last, *__first_cut,
2446:/usr/include/c++/8/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__iter_comp_val(__comp));
2447:/usr/include/c++/8/bits/stl_algo.h **** 	      __len22 = std::distance(__middle, __second_cut);
2448:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2449:/usr/include/c++/8/bits/stl_algo.h **** 	  else
2450:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2451:/usr/include/c++/8/bits/stl_algo.h **** 	      __len22 = __len2 / 2;
2452:/usr/include/c++/8/bits/stl_algo.h **** 	      std::advance(__second_cut, __len22);
2453:/usr/include/c++/8/bits/stl_algo.h **** 	      __first_cut
2454:/usr/include/c++/8/bits/stl_algo.h **** 		= std::__upper_bound(__first, __middle, *__second_cut,
2455:/usr/include/c++/8/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__val_comp_iter(__comp));
2456:/usr/include/c++/8/bits/stl_algo.h **** 	      __len11 = std::distance(__first, __first_cut);
2457:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2458:/usr/include/c++/8/bits/stl_algo.h **** 
2459:/usr/include/c++/8/bits/stl_algo.h **** 	  _BidirectionalIterator __new_middle
2460:/usr/include/c++/8/bits/stl_algo.h **** 	    = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
2461:/usr/include/c++/8/bits/stl_algo.h **** 				     __len1 - __len11, __len22, __buffer,
2462:/usr/include/c++/8/bits/stl_algo.h **** 				     __buffer_size);
2463:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
2464:/usr/include/c++/8/bits/stl_algo.h **** 				__len22, __buffer, __buffer_size, __comp);
2465:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__merge_adaptive(__new_middle, __second_cut, __last,
2466:/usr/include/c++/8/bits/stl_algo.h **** 				__len1 - __len11,
2467:/usr/include/c++/8/bits/stl_algo.h **** 				__len2 - __len22, __buffer,
2468:/usr/include/c++/8/bits/stl_algo.h **** 				__buffer_size, __comp);
2469:/usr/include/c++/8/bits/stl_algo.h **** 	}
2470:/usr/include/c++/8/bits/stl_algo.h ****     }
2471:/usr/include/c++/8/bits/stl_algo.h **** 
2472:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2473:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Distance,
2474:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Compare>
2475:/usr/include/c++/8/bits/stl_algo.h ****     void
2476:/usr/include/c++/8/bits/stl_algo.h ****     __merge_without_buffer(_BidirectionalIterator __first,
2477:/usr/include/c++/8/bits/stl_algo.h **** 			   _BidirectionalIterator __middle,
2478:/usr/include/c++/8/bits/stl_algo.h **** 			   _BidirectionalIterator __last,
2479:/usr/include/c++/8/bits/stl_algo.h **** 			   _Distance __len1, _Distance __len2,
2480:/usr/include/c++/8/bits/stl_algo.h **** 			   _Compare __comp)
2481:/usr/include/c++/8/bits/stl_algo.h ****     {
2482:/usr/include/c++/8/bits/stl_algo.h ****       if (__len1 == 0 || __len2 == 0)
2483:/usr/include/c++/8/bits/stl_algo.h **** 	return;
2484:/usr/include/c++/8/bits/stl_algo.h **** 
2485:/usr/include/c++/8/bits/stl_algo.h ****       if (__len1 + __len2 == 2)
2486:/usr/include/c++/8/bits/stl_algo.h **** 	{
2487:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__comp(__middle, __first))
2488:/usr/include/c++/8/bits/stl_algo.h **** 	    std::iter_swap(__first, __middle);
2489:/usr/include/c++/8/bits/stl_algo.h **** 	  return;
2490:/usr/include/c++/8/bits/stl_algo.h **** 	}
2491:/usr/include/c++/8/bits/stl_algo.h **** 
2492:/usr/include/c++/8/bits/stl_algo.h ****       _BidirectionalIterator __first_cut = __first;
2493:/usr/include/c++/8/bits/stl_algo.h ****       _BidirectionalIterator __second_cut = __middle;
2494:/usr/include/c++/8/bits/stl_algo.h ****       _Distance __len11 = 0;
2495:/usr/include/c++/8/bits/stl_algo.h ****       _Distance __len22 = 0;
2496:/usr/include/c++/8/bits/stl_algo.h ****       if (__len1 > __len2)
2497:/usr/include/c++/8/bits/stl_algo.h **** 	{
2498:/usr/include/c++/8/bits/stl_algo.h **** 	  __len11 = __len1 / 2;
2499:/usr/include/c++/8/bits/stl_algo.h **** 	  std::advance(__first_cut, __len11);
2500:/usr/include/c++/8/bits/stl_algo.h **** 	  __second_cut
2501:/usr/include/c++/8/bits/stl_algo.h **** 	    = std::__lower_bound(__middle, __last, *__first_cut,
2502:/usr/include/c++/8/bits/stl_algo.h **** 				 __gnu_cxx::__ops::__iter_comp_val(__comp));
2503:/usr/include/c++/8/bits/stl_algo.h **** 	  __len22 = std::distance(__middle, __second_cut);
2504:/usr/include/c++/8/bits/stl_algo.h **** 	}
2505:/usr/include/c++/8/bits/stl_algo.h ****       else
2506:/usr/include/c++/8/bits/stl_algo.h **** 	{
2507:/usr/include/c++/8/bits/stl_algo.h **** 	  __len22 = __len2 / 2;
2508:/usr/include/c++/8/bits/stl_algo.h **** 	  std::advance(__second_cut, __len22);
2509:/usr/include/c++/8/bits/stl_algo.h **** 	  __first_cut
2510:/usr/include/c++/8/bits/stl_algo.h **** 	    = std::__upper_bound(__first, __middle, *__second_cut,
2511:/usr/include/c++/8/bits/stl_algo.h **** 				 __gnu_cxx::__ops::__val_comp_iter(__comp));
2512:/usr/include/c++/8/bits/stl_algo.h **** 	  __len11 = std::distance(__first, __first_cut);
2513:/usr/include/c++/8/bits/stl_algo.h **** 	}
2514:/usr/include/c++/8/bits/stl_algo.h **** 
2515:/usr/include/c++/8/bits/stl_algo.h ****       std::rotate(__first_cut, __middle, __second_cut);
2516:/usr/include/c++/8/bits/stl_algo.h ****       _BidirectionalIterator __new_middle = __first_cut;
2517:/usr/include/c++/8/bits/stl_algo.h ****       std::advance(__new_middle, std::distance(__middle, __second_cut));
2518:/usr/include/c++/8/bits/stl_algo.h ****       std::__merge_without_buffer(__first, __first_cut, __new_middle,
2519:/usr/include/c++/8/bits/stl_algo.h **** 				  __len11, __len22, __comp);
2520:/usr/include/c++/8/bits/stl_algo.h ****       std::__merge_without_buffer(__new_middle, __second_cut, __last,
2521:/usr/include/c++/8/bits/stl_algo.h **** 				  __len1 - __len11, __len2 - __len22, __comp);
2522:/usr/include/c++/8/bits/stl_algo.h ****     }
2523:/usr/include/c++/8/bits/stl_algo.h **** 
2524:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2525:/usr/include/c++/8/bits/stl_algo.h ****     void
2526:/usr/include/c++/8/bits/stl_algo.h ****     __inplace_merge(_BidirectionalIterator __first,
2527:/usr/include/c++/8/bits/stl_algo.h **** 		    _BidirectionalIterator __middle,
2528:/usr/include/c++/8/bits/stl_algo.h **** 		    _BidirectionalIterator __last,
2529:/usr/include/c++/8/bits/stl_algo.h **** 		    _Compare __comp)
2530:/usr/include/c++/8/bits/stl_algo.h ****     {
2531:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_BidirectionalIterator>::value_type
2532:/usr/include/c++/8/bits/stl_algo.h **** 	  _ValueType;
2533:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_BidirectionalIterator>::difference_type
2534:/usr/include/c++/8/bits/stl_algo.h **** 	  _DistanceType;
2535:/usr/include/c++/8/bits/stl_algo.h **** 
2536:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __middle || __middle == __last)
2537:/usr/include/c++/8/bits/stl_algo.h **** 	return;
2538:/usr/include/c++/8/bits/stl_algo.h **** 
2539:/usr/include/c++/8/bits/stl_algo.h ****       const _DistanceType __len1 = std::distance(__first, __middle);
2540:/usr/include/c++/8/bits/stl_algo.h ****       const _DistanceType __len2 = std::distance(__middle, __last);
2541:/usr/include/c++/8/bits/stl_algo.h **** 
2542:/usr/include/c++/8/bits/stl_algo.h ****       typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
2543:/usr/include/c++/8/bits/stl_algo.h ****       _TmpBuf __buf(__first, __last);
2544:/usr/include/c++/8/bits/stl_algo.h **** 
2545:/usr/include/c++/8/bits/stl_algo.h ****       if (__buf.begin() == 0)
2546:/usr/include/c++/8/bits/stl_algo.h **** 	std::__merge_without_buffer
2547:/usr/include/c++/8/bits/stl_algo.h **** 	  (__first, __middle, __last, __len1, __len2, __comp);
2548:/usr/include/c++/8/bits/stl_algo.h ****       else
2549:/usr/include/c++/8/bits/stl_algo.h **** 	std::__merge_adaptive
2550:/usr/include/c++/8/bits/stl_algo.h **** 	  (__first, __middle, __last, __len1, __len2, __buf.begin(),
2551:/usr/include/c++/8/bits/stl_algo.h **** 	   _DistanceType(__buf.size()), __comp);
2552:/usr/include/c++/8/bits/stl_algo.h ****     }
2553:/usr/include/c++/8/bits/stl_algo.h **** 
2554:/usr/include/c++/8/bits/stl_algo.h ****   /**
2555:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Merges two sorted ranges in place.
2556:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2557:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
2558:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __middle  Another iterator.
2559:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2560:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  Nothing.
2561:/usr/include/c++/8/bits/stl_algo.h ****    *
2562:/usr/include/c++/8/bits/stl_algo.h ****    *  Merges two sorted and consecutive ranges, [__first,__middle) and
2563:/usr/include/c++/8/bits/stl_algo.h ****    *  [__middle,__last), and puts the result in [__first,__last).  The
2564:/usr/include/c++/8/bits/stl_algo.h ****    *  output will be sorted.  The sort is @e stable, that is, for
2565:/usr/include/c++/8/bits/stl_algo.h ****    *  equivalent elements in the two ranges, elements from the first
2566:/usr/include/c++/8/bits/stl_algo.h ****    *  range will always come before elements from the second.
2567:/usr/include/c++/8/bits/stl_algo.h ****    *
2568:/usr/include/c++/8/bits/stl_algo.h ****    *  If enough additional memory is available, this takes (__last-__first)-1
2569:/usr/include/c++/8/bits/stl_algo.h ****    *  comparisons.  Otherwise an NlogN algorithm is used, where N is
2570:/usr/include/c++/8/bits/stl_algo.h ****    *  distance(__first,__last).
2571:/usr/include/c++/8/bits/stl_algo.h ****   */
2572:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
2573:/usr/include/c++/8/bits/stl_algo.h ****     inline void
2574:/usr/include/c++/8/bits/stl_algo.h ****     inplace_merge(_BidirectionalIterator __first,
2575:/usr/include/c++/8/bits/stl_algo.h **** 		  _BidirectionalIterator __middle,
2576:/usr/include/c++/8/bits/stl_algo.h **** 		  _BidirectionalIterator __last)
2577:/usr/include/c++/8/bits/stl_algo.h ****     {
2578:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
2579:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
2580:/usr/include/c++/8/bits/stl_algo.h **** 	    _BidirectionalIterator>)
2581:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
2582:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2583:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_sorted(__first, __middle);
2584:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_sorted(__middle, __last);
2585:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
2586:/usr/include/c++/8/bits/stl_algo.h **** 
2587:/usr/include/c++/8/bits/stl_algo.h ****       std::__inplace_merge(__first, __middle, __last,
2588:/usr/include/c++/8/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_less_iter());
2589:/usr/include/c++/8/bits/stl_algo.h ****     }
2590:/usr/include/c++/8/bits/stl_algo.h **** 
2591:/usr/include/c++/8/bits/stl_algo.h ****   /**
2592:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Merges two sorted ranges in place.
2593:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2594:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
2595:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __middle  Another iterator.
2596:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2597:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2598:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  Nothing.
2599:/usr/include/c++/8/bits/stl_algo.h ****    *
2600:/usr/include/c++/8/bits/stl_algo.h ****    *  Merges two sorted and consecutive ranges, [__first,__middle) and
2601:/usr/include/c++/8/bits/stl_algo.h ****    *  [middle,last), and puts the result in [__first,__last).  The output will
2602:/usr/include/c++/8/bits/stl_algo.h ****    *  be sorted.  The sort is @e stable, that is, for equivalent
2603:/usr/include/c++/8/bits/stl_algo.h ****    *  elements in the two ranges, elements from the first range will always
2604:/usr/include/c++/8/bits/stl_algo.h ****    *  come before elements from the second.
2605:/usr/include/c++/8/bits/stl_algo.h ****    *
2606:/usr/include/c++/8/bits/stl_algo.h ****    *  If enough additional memory is available, this takes (__last-__first)-1
2607:/usr/include/c++/8/bits/stl_algo.h ****    *  comparisons.  Otherwise an NlogN algorithm is used, where N is
2608:/usr/include/c++/8/bits/stl_algo.h ****    *  distance(__first,__last).
2609:/usr/include/c++/8/bits/stl_algo.h ****    *
2610:/usr/include/c++/8/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2611:/usr/include/c++/8/bits/stl_algo.h ****    *  the function used for the initial sort.
2612:/usr/include/c++/8/bits/stl_algo.h ****   */
2613:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2614:/usr/include/c++/8/bits/stl_algo.h ****     inline void
2615:/usr/include/c++/8/bits/stl_algo.h ****     inplace_merge(_BidirectionalIterator __first,
2616:/usr/include/c++/8/bits/stl_algo.h **** 		  _BidirectionalIterator __middle,
2617:/usr/include/c++/8/bits/stl_algo.h **** 		  _BidirectionalIterator __last,
2618:/usr/include/c++/8/bits/stl_algo.h **** 		  _Compare __comp)
2619:/usr/include/c++/8/bits/stl_algo.h ****     {
2620:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
2621:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
2622:/usr/include/c++/8/bits/stl_algo.h **** 	    _BidirectionalIterator>)
2623:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2624:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
2625:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2626:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_sorted_pred(__first, __middle, __comp);
2627:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_sorted_pred(__middle, __last, __comp);
2628:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
2629:/usr/include/c++/8/bits/stl_algo.h **** 
2630:/usr/include/c++/8/bits/stl_algo.h ****       std::__inplace_merge(__first, __middle, __last,
2631:/usr/include/c++/8/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_comp_iter(__comp));
2632:/usr/include/c++/8/bits/stl_algo.h ****     }
2633:/usr/include/c++/8/bits/stl_algo.h **** 
2634:/usr/include/c++/8/bits/stl_algo.h **** 
2635:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the __merge_sort_loop routines.
2636:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
2637:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Compare>
2638:/usr/include/c++/8/bits/stl_algo.h ****     _OutputIterator
2639:/usr/include/c++/8/bits/stl_algo.h ****     __move_merge(_InputIterator __first1, _InputIterator __last1,
2640:/usr/include/c++/8/bits/stl_algo.h **** 		 _InputIterator __first2, _InputIterator __last2,
2641:/usr/include/c++/8/bits/stl_algo.h **** 		 _OutputIterator __result, _Compare __comp)
2642:/usr/include/c++/8/bits/stl_algo.h ****     {
2643:/usr/include/c++/8/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2644:/usr/include/c++/8/bits/stl_algo.h **** 	{
2645:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__comp(__first2, __first1))
2646:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2647:/usr/include/c++/8/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first2);
2648:/usr/include/c++/8/bits/stl_algo.h **** 	      ++__first2;
2649:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2650:/usr/include/c++/8/bits/stl_algo.h **** 	  else
2651:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2652:/usr/include/c++/8/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first1);
2653:/usr/include/c++/8/bits/stl_algo.h **** 	      ++__first1;
2654:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2655:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__result;
2656:/usr/include/c++/8/bits/stl_algo.h **** 	}
2657:/usr/include/c++/8/bits/stl_algo.h ****       return _GLIBCXX_MOVE3(__first2, __last2,
2658:/usr/include/c++/8/bits/stl_algo.h **** 			    _GLIBCXX_MOVE3(__first1, __last1,
2659:/usr/include/c++/8/bits/stl_algo.h **** 					   __result));
2660:/usr/include/c++/8/bits/stl_algo.h ****     }
2661:/usr/include/c++/8/bits/stl_algo.h **** 
2662:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
2663:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Distance, typename _Compare>
2664:/usr/include/c++/8/bits/stl_algo.h ****     void
2665:/usr/include/c++/8/bits/stl_algo.h ****     __merge_sort_loop(_RandomAccessIterator1 __first,
2666:/usr/include/c++/8/bits/stl_algo.h **** 		      _RandomAccessIterator1 __last,
2667:/usr/include/c++/8/bits/stl_algo.h **** 		      _RandomAccessIterator2 __result, _Distance __step_size,
2668:/usr/include/c++/8/bits/stl_algo.h **** 		      _Compare __comp)
2669:/usr/include/c++/8/bits/stl_algo.h ****     {
2670:/usr/include/c++/8/bits/stl_algo.h ****       const _Distance __two_step = 2 * __step_size;
2671:/usr/include/c++/8/bits/stl_algo.h **** 
2672:/usr/include/c++/8/bits/stl_algo.h ****       while (__last - __first >= __two_step)
2673:/usr/include/c++/8/bits/stl_algo.h **** 	{
2674:/usr/include/c++/8/bits/stl_algo.h **** 	  __result = std::__move_merge(__first, __first + __step_size,
2675:/usr/include/c++/8/bits/stl_algo.h **** 				       __first + __step_size,
2676:/usr/include/c++/8/bits/stl_algo.h **** 				       __first + __two_step,
2677:/usr/include/c++/8/bits/stl_algo.h **** 				       __result, __comp);
2678:/usr/include/c++/8/bits/stl_algo.h **** 	  __first += __two_step;
2679:/usr/include/c++/8/bits/stl_algo.h **** 	}
2680:/usr/include/c++/8/bits/stl_algo.h ****       __step_size = std::min(_Distance(__last - __first), __step_size);
2681:/usr/include/c++/8/bits/stl_algo.h **** 
2682:/usr/include/c++/8/bits/stl_algo.h ****       std::__move_merge(__first, __first + __step_size,
2683:/usr/include/c++/8/bits/stl_algo.h **** 			__first + __step_size, __last, __result, __comp);
2684:/usr/include/c++/8/bits/stl_algo.h ****     }
2685:/usr/include/c++/8/bits/stl_algo.h **** 
2686:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Distance,
2687:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Compare>
2688:/usr/include/c++/8/bits/stl_algo.h ****     void
2689:/usr/include/c++/8/bits/stl_algo.h ****     __chunk_insertion_sort(_RandomAccessIterator __first,
2690:/usr/include/c++/8/bits/stl_algo.h **** 			   _RandomAccessIterator __last,
2691:/usr/include/c++/8/bits/stl_algo.h **** 			   _Distance __chunk_size, _Compare __comp)
2692:/usr/include/c++/8/bits/stl_algo.h ****     {
2693:/usr/include/c++/8/bits/stl_algo.h ****       while (__last - __first >= __chunk_size)
2694:/usr/include/c++/8/bits/stl_algo.h **** 	{
2695:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __first + __chunk_size, __comp);
2696:/usr/include/c++/8/bits/stl_algo.h **** 	  __first += __chunk_size;
2697:/usr/include/c++/8/bits/stl_algo.h **** 	}
2698:/usr/include/c++/8/bits/stl_algo.h ****       std::__insertion_sort(__first, __last, __comp);
2699:/usr/include/c++/8/bits/stl_algo.h ****     }
2700:/usr/include/c++/8/bits/stl_algo.h **** 
2701:/usr/include/c++/8/bits/stl_algo.h ****   enum { _S_chunk_size = 7 };
2702:/usr/include/c++/8/bits/stl_algo.h **** 
2703:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
2704:/usr/include/c++/8/bits/stl_algo.h ****     void
2705:/usr/include/c++/8/bits/stl_algo.h ****     __merge_sort_with_buffer(_RandomAccessIterator __first,
2706:/usr/include/c++/8/bits/stl_algo.h **** 			     _RandomAccessIterator __last,
2707:/usr/include/c++/8/bits/stl_algo.h **** 			     _Pointer __buffer, _Compare __comp)
2708:/usr/include/c++/8/bits/stl_algo.h ****     {
2709:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
2710:/usr/include/c++/8/bits/stl_algo.h **** 	_Distance;
2711:/usr/include/c++/8/bits/stl_algo.h **** 
2712:/usr/include/c++/8/bits/stl_algo.h ****       const _Distance __len = __last - __first;
2713:/usr/include/c++/8/bits/stl_algo.h ****       const _Pointer __buffer_last = __buffer + __len;
2714:/usr/include/c++/8/bits/stl_algo.h **** 
2715:/usr/include/c++/8/bits/stl_algo.h ****       _Distance __step_size = _S_chunk_size;
2716:/usr/include/c++/8/bits/stl_algo.h ****       std::__chunk_insertion_sort(__first, __last, __step_size, __comp);
2717:/usr/include/c++/8/bits/stl_algo.h **** 
2718:/usr/include/c++/8/bits/stl_algo.h ****       while (__step_size < __len)
2719:/usr/include/c++/8/bits/stl_algo.h **** 	{
2720:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__merge_sort_loop(__first, __last, __buffer,
2721:/usr/include/c++/8/bits/stl_algo.h **** 				 __step_size, __comp);
2722:/usr/include/c++/8/bits/stl_algo.h **** 	  __step_size *= 2;
2723:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__merge_sort_loop(__buffer, __buffer_last, __first,
2724:/usr/include/c++/8/bits/stl_algo.h **** 				 __step_size, __comp);
2725:/usr/include/c++/8/bits/stl_algo.h **** 	  __step_size *= 2;
2726:/usr/include/c++/8/bits/stl_algo.h **** 	}
2727:/usr/include/c++/8/bits/stl_algo.h ****     }
2728:/usr/include/c++/8/bits/stl_algo.h **** 
2729:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Pointer,
2730:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Distance, typename _Compare>
2731:/usr/include/c++/8/bits/stl_algo.h ****     void
2732:/usr/include/c++/8/bits/stl_algo.h ****     __stable_sort_adaptive(_RandomAccessIterator __first,
2733:/usr/include/c++/8/bits/stl_algo.h **** 			   _RandomAccessIterator __last,
2734:/usr/include/c++/8/bits/stl_algo.h **** 			   _Pointer __buffer, _Distance __buffer_size,
2735:/usr/include/c++/8/bits/stl_algo.h **** 			   _Compare __comp)
2736:/usr/include/c++/8/bits/stl_algo.h ****     {
2737:/usr/include/c++/8/bits/stl_algo.h ****       const _Distance __len = (__last - __first + 1) / 2;
2738:/usr/include/c++/8/bits/stl_algo.h ****       const _RandomAccessIterator __middle = __first + __len;
2739:/usr/include/c++/8/bits/stl_algo.h ****       if (__len > __buffer_size)
2740:/usr/include/c++/8/bits/stl_algo.h **** 	{
2741:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__stable_sort_adaptive(__first, __middle, __buffer,
2742:/usr/include/c++/8/bits/stl_algo.h **** 				      __buffer_size, __comp);
2743:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__stable_sort_adaptive(__middle, __last, __buffer,
2744:/usr/include/c++/8/bits/stl_algo.h **** 				      __buffer_size, __comp);
2745:/usr/include/c++/8/bits/stl_algo.h **** 	}
2746:/usr/include/c++/8/bits/stl_algo.h ****       else
2747:/usr/include/c++/8/bits/stl_algo.h **** 	{
2748:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
2749:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
2750:/usr/include/c++/8/bits/stl_algo.h **** 	}
2751:/usr/include/c++/8/bits/stl_algo.h ****       std::__merge_adaptive(__first, __middle, __last,
2752:/usr/include/c++/8/bits/stl_algo.h **** 			    _Distance(__middle - __first),
2753:/usr/include/c++/8/bits/stl_algo.h **** 			    _Distance(__last - __middle),
2754:/usr/include/c++/8/bits/stl_algo.h **** 			    __buffer, __buffer_size,
2755:/usr/include/c++/8/bits/stl_algo.h **** 			    __comp);
2756:/usr/include/c++/8/bits/stl_algo.h ****     }
2757:/usr/include/c++/8/bits/stl_algo.h **** 
2758:/usr/include/c++/8/bits/stl_algo.h ****   /// This is a helper function for the stable sorting routines.
2759:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
2760:/usr/include/c++/8/bits/stl_algo.h ****     void
2761:/usr/include/c++/8/bits/stl_algo.h ****     __inplace_stable_sort(_RandomAccessIterator __first,
2762:/usr/include/c++/8/bits/stl_algo.h **** 			  _RandomAccessIterator __last, _Compare __comp)
2763:/usr/include/c++/8/bits/stl_algo.h ****     {
2764:/usr/include/c++/8/bits/stl_algo.h ****       if (__last - __first < 15)
2765:/usr/include/c++/8/bits/stl_algo.h **** 	{
2766:/usr/include/c++/8/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __last, __comp);
2767:/usr/include/c++/8/bits/stl_algo.h **** 	  return;
2768:/usr/include/c++/8/bits/stl_algo.h **** 	}
2769:/usr/include/c++/8/bits/stl_algo.h ****       _RandomAccessIterator __middle = __first + (__last - __first) / 2;
2770:/usr/include/c++/8/bits/stl_algo.h ****       std::__inplace_stable_sort(__first, __middle, __comp);
2771:/usr/include/c++/8/bits/stl_algo.h ****       std::__inplace_stable_sort(__middle, __last, __comp);
2772:/usr/include/c++/8/bits/stl_algo.h ****       std::__merge_without_buffer(__first, __middle, __last,
2773:/usr/include/c++/8/bits/stl_algo.h **** 				  __middle - __first,
2774:/usr/include/c++/8/bits/stl_algo.h **** 				  __last - __middle,
2775:/usr/include/c++/8/bits/stl_algo.h **** 				  __comp);
2776:/usr/include/c++/8/bits/stl_algo.h ****     }
2777:/usr/include/c++/8/bits/stl_algo.h **** 
2778:/usr/include/c++/8/bits/stl_algo.h ****   // stable_sort
2779:/usr/include/c++/8/bits/stl_algo.h **** 
2780:/usr/include/c++/8/bits/stl_algo.h ****   // Set algorithms: includes, set_union, set_intersection, set_difference,
2781:/usr/include/c++/8/bits/stl_algo.h ****   // set_symmetric_difference.  All of these algorithms have the precondition
2782:/usr/include/c++/8/bits/stl_algo.h ****   // that their input ranges are sorted and the postcondition that their output
2783:/usr/include/c++/8/bits/stl_algo.h ****   // ranges are sorted.
2784:/usr/include/c++/8/bits/stl_algo.h **** 
2785:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2786:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Compare>
2787:/usr/include/c++/8/bits/stl_algo.h ****     bool
2788:/usr/include/c++/8/bits/stl_algo.h ****     __includes(_InputIterator1 __first1, _InputIterator1 __last1,
2789:/usr/include/c++/8/bits/stl_algo.h **** 	       _InputIterator2 __first2, _InputIterator2 __last2,
2790:/usr/include/c++/8/bits/stl_algo.h **** 	       _Compare __comp)
2791:/usr/include/c++/8/bits/stl_algo.h ****     {
2792:/usr/include/c++/8/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2793:/usr/include/c++/8/bits/stl_algo.h **** 	if (__comp(__first2, __first1))
2794:/usr/include/c++/8/bits/stl_algo.h **** 	  return false;
2795:/usr/include/c++/8/bits/stl_algo.h **** 	else if (__comp(__first1, __first2))
2796:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first1;
2797:/usr/include/c++/8/bits/stl_algo.h **** 	else
2798:/usr/include/c++/8/bits/stl_algo.h **** 	  {
2799:/usr/include/c++/8/bits/stl_algo.h **** 	    ++__first1;
2800:/usr/include/c++/8/bits/stl_algo.h **** 	    ++__first2;
2801:/usr/include/c++/8/bits/stl_algo.h **** 	  }
2802:/usr/include/c++/8/bits/stl_algo.h **** 
2803:/usr/include/c++/8/bits/stl_algo.h ****       return __first2 == __last2;
2804:/usr/include/c++/8/bits/stl_algo.h ****     }
2805:/usr/include/c++/8/bits/stl_algo.h **** 
2806:/usr/include/c++/8/bits/stl_algo.h ****   /**
2807:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Determines whether all elements of a sequence exists in a range.
2808:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first1  Start of search range.
2809:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last1   End of search range.
2810:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first2  Start of sequence
2811:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last2   End of sequence.
2812:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  True if each element in [__first2,__last2) is contained in order
2813:/usr/include/c++/8/bits/stl_algo.h ****    *  within [__first1,__last1).  False otherwise.
2814:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup set_algorithms
2815:/usr/include/c++/8/bits/stl_algo.h ****    *
2816:/usr/include/c++/8/bits/stl_algo.h ****    *  This operation expects both [__first1,__last1) and
2817:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first2,__last2) to be sorted.  Searches for the presence of
2818:/usr/include/c++/8/bits/stl_algo.h ****    *  each element in [__first2,__last2) within [__first1,__last1).
2819:/usr/include/c++/8/bits/stl_algo.h ****    *  The iterators over each range only move forward, so this is a
2820:/usr/include/c++/8/bits/stl_algo.h ****    *  linear algorithm.  If an element in [__first2,__last2) is not
2821:/usr/include/c++/8/bits/stl_algo.h ****    *  found before the search iterator reaches @p __last2, false is
2822:/usr/include/c++/8/bits/stl_algo.h ****    *  returned.
2823:/usr/include/c++/8/bits/stl_algo.h ****   */
2824:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2>
2825:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
2826:/usr/include/c++/8/bits/stl_algo.h ****     includes(_InputIterator1 __first1, _InputIterator1 __last1,
2827:/usr/include/c++/8/bits/stl_algo.h **** 	     _InputIterator2 __first2, _InputIterator2 __last2)
2828:/usr/include/c++/8/bits/stl_algo.h ****     {
2829:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
2830:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
2831:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
2832:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2833:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type,
2834:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type>)
2835:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2836:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type,
2837:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type>)
2838:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_sorted_set(__first1, __last1, __first2);
2839:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_sorted_set(__first2, __last2, __first1);
2840:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive2(__first1, __last1);
2841:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive2(__first2, __last2);
2842:/usr/include/c++/8/bits/stl_algo.h **** 
2843:/usr/include/c++/8/bits/stl_algo.h ****       return std::__includes(__first1, __last1, __first2, __last2,
2844:/usr/include/c++/8/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_less_iter());
2845:/usr/include/c++/8/bits/stl_algo.h ****     }
2846:/usr/include/c++/8/bits/stl_algo.h **** 
2847:/usr/include/c++/8/bits/stl_algo.h ****   /**
2848:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Determines whether all elements of a sequence exists in a range
2849:/usr/include/c++/8/bits/stl_algo.h ****    *  using comparison.
2850:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup set_algorithms
2851:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first1  Start of search range.
2852:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last1   End of search range.
2853:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first2  Start of sequence
2854:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last2   End of sequence.
2855:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp    Comparison function to use.
2856:/usr/include/c++/8/bits/stl_algo.h ****    *  @return True if each element in [__first2,__last2) is contained
2857:/usr/include/c++/8/bits/stl_algo.h ****    *  in order within [__first1,__last1) according to comp.  False
2858:/usr/include/c++/8/bits/stl_algo.h ****    *  otherwise.  @ingroup set_algorithms
2859:/usr/include/c++/8/bits/stl_algo.h ****    *
2860:/usr/include/c++/8/bits/stl_algo.h ****    *  This operation expects both [__first1,__last1) and
2861:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first2,__last2) to be sorted.  Searches for the presence of
2862:/usr/include/c++/8/bits/stl_algo.h ****    *  each element in [__first2,__last2) within [__first1,__last1),
2863:/usr/include/c++/8/bits/stl_algo.h ****    *  using comp to decide.  The iterators over each range only move
2864:/usr/include/c++/8/bits/stl_algo.h ****    *  forward, so this is a linear algorithm.  If an element in
2865:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first2,__last2) is not found before the search iterator
2866:/usr/include/c++/8/bits/stl_algo.h ****    *  reaches @p __last2, false is returned.
2867:/usr/include/c++/8/bits/stl_algo.h ****   */
2868:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2869:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Compare>
2870:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
2871:/usr/include/c++/8/bits/stl_algo.h ****     includes(_InputIterator1 __first1, _InputIterator1 __last1,
2872:/usr/include/c++/8/bits/stl_algo.h **** 	     _InputIterator2 __first2, _InputIterator2 __last2,
2873:/usr/include/c++/8/bits/stl_algo.h **** 	     _Compare __comp)
2874:/usr/include/c++/8/bits/stl_algo.h ****     {
2875:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
2876:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
2877:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
2878:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2879:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type,
2880:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type>)
2881:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2882:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type,
2883:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type>)
2884:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);
2885:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);
2886:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);
2887:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);
2888:/usr/include/c++/8/bits/stl_algo.h **** 
2889:/usr/include/c++/8/bits/stl_algo.h ****       return std::__includes(__first1, __last1, __first2, __last2,
2890:/usr/include/c++/8/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_iter(__comp));
2891:/usr/include/c++/8/bits/stl_algo.h ****     }
2892:/usr/include/c++/8/bits/stl_algo.h **** 
2893:/usr/include/c++/8/bits/stl_algo.h ****   // nth_element
2894:/usr/include/c++/8/bits/stl_algo.h ****   // merge
2895:/usr/include/c++/8/bits/stl_algo.h ****   // set_difference
2896:/usr/include/c++/8/bits/stl_algo.h ****   // set_intersection
2897:/usr/include/c++/8/bits/stl_algo.h ****   // set_union
2898:/usr/include/c++/8/bits/stl_algo.h ****   // stable_sort
2899:/usr/include/c++/8/bits/stl_algo.h ****   // set_symmetric_difference
2900:/usr/include/c++/8/bits/stl_algo.h ****   // min_element
2901:/usr/include/c++/8/bits/stl_algo.h ****   // max_element
2902:/usr/include/c++/8/bits/stl_algo.h **** 
2903:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2904:/usr/include/c++/8/bits/stl_algo.h ****     bool
2905:/usr/include/c++/8/bits/stl_algo.h ****     __next_permutation(_BidirectionalIterator __first,
2906:/usr/include/c++/8/bits/stl_algo.h **** 		       _BidirectionalIterator __last, _Compare __comp)
2907:/usr/include/c++/8/bits/stl_algo.h ****     {
2908:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __last)
2909:/usr/include/c++/8/bits/stl_algo.h **** 	return false;
2910:/usr/include/c++/8/bits/stl_algo.h ****       _BidirectionalIterator __i = __first;
2911:/usr/include/c++/8/bits/stl_algo.h ****       ++__i;
2912:/usr/include/c++/8/bits/stl_algo.h ****       if (__i == __last)
2913:/usr/include/c++/8/bits/stl_algo.h **** 	return false;
2914:/usr/include/c++/8/bits/stl_algo.h ****       __i = __last;
2915:/usr/include/c++/8/bits/stl_algo.h ****       --__i;
2916:/usr/include/c++/8/bits/stl_algo.h **** 
2917:/usr/include/c++/8/bits/stl_algo.h ****       for(;;)
2918:/usr/include/c++/8/bits/stl_algo.h **** 	{
2919:/usr/include/c++/8/bits/stl_algo.h **** 	  _BidirectionalIterator __ii = __i;
2920:/usr/include/c++/8/bits/stl_algo.h **** 	  --__i;
2921:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__comp(__i, __ii))
2922:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2923:/usr/include/c++/8/bits/stl_algo.h **** 	      _BidirectionalIterator __j = __last;
2924:/usr/include/c++/8/bits/stl_algo.h **** 	      while (!__comp(__i, --__j))
2925:/usr/include/c++/8/bits/stl_algo.h **** 		{}
2926:/usr/include/c++/8/bits/stl_algo.h **** 	      std::iter_swap(__i, __j);
2927:/usr/include/c++/8/bits/stl_algo.h **** 	      std::__reverse(__ii, __last,
2928:/usr/include/c++/8/bits/stl_algo.h **** 			     std::__iterator_category(__first));
2929:/usr/include/c++/8/bits/stl_algo.h **** 	      return true;
2930:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2931:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__i == __first)
2932:/usr/include/c++/8/bits/stl_algo.h **** 	    {
2933:/usr/include/c++/8/bits/stl_algo.h **** 	      std::__reverse(__first, __last,
2934:/usr/include/c++/8/bits/stl_algo.h **** 			     std::__iterator_category(__first));
2935:/usr/include/c++/8/bits/stl_algo.h **** 	      return false;
2936:/usr/include/c++/8/bits/stl_algo.h **** 	    }
2937:/usr/include/c++/8/bits/stl_algo.h **** 	}
2938:/usr/include/c++/8/bits/stl_algo.h ****     }
2939:/usr/include/c++/8/bits/stl_algo.h **** 
2940:/usr/include/c++/8/bits/stl_algo.h ****   /**
2941:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Permute range into the next @e dictionary ordering.
2942:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2943:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  Start of range.
2944:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   End of range.
2945:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  False if wrapped to first permutation, true otherwise.
2946:/usr/include/c++/8/bits/stl_algo.h ****    *
2947:/usr/include/c++/8/bits/stl_algo.h ****    *  Treats all permutations of the range as a set of @e dictionary sorted
2948:/usr/include/c++/8/bits/stl_algo.h ****    *  sequences.  Permutes the current sequence into the next one of this set.
2949:/usr/include/c++/8/bits/stl_algo.h ****    *  Returns true if there are more sequences to generate.  If the sequence
2950:/usr/include/c++/8/bits/stl_algo.h ****    *  is the largest of the set, the smallest is generated and false returned.
2951:/usr/include/c++/8/bits/stl_algo.h ****   */
2952:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
2953:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
2954:/usr/include/c++/8/bits/stl_algo.h ****     next_permutation(_BidirectionalIterator __first,
2955:/usr/include/c++/8/bits/stl_algo.h **** 		     _BidirectionalIterator __last)
2956:/usr/include/c++/8/bits/stl_algo.h ****     {
2957:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
2958:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
2959:/usr/include/c++/8/bits/stl_algo.h **** 				  _BidirectionalIterator>)
2960:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
2961:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2962:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
2963:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
2964:/usr/include/c++/8/bits/stl_algo.h **** 
2965:/usr/include/c++/8/bits/stl_algo.h ****       return std::__next_permutation
2966:/usr/include/c++/8/bits/stl_algo.h **** 	(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
2967:/usr/include/c++/8/bits/stl_algo.h ****     }
2968:/usr/include/c++/8/bits/stl_algo.h **** 
2969:/usr/include/c++/8/bits/stl_algo.h ****   /**
2970:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Permute range into the next @e dictionary ordering using
2971:/usr/include/c++/8/bits/stl_algo.h ****    *          comparison functor.
2972:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2973:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  Start of range.
2974:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   End of range.
2975:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp   A comparison functor.
2976:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  False if wrapped to first permutation, true otherwise.
2977:/usr/include/c++/8/bits/stl_algo.h ****    *
2978:/usr/include/c++/8/bits/stl_algo.h ****    *  Treats all permutations of the range [__first,__last) as a set of
2979:/usr/include/c++/8/bits/stl_algo.h ****    *  @e dictionary sorted sequences ordered by @p __comp.  Permutes the current
2980:/usr/include/c++/8/bits/stl_algo.h ****    *  sequence into the next one of this set.  Returns true if there are more
2981:/usr/include/c++/8/bits/stl_algo.h ****    *  sequences to generate.  If the sequence is the largest of the set, the
2982:/usr/include/c++/8/bits/stl_algo.h ****    *  smallest is generated and false returned.
2983:/usr/include/c++/8/bits/stl_algo.h ****   */
2984:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2985:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
2986:/usr/include/c++/8/bits/stl_algo.h ****     next_permutation(_BidirectionalIterator __first,
2987:/usr/include/c++/8/bits/stl_algo.h **** 		     _BidirectionalIterator __last, _Compare __comp)
2988:/usr/include/c++/8/bits/stl_algo.h ****     {
2989:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
2990:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
2991:/usr/include/c++/8/bits/stl_algo.h **** 				  _BidirectionalIterator>)
2992:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2993:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
2994:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2995:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
2996:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
2997:/usr/include/c++/8/bits/stl_algo.h **** 
2998:/usr/include/c++/8/bits/stl_algo.h ****       return std::__next_permutation
2999:/usr/include/c++/8/bits/stl_algo.h **** 	(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
3000:/usr/include/c++/8/bits/stl_algo.h ****     }
3001:/usr/include/c++/8/bits/stl_algo.h **** 
3002:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
3003:/usr/include/c++/8/bits/stl_algo.h ****     bool
3004:/usr/include/c++/8/bits/stl_algo.h ****     __prev_permutation(_BidirectionalIterator __first,
3005:/usr/include/c++/8/bits/stl_algo.h **** 		       _BidirectionalIterator __last, _Compare __comp)
3006:/usr/include/c++/8/bits/stl_algo.h ****     {
3007:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __last)
3008:/usr/include/c++/8/bits/stl_algo.h **** 	return false;
3009:/usr/include/c++/8/bits/stl_algo.h ****       _BidirectionalIterator __i = __first;
3010:/usr/include/c++/8/bits/stl_algo.h ****       ++__i;
3011:/usr/include/c++/8/bits/stl_algo.h ****       if (__i == __last)
3012:/usr/include/c++/8/bits/stl_algo.h **** 	return false;
3013:/usr/include/c++/8/bits/stl_algo.h ****       __i = __last;
3014:/usr/include/c++/8/bits/stl_algo.h ****       --__i;
3015:/usr/include/c++/8/bits/stl_algo.h **** 
3016:/usr/include/c++/8/bits/stl_algo.h ****       for(;;)
3017:/usr/include/c++/8/bits/stl_algo.h **** 	{
3018:/usr/include/c++/8/bits/stl_algo.h **** 	  _BidirectionalIterator __ii = __i;
3019:/usr/include/c++/8/bits/stl_algo.h **** 	  --__i;
3020:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__comp(__ii, __i))
3021:/usr/include/c++/8/bits/stl_algo.h **** 	    {
3022:/usr/include/c++/8/bits/stl_algo.h **** 	      _BidirectionalIterator __j = __last;
3023:/usr/include/c++/8/bits/stl_algo.h **** 	      while (!__comp(--__j, __i))
3024:/usr/include/c++/8/bits/stl_algo.h **** 		{}
3025:/usr/include/c++/8/bits/stl_algo.h **** 	      std::iter_swap(__i, __j);
3026:/usr/include/c++/8/bits/stl_algo.h **** 	      std::__reverse(__ii, __last,
3027:/usr/include/c++/8/bits/stl_algo.h **** 			     std::__iterator_category(__first));
3028:/usr/include/c++/8/bits/stl_algo.h **** 	      return true;
3029:/usr/include/c++/8/bits/stl_algo.h **** 	    }
3030:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__i == __first)
3031:/usr/include/c++/8/bits/stl_algo.h **** 	    {
3032:/usr/include/c++/8/bits/stl_algo.h **** 	      std::__reverse(__first, __last,
3033:/usr/include/c++/8/bits/stl_algo.h **** 			     std::__iterator_category(__first));
3034:/usr/include/c++/8/bits/stl_algo.h **** 	      return false;
3035:/usr/include/c++/8/bits/stl_algo.h **** 	    }
3036:/usr/include/c++/8/bits/stl_algo.h **** 	}
3037:/usr/include/c++/8/bits/stl_algo.h ****     }
3038:/usr/include/c++/8/bits/stl_algo.h **** 
3039:/usr/include/c++/8/bits/stl_algo.h ****   /**
3040:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Permute range into the previous @e dictionary ordering.
3041:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3042:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  Start of range.
3043:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   End of range.
3044:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  False if wrapped to last permutation, true otherwise.
3045:/usr/include/c++/8/bits/stl_algo.h ****    *
3046:/usr/include/c++/8/bits/stl_algo.h ****    *  Treats all permutations of the range as a set of @e dictionary sorted
3047:/usr/include/c++/8/bits/stl_algo.h ****    *  sequences.  Permutes the current sequence into the previous one of this
3048:/usr/include/c++/8/bits/stl_algo.h ****    *  set.  Returns true if there are more sequences to generate.  If the
3049:/usr/include/c++/8/bits/stl_algo.h ****    *  sequence is the smallest of the set, the largest is generated and false
3050:/usr/include/c++/8/bits/stl_algo.h ****    *  returned.
3051:/usr/include/c++/8/bits/stl_algo.h ****   */
3052:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
3053:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
3054:/usr/include/c++/8/bits/stl_algo.h ****     prev_permutation(_BidirectionalIterator __first,
3055:/usr/include/c++/8/bits/stl_algo.h **** 		     _BidirectionalIterator __last)
3056:/usr/include/c++/8/bits/stl_algo.h ****     {
3057:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3058:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
3059:/usr/include/c++/8/bits/stl_algo.h **** 				  _BidirectionalIterator>)
3060:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3061:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
3062:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3063:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3064:/usr/include/c++/8/bits/stl_algo.h **** 
3065:/usr/include/c++/8/bits/stl_algo.h ****       return std::__prev_permutation(__first, __last,
3066:/usr/include/c++/8/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__iter_less_iter());
3067:/usr/include/c++/8/bits/stl_algo.h ****     }
3068:/usr/include/c++/8/bits/stl_algo.h **** 
3069:/usr/include/c++/8/bits/stl_algo.h ****   /**
3070:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Permute range into the previous @e dictionary ordering using
3071:/usr/include/c++/8/bits/stl_algo.h ****    *          comparison functor.
3072:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3073:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  Start of range.
3074:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   End of range.
3075:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp   A comparison functor.
3076:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  False if wrapped to last permutation, true otherwise.
3077:/usr/include/c++/8/bits/stl_algo.h ****    *
3078:/usr/include/c++/8/bits/stl_algo.h ****    *  Treats all permutations of the range [__first,__last) as a set of
3079:/usr/include/c++/8/bits/stl_algo.h ****    *  @e dictionary sorted sequences ordered by @p __comp.  Permutes the current
3080:/usr/include/c++/8/bits/stl_algo.h ****    *  sequence into the previous one of this set.  Returns true if there are
3081:/usr/include/c++/8/bits/stl_algo.h ****    *  more sequences to generate.  If the sequence is the smallest of the set,
3082:/usr/include/c++/8/bits/stl_algo.h ****    *  the largest is generated and false returned.
3083:/usr/include/c++/8/bits/stl_algo.h ****   */
3084:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
3085:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
3086:/usr/include/c++/8/bits/stl_algo.h ****     prev_permutation(_BidirectionalIterator __first,
3087:/usr/include/c++/8/bits/stl_algo.h **** 		     _BidirectionalIterator __last, _Compare __comp)
3088:/usr/include/c++/8/bits/stl_algo.h ****     {
3089:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3090:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
3091:/usr/include/c++/8/bits/stl_algo.h **** 				  _BidirectionalIterator>)
3092:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3093:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
3094:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
3095:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3096:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3097:/usr/include/c++/8/bits/stl_algo.h **** 
3098:/usr/include/c++/8/bits/stl_algo.h ****       return std::__prev_permutation(__first, __last,
3099:/usr/include/c++/8/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_iter(__comp));
3100:/usr/include/c++/8/bits/stl_algo.h ****     }
3101:/usr/include/c++/8/bits/stl_algo.h **** 
3102:/usr/include/c++/8/bits/stl_algo.h ****   // replace
3103:/usr/include/c++/8/bits/stl_algo.h ****   // replace_if
3104:/usr/include/c++/8/bits/stl_algo.h **** 
3105:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
3106:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Predicate, typename _Tp>
3107:/usr/include/c++/8/bits/stl_algo.h ****     _OutputIterator
3108:/usr/include/c++/8/bits/stl_algo.h ****     __replace_copy_if(_InputIterator __first, _InputIterator __last,
3109:/usr/include/c++/8/bits/stl_algo.h **** 		      _OutputIterator __result,
3110:/usr/include/c++/8/bits/stl_algo.h **** 		      _Predicate __pred, const _Tp& __new_value)
3111:/usr/include/c++/8/bits/stl_algo.h ****     {
3112:/usr/include/c++/8/bits/stl_algo.h ****       for (; __first != __last; ++__first, (void)++__result)
3113:/usr/include/c++/8/bits/stl_algo.h **** 	if (__pred(__first))
3114:/usr/include/c++/8/bits/stl_algo.h **** 	  *__result = __new_value;
3115:/usr/include/c++/8/bits/stl_algo.h **** 	else
3116:/usr/include/c++/8/bits/stl_algo.h **** 	  *__result = *__first;
3117:/usr/include/c++/8/bits/stl_algo.h ****       return __result;
3118:/usr/include/c++/8/bits/stl_algo.h ****     }
3119:/usr/include/c++/8/bits/stl_algo.h **** 
3120:/usr/include/c++/8/bits/stl_algo.h ****   /**
3121:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Copy a sequence, replacing each element of one value with another
3122:/usr/include/c++/8/bits/stl_algo.h ****    *         value.
3123:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first      An input iterator.
3124:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last       An input iterator.
3125:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __result     An output iterator.
3126:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __old_value  The value to be replaced.
3127:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __new_value  The replacement value.
3128:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   The end of the output sequence, @p result+(last-first).
3129:/usr/include/c++/8/bits/stl_algo.h ****    *
3130:/usr/include/c++/8/bits/stl_algo.h ****    *  Copies each element in the input range @p [__first,__last) to the
3131:/usr/include/c++/8/bits/stl_algo.h ****    *  output range @p [__result,__result+(__last-__first)) replacing elements
3132:/usr/include/c++/8/bits/stl_algo.h ****    *  equal to @p __old_value with @p __new_value.
3133:/usr/include/c++/8/bits/stl_algo.h ****   */
3134:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator, typename _Tp>
3135:/usr/include/c++/8/bits/stl_algo.h ****     inline _OutputIterator
3136:/usr/include/c++/8/bits/stl_algo.h ****     replace_copy(_InputIterator __first, _InputIterator __last,
3137:/usr/include/c++/8/bits/stl_algo.h **** 		 _OutputIterator __result,
3138:/usr/include/c++/8/bits/stl_algo.h **** 		 const _Tp& __old_value, const _Tp& __new_value)
3139:/usr/include/c++/8/bits/stl_algo.h ****     {
3140:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3141:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3142:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
3143:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3144:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
3145:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
3146:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3147:/usr/include/c++/8/bits/stl_algo.h **** 
3148:/usr/include/c++/8/bits/stl_algo.h ****       return std::__replace_copy_if(__first, __last, __result,
3149:/usr/include/c++/8/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_equals_val(__old_value),
3150:/usr/include/c++/8/bits/stl_algo.h **** 					      __new_value);
3151:/usr/include/c++/8/bits/stl_algo.h ****     }
3152:/usr/include/c++/8/bits/stl_algo.h **** 
3153:/usr/include/c++/8/bits/stl_algo.h ****   /**
3154:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Copy a sequence, replacing each value for which a predicate
3155:/usr/include/c++/8/bits/stl_algo.h ****    *         returns true with another value.
3156:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
3157:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first      An input iterator.
3158:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last       An input iterator.
3159:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __result     An output iterator.
3160:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred       A predicate.
3161:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __new_value  The replacement value.
3162:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   The end of the output sequence, @p __result+(__last-__first).
3163:/usr/include/c++/8/bits/stl_algo.h ****    *
3164:/usr/include/c++/8/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) to the range
3165:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__result,__result+(__last-__first)) replacing elements for which
3166:/usr/include/c++/8/bits/stl_algo.h ****    *  @p __pred returns true with @p __new_value.
3167:/usr/include/c++/8/bits/stl_algo.h ****   */
3168:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
3169:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _Predicate, typename _Tp>
3170:/usr/include/c++/8/bits/stl_algo.h ****     inline _OutputIterator
3171:/usr/include/c++/8/bits/stl_algo.h ****     replace_copy_if(_InputIterator __first, _InputIterator __last,
3172:/usr/include/c++/8/bits/stl_algo.h **** 		    _OutputIterator __result,
3173:/usr/include/c++/8/bits/stl_algo.h **** 		    _Predicate __pred, const _Tp& __new_value)
3174:/usr/include/c++/8/bits/stl_algo.h ****     {
3175:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3176:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3177:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
3178:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3179:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
3180:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3181:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3182:/usr/include/c++/8/bits/stl_algo.h **** 
3183:/usr/include/c++/8/bits/stl_algo.h ****       return std::__replace_copy_if(__first, __last, __result,
3184:/usr/include/c++/8/bits/stl_algo.h **** 				__gnu_cxx::__ops::__pred_iter(__pred),
3185:/usr/include/c++/8/bits/stl_algo.h **** 					      __new_value);
3186:/usr/include/c++/8/bits/stl_algo.h ****     }
3187:/usr/include/c++/8/bits/stl_algo.h **** 
3188:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
3189:/usr/include/c++/8/bits/stl_algo.h ****     typename iterator_traits<_InputIterator>::difference_type
3190:/usr/include/c++/8/bits/stl_algo.h ****     __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
3191:/usr/include/c++/8/bits/stl_algo.h ****     {
3192:/usr/include/c++/8/bits/stl_algo.h ****       typename iterator_traits<_InputIterator>::difference_type __n = 0;
3193:/usr/include/c++/8/bits/stl_algo.h ****       for (; __first != __last; ++__first)
3194:/usr/include/c++/8/bits/stl_algo.h **** 	if (__pred(__first))
3195:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__n;
3196:/usr/include/c++/8/bits/stl_algo.h ****       return __n;
3197:/usr/include/c++/8/bits/stl_algo.h ****     }
3198:/usr/include/c++/8/bits/stl_algo.h **** 
3199:/usr/include/c++/8/bits/stl_algo.h **** #if __cplusplus >= 201103L
3200:/usr/include/c++/8/bits/stl_algo.h ****   /**
3201:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Determines whether the elements of a sequence are sorted.
3202:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3203:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
3204:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3205:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  True if the elements are sorted, false otherwise.
3206:/usr/include/c++/8/bits/stl_algo.h ****   */
3207:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator>
3208:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
3209:/usr/include/c++/8/bits/stl_algo.h ****     is_sorted(_ForwardIterator __first, _ForwardIterator __last)
3210:/usr/include/c++/8/bits/stl_algo.h ****     { return std::is_sorted_until(__first, __last) == __last; }
3211:/usr/include/c++/8/bits/stl_algo.h **** 
3212:/usr/include/c++/8/bits/stl_algo.h ****   /**
3213:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Determines whether the elements of a sequence are sorted
3214:/usr/include/c++/8/bits/stl_algo.h ****    *          according to a comparison functor.
3215:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3216:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
3217:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3218:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
3219:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  True if the elements are sorted, false otherwise.
3220:/usr/include/c++/8/bits/stl_algo.h ****   */
3221:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3222:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
3223:/usr/include/c++/8/bits/stl_algo.h ****     is_sorted(_ForwardIterator __first, _ForwardIterator __last,
3224:/usr/include/c++/8/bits/stl_algo.h **** 	      _Compare __comp)
3225:/usr/include/c++/8/bits/stl_algo.h ****     { return std::is_sorted_until(__first, __last, __comp) == __last; }
3226:/usr/include/c++/8/bits/stl_algo.h **** 
3227:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3228:/usr/include/c++/8/bits/stl_algo.h ****     _ForwardIterator
3229:/usr/include/c++/8/bits/stl_algo.h ****     __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
3230:/usr/include/c++/8/bits/stl_algo.h **** 		      _Compare __comp)
3231:/usr/include/c++/8/bits/stl_algo.h ****     {
3232:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __last)
3233:/usr/include/c++/8/bits/stl_algo.h **** 	return __last;
3234:/usr/include/c++/8/bits/stl_algo.h **** 
3235:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __next = __first;
3236:/usr/include/c++/8/bits/stl_algo.h ****       for (++__next; __next != __last; __first = __next, (void)++__next)
3237:/usr/include/c++/8/bits/stl_algo.h **** 	if (__comp(__next, __first))
3238:/usr/include/c++/8/bits/stl_algo.h **** 	  return __next;
3239:/usr/include/c++/8/bits/stl_algo.h ****       return __next;
3240:/usr/include/c++/8/bits/stl_algo.h ****     }
3241:/usr/include/c++/8/bits/stl_algo.h **** 
3242:/usr/include/c++/8/bits/stl_algo.h ****   /**
3243:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Determines the end of a sorted sequence.
3244:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3245:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
3246:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3247:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  An iterator pointing to the last iterator i in [__first, __last)
3248:/usr/include/c++/8/bits/stl_algo.h ****    *           for which the range [__first, i) is sorted.
3249:/usr/include/c++/8/bits/stl_algo.h ****   */
3250:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator>
3251:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
3252:/usr/include/c++/8/bits/stl_algo.h ****     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
3253:/usr/include/c++/8/bits/stl_algo.h ****     {
3254:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3255:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3256:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3257:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3258:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3259:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3260:/usr/include/c++/8/bits/stl_algo.h **** 
3261:/usr/include/c++/8/bits/stl_algo.h ****       return std::__is_sorted_until(__first, __last,
3262:/usr/include/c++/8/bits/stl_algo.h **** 				    __gnu_cxx::__ops::__iter_less_iter());
3263:/usr/include/c++/8/bits/stl_algo.h ****     }
3264:/usr/include/c++/8/bits/stl_algo.h **** 
3265:/usr/include/c++/8/bits/stl_algo.h ****   /**
3266:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Determines the end of a sorted sequence using comparison functor.
3267:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3268:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   An iterator.
3269:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3270:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
3271:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  An iterator pointing to the last iterator i in [__first, __last)
3272:/usr/include/c++/8/bits/stl_algo.h ****    *           for which the range [__first, i) is sorted.
3273:/usr/include/c++/8/bits/stl_algo.h ****   */
3274:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3275:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
3276:/usr/include/c++/8/bits/stl_algo.h ****     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
3277:/usr/include/c++/8/bits/stl_algo.h **** 		    _Compare __comp)
3278:/usr/include/c++/8/bits/stl_algo.h ****     {
3279:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3280:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3281:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3282:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type,
3283:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3284:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3285:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3286:/usr/include/c++/8/bits/stl_algo.h **** 
3287:/usr/include/c++/8/bits/stl_algo.h ****       return std::__is_sorted_until(__first, __last,
3288:/usr/include/c++/8/bits/stl_algo.h **** 				    __gnu_cxx::__ops::__iter_comp_iter(__comp));
3289:/usr/include/c++/8/bits/stl_algo.h ****     }
3290:/usr/include/c++/8/bits/stl_algo.h **** 
3291:/usr/include/c++/8/bits/stl_algo.h ****   /**
3292:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Determines min and max at once as an ordered pair.
3293:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3294:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __a  A thing of arbitrary type.
3295:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __b  Another thing of arbitrary type.
3296:/usr/include/c++/8/bits/stl_algo.h ****    *  @return A pair(__b, __a) if __b is smaller than __a, pair(__a,
3297:/usr/include/c++/8/bits/stl_algo.h ****    *  __b) otherwise.
3298:/usr/include/c++/8/bits/stl_algo.h ****   */
3299:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _Tp>
3300:/usr/include/c++/8/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3301:/usr/include/c++/8/bits/stl_algo.h ****     inline pair<const _Tp&, const _Tp&>
3302:/usr/include/c++/8/bits/stl_algo.h ****     minmax(const _Tp& __a, const _Tp& __b)
3303:/usr/include/c++/8/bits/stl_algo.h ****     {
3304:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3305:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
3306:/usr/include/c++/8/bits/stl_algo.h **** 
3307:/usr/include/c++/8/bits/stl_algo.h ****       return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
3308:/usr/include/c++/8/bits/stl_algo.h **** 		       : pair<const _Tp&, const _Tp&>(__a, __b);
3309:/usr/include/c++/8/bits/stl_algo.h ****     }
3310:/usr/include/c++/8/bits/stl_algo.h **** 
3311:/usr/include/c++/8/bits/stl_algo.h ****   /**
3312:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Determines min and max at once as an ordered pair.
3313:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3314:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __a  A thing of arbitrary type.
3315:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __b  Another thing of arbitrary type.
3316:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp  A @link comparison_functors comparison functor @endlink.
3317:/usr/include/c++/8/bits/stl_algo.h ****    *  @return A pair(__b, __a) if __b is smaller than __a, pair(__a,
3318:/usr/include/c++/8/bits/stl_algo.h ****    *  __b) otherwise.
3319:/usr/include/c++/8/bits/stl_algo.h ****   */
3320:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3321:/usr/include/c++/8/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3322:/usr/include/c++/8/bits/stl_algo.h ****     inline pair<const _Tp&, const _Tp&>
3323:/usr/include/c++/8/bits/stl_algo.h ****     minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
3324:/usr/include/c++/8/bits/stl_algo.h ****     {
3325:/usr/include/c++/8/bits/stl_algo.h ****       return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
3326:/usr/include/c++/8/bits/stl_algo.h **** 			      : pair<const _Tp&, const _Tp&>(__a, __b);
3327:/usr/include/c++/8/bits/stl_algo.h ****     }
3328:/usr/include/c++/8/bits/stl_algo.h **** 
3329:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3330:/usr/include/c++/8/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3331:/usr/include/c++/8/bits/stl_algo.h ****     pair<_ForwardIterator, _ForwardIterator>
3332:/usr/include/c++/8/bits/stl_algo.h ****     __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
3333:/usr/include/c++/8/bits/stl_algo.h **** 		     _Compare __comp)
3334:/usr/include/c++/8/bits/stl_algo.h ****     {
3335:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __next = __first;
3336:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __last
3337:/usr/include/c++/8/bits/stl_algo.h **** 	  || ++__next == __last)
3338:/usr/include/c++/8/bits/stl_algo.h **** 	return std::make_pair(__first, __first);
3339:/usr/include/c++/8/bits/stl_algo.h **** 
3340:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator __min{}, __max{};
3341:/usr/include/c++/8/bits/stl_algo.h ****       if (__comp(__next, __first))
3342:/usr/include/c++/8/bits/stl_algo.h **** 	{
3343:/usr/include/c++/8/bits/stl_algo.h **** 	  __min = __next;
3344:/usr/include/c++/8/bits/stl_algo.h **** 	  __max = __first;
3345:/usr/include/c++/8/bits/stl_algo.h **** 	}
3346:/usr/include/c++/8/bits/stl_algo.h ****       else
3347:/usr/include/c++/8/bits/stl_algo.h **** 	{
3348:/usr/include/c++/8/bits/stl_algo.h **** 	  __min = __first;
3349:/usr/include/c++/8/bits/stl_algo.h **** 	  __max = __next;
3350:/usr/include/c++/8/bits/stl_algo.h **** 	}
3351:/usr/include/c++/8/bits/stl_algo.h **** 
3352:/usr/include/c++/8/bits/stl_algo.h ****       __first = __next;
3353:/usr/include/c++/8/bits/stl_algo.h ****       ++__first;
3354:/usr/include/c++/8/bits/stl_algo.h **** 
3355:/usr/include/c++/8/bits/stl_algo.h ****       while (__first != __last)
3356:/usr/include/c++/8/bits/stl_algo.h **** 	{
3357:/usr/include/c++/8/bits/stl_algo.h **** 	  __next = __first;
3358:/usr/include/c++/8/bits/stl_algo.h **** 	  if (++__next == __last)
3359:/usr/include/c++/8/bits/stl_algo.h **** 	    {
3360:/usr/include/c++/8/bits/stl_algo.h **** 	      if (__comp(__first, __min))
3361:/usr/include/c++/8/bits/stl_algo.h **** 		__min = __first;
3362:/usr/include/c++/8/bits/stl_algo.h **** 	      else if (!__comp(__first, __max))
3363:/usr/include/c++/8/bits/stl_algo.h **** 		__max = __first;
3364:/usr/include/c++/8/bits/stl_algo.h **** 	      break;
3365:/usr/include/c++/8/bits/stl_algo.h **** 	    }
3366:/usr/include/c++/8/bits/stl_algo.h **** 
3367:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__comp(__next, __first))
3368:/usr/include/c++/8/bits/stl_algo.h **** 	    {
3369:/usr/include/c++/8/bits/stl_algo.h **** 	      if (__comp(__next, __min))
3370:/usr/include/c++/8/bits/stl_algo.h **** 		__min = __next;
3371:/usr/include/c++/8/bits/stl_algo.h **** 	      if (!__comp(__first, __max))
3372:/usr/include/c++/8/bits/stl_algo.h **** 		__max = __first;
3373:/usr/include/c++/8/bits/stl_algo.h **** 	    }
3374:/usr/include/c++/8/bits/stl_algo.h **** 	  else
3375:/usr/include/c++/8/bits/stl_algo.h **** 	    {
3376:/usr/include/c++/8/bits/stl_algo.h **** 	      if (__comp(__first, __min))
3377:/usr/include/c++/8/bits/stl_algo.h **** 		__min = __first;
3378:/usr/include/c++/8/bits/stl_algo.h **** 	      if (!__comp(__next, __max))
3379:/usr/include/c++/8/bits/stl_algo.h **** 		__max = __next;
3380:/usr/include/c++/8/bits/stl_algo.h **** 	    }
3381:/usr/include/c++/8/bits/stl_algo.h **** 
3382:/usr/include/c++/8/bits/stl_algo.h **** 	  __first = __next;
3383:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first;
3384:/usr/include/c++/8/bits/stl_algo.h **** 	}
3385:/usr/include/c++/8/bits/stl_algo.h **** 
3386:/usr/include/c++/8/bits/stl_algo.h ****       return std::make_pair(__min, __max);
3387:/usr/include/c++/8/bits/stl_algo.h ****     }
3388:/usr/include/c++/8/bits/stl_algo.h **** 
3389:/usr/include/c++/8/bits/stl_algo.h ****   /**
3390:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Return a pair of iterators pointing to the minimum and maximum
3391:/usr/include/c++/8/bits/stl_algo.h ****    *          elements in a range.
3392:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3393:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  Start of range.
3394:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   End of range.
3395:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  make_pair(m, M), where m is the first iterator i in 
3396:/usr/include/c++/8/bits/stl_algo.h ****    *           [__first, __last) such that no other element in the range is
3397:/usr/include/c++/8/bits/stl_algo.h ****    *           smaller, and where M is the last iterator i in [__first, __last)
3398:/usr/include/c++/8/bits/stl_algo.h ****    *           such that no other element in the range is larger.
3399:/usr/include/c++/8/bits/stl_algo.h ****   */
3400:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator>
3401:/usr/include/c++/8/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3402:/usr/include/c++/8/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
3403:/usr/include/c++/8/bits/stl_algo.h ****     minmax_element(_ForwardIterator __first, _ForwardIterator __last)
3404:/usr/include/c++/8/bits/stl_algo.h ****     {
3405:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3406:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3407:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3408:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3409:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3410:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3411:/usr/include/c++/8/bits/stl_algo.h **** 
3412:/usr/include/c++/8/bits/stl_algo.h ****       return std::__minmax_element(__first, __last,
3413:/usr/include/c++/8/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_less_iter());
3414:/usr/include/c++/8/bits/stl_algo.h ****     }
3415:/usr/include/c++/8/bits/stl_algo.h **** 
3416:/usr/include/c++/8/bits/stl_algo.h ****   /**
3417:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Return a pair of iterators pointing to the minimum and maximum
3418:/usr/include/c++/8/bits/stl_algo.h ****    *          elements in a range.
3419:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3420:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  Start of range.
3421:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   End of range.
3422:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp   Comparison functor.
3423:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  make_pair(m, M), where m is the first iterator i in 
3424:/usr/include/c++/8/bits/stl_algo.h ****    *           [__first, __last) such that no other element in the range is
3425:/usr/include/c++/8/bits/stl_algo.h ****    *           smaller, and where M is the last iterator i in [__first, __last)
3426:/usr/include/c++/8/bits/stl_algo.h ****    *           such that no other element in the range is larger.
3427:/usr/include/c++/8/bits/stl_algo.h ****   */
3428:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3429:/usr/include/c++/8/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3430:/usr/include/c++/8/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
3431:/usr/include/c++/8/bits/stl_algo.h ****     minmax_element(_ForwardIterator __first, _ForwardIterator __last,
3432:/usr/include/c++/8/bits/stl_algo.h **** 		   _Compare __comp)
3433:/usr/include/c++/8/bits/stl_algo.h ****     {
3434:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3435:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3436:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3437:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type,
3438:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3439:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3440:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3441:/usr/include/c++/8/bits/stl_algo.h **** 
3442:/usr/include/c++/8/bits/stl_algo.h ****       return std::__minmax_element(__first, __last,
3443:/usr/include/c++/8/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__comp));
3444:/usr/include/c++/8/bits/stl_algo.h ****     }
3445:/usr/include/c++/8/bits/stl_algo.h **** 
3446:/usr/include/c++/8/bits/stl_algo.h ****   // N2722 + DR 915.
3447:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _Tp>
3448:/usr/include/c++/8/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3449:/usr/include/c++/8/bits/stl_algo.h ****     inline _Tp
3450:/usr/include/c++/8/bits/stl_algo.h ****     min(initializer_list<_Tp> __l)
3451:/usr/include/c++/8/bits/stl_algo.h ****     { return *std::min_element(__l.begin(), __l.end()); }
3452:/usr/include/c++/8/bits/stl_algo.h **** 
3453:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3454:/usr/include/c++/8/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3455:/usr/include/c++/8/bits/stl_algo.h ****     inline _Tp
3456:/usr/include/c++/8/bits/stl_algo.h ****     min(initializer_list<_Tp> __l, _Compare __comp)
3457:/usr/include/c++/8/bits/stl_algo.h ****     { return *std::min_element(__l.begin(), __l.end(), __comp); }
3458:/usr/include/c++/8/bits/stl_algo.h **** 
3459:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _Tp>
3460:/usr/include/c++/8/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3461:/usr/include/c++/8/bits/stl_algo.h ****     inline _Tp
3462:/usr/include/c++/8/bits/stl_algo.h ****     max(initializer_list<_Tp> __l)
3463:/usr/include/c++/8/bits/stl_algo.h ****     { return *std::max_element(__l.begin(), __l.end()); }
3464:/usr/include/c++/8/bits/stl_algo.h **** 
3465:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3466:/usr/include/c++/8/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3467:/usr/include/c++/8/bits/stl_algo.h ****     inline _Tp
3468:/usr/include/c++/8/bits/stl_algo.h ****     max(initializer_list<_Tp> __l, _Compare __comp)
3469:/usr/include/c++/8/bits/stl_algo.h ****     { return *std::max_element(__l.begin(), __l.end(), __comp); }
3470:/usr/include/c++/8/bits/stl_algo.h **** 
3471:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _Tp>
3472:/usr/include/c++/8/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3473:/usr/include/c++/8/bits/stl_algo.h ****     inline pair<_Tp, _Tp>
3474:/usr/include/c++/8/bits/stl_algo.h ****     minmax(initializer_list<_Tp> __l)
3475:/usr/include/c++/8/bits/stl_algo.h ****     {
3476:/usr/include/c++/8/bits/stl_algo.h ****       pair<const _Tp*, const _Tp*> __p =
3477:/usr/include/c++/8/bits/stl_algo.h **** 	std::minmax_element(__l.begin(), __l.end());
3478:/usr/include/c++/8/bits/stl_algo.h ****       return std::make_pair(*__p.first, *__p.second);
3479:/usr/include/c++/8/bits/stl_algo.h ****     }
3480:/usr/include/c++/8/bits/stl_algo.h **** 
3481:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3482:/usr/include/c++/8/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3483:/usr/include/c++/8/bits/stl_algo.h ****     inline pair<_Tp, _Tp>
3484:/usr/include/c++/8/bits/stl_algo.h ****     minmax(initializer_list<_Tp> __l, _Compare __comp)
3485:/usr/include/c++/8/bits/stl_algo.h ****     {
3486:/usr/include/c++/8/bits/stl_algo.h ****       pair<const _Tp*, const _Tp*> __p =
3487:/usr/include/c++/8/bits/stl_algo.h **** 	std::minmax_element(__l.begin(), __l.end(), __comp);
3488:/usr/include/c++/8/bits/stl_algo.h ****       return std::make_pair(*__p.first, *__p.second);
3489:/usr/include/c++/8/bits/stl_algo.h ****     }
3490:/usr/include/c++/8/bits/stl_algo.h **** 
3491:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3492:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3493:/usr/include/c++/8/bits/stl_algo.h ****     bool
3494:/usr/include/c++/8/bits/stl_algo.h ****     __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3495:/usr/include/c++/8/bits/stl_algo.h **** 		     _ForwardIterator2 __first2, _BinaryPredicate __pred)
3496:/usr/include/c++/8/bits/stl_algo.h ****     {
3497:/usr/include/c++/8/bits/stl_algo.h ****       // Efficiently compare identical prefixes:  O(N) if sequences
3498:/usr/include/c++/8/bits/stl_algo.h ****       // have the same elements in the same order.
3499:/usr/include/c++/8/bits/stl_algo.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
3500:/usr/include/c++/8/bits/stl_algo.h **** 	if (!__pred(__first1, __first2))
3501:/usr/include/c++/8/bits/stl_algo.h **** 	  break;
3502:/usr/include/c++/8/bits/stl_algo.h **** 
3503:/usr/include/c++/8/bits/stl_algo.h ****       if (__first1 == __last1)
3504:/usr/include/c++/8/bits/stl_algo.h **** 	return true;
3505:/usr/include/c++/8/bits/stl_algo.h **** 
3506:/usr/include/c++/8/bits/stl_algo.h ****       // Establish __last2 assuming equal ranges by iterating over the
3507:/usr/include/c++/8/bits/stl_algo.h ****       // rest of the list.
3508:/usr/include/c++/8/bits/stl_algo.h ****       _ForwardIterator2 __last2 = __first2;
3509:/usr/include/c++/8/bits/stl_algo.h ****       std::advance(__last2, std::distance(__first1, __last1));
3510:/usr/include/c++/8/bits/stl_algo.h ****       for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
3511:/usr/include/c++/8/bits/stl_algo.h **** 	{
3512:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__scan != std::__find_if(__first1, __scan,
3513:/usr/include/c++/8/bits/stl_algo.h **** 			  __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
3514:/usr/include/c++/8/bits/stl_algo.h **** 	    continue; // We've seen this one before.
3515:/usr/include/c++/8/bits/stl_algo.h **** 	  
3516:/usr/include/c++/8/bits/stl_algo.h **** 	  auto __matches
3517:/usr/include/c++/8/bits/stl_algo.h **** 	    = std::__count_if(__first2, __last2,
3518:/usr/include/c++/8/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
3519:/usr/include/c++/8/bits/stl_algo.h **** 	  if (0 == __matches ||
3520:/usr/include/c++/8/bits/stl_algo.h **** 	      std::__count_if(__scan, __last1,
3521:/usr/include/c++/8/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
3522:/usr/include/c++/8/bits/stl_algo.h **** 	      != __matches)
3523:/usr/include/c++/8/bits/stl_algo.h **** 	    return false;
3524:/usr/include/c++/8/bits/stl_algo.h **** 	}
3525:/usr/include/c++/8/bits/stl_algo.h ****       return true;
3526:/usr/include/c++/8/bits/stl_algo.h ****     }
3527:/usr/include/c++/8/bits/stl_algo.h **** 
3528:/usr/include/c++/8/bits/stl_algo.h ****   /**
3529:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Checks whether a permutation of the second sequence is equal
3530:/usr/include/c++/8/bits/stl_algo.h ****    *          to the first sequence.
3531:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3532:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3533:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3534:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3535:/usr/include/c++/8/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in the range
3536:/usr/include/c++/8/bits/stl_algo.h ****    *          [__first2, __first2 + (__last1 - __first1)), beginning with 
3537:/usr/include/c++/8/bits/stl_algo.h ****    *          ForwardIterator2 begin, such that equal(__first1, __last1, begin)
3538:/usr/include/c++/8/bits/stl_algo.h ****    *          returns true; otherwise, returns false.
3539:/usr/include/c++/8/bits/stl_algo.h ****   */
3540:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
3541:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
3542:/usr/include/c++/8/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3543:/usr/include/c++/8/bits/stl_algo.h **** 		   _ForwardIterator2 __first2)
3544:/usr/include/c++/8/bits/stl_algo.h ****     {
3545:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3546:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
3547:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
3548:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
3549:/usr/include/c++/8/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator1>::value_type,
3550:/usr/include/c++/8/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator2>::value_type>)
3551:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3552:/usr/include/c++/8/bits/stl_algo.h **** 
3553:/usr/include/c++/8/bits/stl_algo.h ****       return std::__is_permutation(__first1, __last1, __first2,
3554:/usr/include/c++/8/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_equal_to_iter());
3555:/usr/include/c++/8/bits/stl_algo.h ****     }
3556:/usr/include/c++/8/bits/stl_algo.h **** 
3557:/usr/include/c++/8/bits/stl_algo.h ****   /**
3558:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Checks whether a permutation of the second sequence is equal
3559:/usr/include/c++/8/bits/stl_algo.h ****    *          to the first sequence.
3560:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3561:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3562:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3563:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3564:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred    A binary predicate.
3565:/usr/include/c++/8/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in
3566:/usr/include/c++/8/bits/stl_algo.h ****    *          the range [__first2, __first2 + (__last1 - __first1)),
3567:/usr/include/c++/8/bits/stl_algo.h ****    *          beginning with ForwardIterator2 begin, such that
3568:/usr/include/c++/8/bits/stl_algo.h ****    *          equal(__first1, __last1, __begin, __pred) returns true;
3569:/usr/include/c++/8/bits/stl_algo.h ****    *          otherwise, returns false.
3570:/usr/include/c++/8/bits/stl_algo.h ****   */
3571:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3572:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3573:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
3574:/usr/include/c++/8/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3575:/usr/include/c++/8/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _BinaryPredicate __pred)
3576:/usr/include/c++/8/bits/stl_algo.h ****     {
3577:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3578:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
3579:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
3580:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
3581:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
3582:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
3583:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3584:/usr/include/c++/8/bits/stl_algo.h **** 
3585:/usr/include/c++/8/bits/stl_algo.h ****       return std::__is_permutation(__first1, __last1, __first2,
3586:/usr/include/c++/8/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__pred));
3587:/usr/include/c++/8/bits/stl_algo.h ****     }
3588:/usr/include/c++/8/bits/stl_algo.h **** 
3589:/usr/include/c++/8/bits/stl_algo.h **** #if __cplusplus > 201103L
3590:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3591:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3592:/usr/include/c++/8/bits/stl_algo.h ****     bool
3593:/usr/include/c++/8/bits/stl_algo.h ****     __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3594:/usr/include/c++/8/bits/stl_algo.h **** 		     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
3595:/usr/include/c++/8/bits/stl_algo.h **** 		     _BinaryPredicate __pred)
3596:/usr/include/c++/8/bits/stl_algo.h ****     {
3597:/usr/include/c++/8/bits/stl_algo.h ****       using _Cat1
3598:/usr/include/c++/8/bits/stl_algo.h **** 	= typename iterator_traits<_ForwardIterator1>::iterator_category;
3599:/usr/include/c++/8/bits/stl_algo.h ****       using _Cat2
3600:/usr/include/c++/8/bits/stl_algo.h **** 	= typename iterator_traits<_ForwardIterator2>::iterator_category;
3601:/usr/include/c++/8/bits/stl_algo.h ****       using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;
3602:/usr/include/c++/8/bits/stl_algo.h ****       using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;
3603:/usr/include/c++/8/bits/stl_algo.h ****       constexpr bool __ra_iters = _It1_is_RA() && _It2_is_RA();
3604:/usr/include/c++/8/bits/stl_algo.h ****       if (__ra_iters)
3605:/usr/include/c++/8/bits/stl_algo.h **** 	{
3606:/usr/include/c++/8/bits/stl_algo.h **** 	  auto __d1 = std::distance(__first1, __last1);
3607:/usr/include/c++/8/bits/stl_algo.h **** 	  auto __d2 = std::distance(__first2, __last2);
3608:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__d1 != __d2)
3609:/usr/include/c++/8/bits/stl_algo.h **** 	    return false;
3610:/usr/include/c++/8/bits/stl_algo.h **** 	}
3611:/usr/include/c++/8/bits/stl_algo.h **** 
3612:/usr/include/c++/8/bits/stl_algo.h ****       // Efficiently compare identical prefixes:  O(N) if sequences
3613:/usr/include/c++/8/bits/stl_algo.h ****       // have the same elements in the same order.
3614:/usr/include/c++/8/bits/stl_algo.h ****       for (; __first1 != __last1 && __first2 != __last2;
3615:/usr/include/c++/8/bits/stl_algo.h **** 	  ++__first1, (void)++__first2)
3616:/usr/include/c++/8/bits/stl_algo.h **** 	if (!__pred(__first1, __first2))
3617:/usr/include/c++/8/bits/stl_algo.h **** 	  break;
3618:/usr/include/c++/8/bits/stl_algo.h **** 
3619:/usr/include/c++/8/bits/stl_algo.h ****       if (__ra_iters)
3620:/usr/include/c++/8/bits/stl_algo.h **** 	{
3621:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__first1 == __last1)
3622:/usr/include/c++/8/bits/stl_algo.h **** 	    return true;
3623:/usr/include/c++/8/bits/stl_algo.h **** 	}
3624:/usr/include/c++/8/bits/stl_algo.h ****       else
3625:/usr/include/c++/8/bits/stl_algo.h **** 	{
3626:/usr/include/c++/8/bits/stl_algo.h **** 	  auto __d1 = std::distance(__first1, __last1);
3627:/usr/include/c++/8/bits/stl_algo.h **** 	  auto __d2 = std::distance(__first2, __last2);
3628:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__d1 == 0 && __d2 == 0)
3629:/usr/include/c++/8/bits/stl_algo.h **** 	    return true;
3630:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__d1 != __d2)
3631:/usr/include/c++/8/bits/stl_algo.h **** 	    return false;
3632:/usr/include/c++/8/bits/stl_algo.h **** 	}
3633:/usr/include/c++/8/bits/stl_algo.h **** 
3634:/usr/include/c++/8/bits/stl_algo.h ****       for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
3635:/usr/include/c++/8/bits/stl_algo.h **** 	{
3636:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__scan != std::__find_if(__first1, __scan,
3637:/usr/include/c++/8/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
3638:/usr/include/c++/8/bits/stl_algo.h **** 	    continue; // We've seen this one before.
3639:/usr/include/c++/8/bits/stl_algo.h **** 
3640:/usr/include/c++/8/bits/stl_algo.h **** 	  auto __matches = std::__count_if(__first2, __last2,
3641:/usr/include/c++/8/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
3642:/usr/include/c++/8/bits/stl_algo.h **** 	  if (0 == __matches
3643:/usr/include/c++/8/bits/stl_algo.h **** 	      || std::__count_if(__scan, __last1,
3644:/usr/include/c++/8/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
3645:/usr/include/c++/8/bits/stl_algo.h **** 	      != __matches)
3646:/usr/include/c++/8/bits/stl_algo.h **** 	    return false;
3647:/usr/include/c++/8/bits/stl_algo.h **** 	}
3648:/usr/include/c++/8/bits/stl_algo.h ****       return true;
3649:/usr/include/c++/8/bits/stl_algo.h ****     }
3650:/usr/include/c++/8/bits/stl_algo.h **** 
3651:/usr/include/c++/8/bits/stl_algo.h ****   /**
3652:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Checks whether a permutaion of the second sequence is equal
3653:/usr/include/c++/8/bits/stl_algo.h ****    *          to the first sequence.
3654:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3655:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3656:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3657:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3658:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last2   End of first range.
3659:/usr/include/c++/8/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in the range
3660:/usr/include/c++/8/bits/stl_algo.h ****    *          [__first2, __last2), beginning with ForwardIterator2 begin,
3661:/usr/include/c++/8/bits/stl_algo.h ****    *          such that equal(__first1, __last1, begin) returns true;
3662:/usr/include/c++/8/bits/stl_algo.h ****    *          otherwise, returns false.
3663:/usr/include/c++/8/bits/stl_algo.h ****   */
3664:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
3665:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
3666:/usr/include/c++/8/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3667:/usr/include/c++/8/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _ForwardIterator2 __last2)
3668:/usr/include/c++/8/bits/stl_algo.h ****     {
3669:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3670:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
3671:/usr/include/c++/8/bits/stl_algo.h **** 
3672:/usr/include/c++/8/bits/stl_algo.h ****       return
3673:/usr/include/c++/8/bits/stl_algo.h **** 	std::__is_permutation(__first1, __last1, __first2, __last2,
3674:/usr/include/c++/8/bits/stl_algo.h **** 			      __gnu_cxx::__ops::__iter_equal_to_iter());
3675:/usr/include/c++/8/bits/stl_algo.h ****     }
3676:/usr/include/c++/8/bits/stl_algo.h **** 
3677:/usr/include/c++/8/bits/stl_algo.h ****   /**
3678:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Checks whether a permutation of the second sequence is equal
3679:/usr/include/c++/8/bits/stl_algo.h ****    *          to the first sequence.
3680:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3681:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3682:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3683:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3684:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last2   End of first range.
3685:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred    A binary predicate.
3686:/usr/include/c++/8/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in the range
3687:/usr/include/c++/8/bits/stl_algo.h ****    *          [__first2, __last2), beginning with ForwardIterator2 begin,
3688:/usr/include/c++/8/bits/stl_algo.h ****    *          such that equal(__first1, __last1, __begin, __pred) returns true;
3689:/usr/include/c++/8/bits/stl_algo.h ****    *          otherwise, returns false.
3690:/usr/include/c++/8/bits/stl_algo.h ****   */
3691:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3692:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3693:/usr/include/c++/8/bits/stl_algo.h ****     inline bool
3694:/usr/include/c++/8/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3695:/usr/include/c++/8/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _ForwardIterator2 __last2,
3696:/usr/include/c++/8/bits/stl_algo.h **** 		   _BinaryPredicate __pred)
3697:/usr/include/c++/8/bits/stl_algo.h ****     {
3698:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3699:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
3700:/usr/include/c++/8/bits/stl_algo.h **** 
3701:/usr/include/c++/8/bits/stl_algo.h ****       return std::__is_permutation(__first1, __last1, __first2, __last2,
3702:/usr/include/c++/8/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__pred));
3703:/usr/include/c++/8/bits/stl_algo.h ****     }
3704:/usr/include/c++/8/bits/stl_algo.h **** 
3705:/usr/include/c++/8/bits/stl_algo.h **** #if __cplusplus > 201402L
3706:/usr/include/c++/8/bits/stl_algo.h **** 
3707:/usr/include/c++/8/bits/stl_algo.h **** #define __cpp_lib_clamp 201603
3708:/usr/include/c++/8/bits/stl_algo.h **** 
3709:/usr/include/c++/8/bits/stl_algo.h ****   /**
3710:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Returns the value clamped between lo and hi.
3711:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3712:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __val  A value of arbitrary type.
3713:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __lo   A lower limit of arbitrary type.
3714:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __hi   An upper limit of arbitrary type.
3715:/usr/include/c++/8/bits/stl_algo.h ****    *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
3716:/usr/include/c++/8/bits/stl_algo.h ****    */
3717:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _Tp>
3718:/usr/include/c++/8/bits/stl_algo.h ****     constexpr const _Tp&
3719:/usr/include/c++/8/bits/stl_algo.h ****     clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
3720:/usr/include/c++/8/bits/stl_algo.h ****     {
3721:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_assert(!(__hi < __lo));
3722:/usr/include/c++/8/bits/stl_algo.h ****       return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
3723:/usr/include/c++/8/bits/stl_algo.h ****     }
3724:/usr/include/c++/8/bits/stl_algo.h **** 
3725:/usr/include/c++/8/bits/stl_algo.h ****   /**
3726:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Returns the value clamped between lo and hi.
3727:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3728:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __val   A value of arbitrary type.
3729:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __lo    A lower limit of arbitrary type.
3730:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __hi    An upper limit of arbitrary type.
3731:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp  A comparison functor.
3732:/usr/include/c++/8/bits/stl_algo.h ****    *  @return max(__val, __lo, __comp) if __comp(__val, __hi)
3733:/usr/include/c++/8/bits/stl_algo.h ****    *	      or min(__val, __hi, __comp) otherwise.
3734:/usr/include/c++/8/bits/stl_algo.h ****    */
3735:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3736:/usr/include/c++/8/bits/stl_algo.h ****     constexpr const _Tp&
3737:/usr/include/c++/8/bits/stl_algo.h ****     clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi, _Compare __comp)
3738:/usr/include/c++/8/bits/stl_algo.h ****     {
3739:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_assert(!__comp(__hi, __lo));
3740:/usr/include/c++/8/bits/stl_algo.h ****       return __comp(__val, __lo) ? __lo : __comp(__hi, __val) ? __hi : __val;
3741:/usr/include/c++/8/bits/stl_algo.h ****     }
3742:/usr/include/c++/8/bits/stl_algo.h **** #endif // C++17
3743:/usr/include/c++/8/bits/stl_algo.h **** #endif // C++14
3744:/usr/include/c++/8/bits/stl_algo.h **** 
3745:/usr/include/c++/8/bits/stl_algo.h **** #ifdef _GLIBCXX_USE_C99_STDINT_TR1
3746:/usr/include/c++/8/bits/stl_algo.h ****   /**
3747:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Generate two uniformly distributed integers using a
3748:/usr/include/c++/8/bits/stl_algo.h ****    *         single distribution invocation.
3749:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __b0    The upper bound for the first integer.
3750:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __b1    The upper bound for the second integer.
3751:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __g     A UniformRandomBitGenerator.
3752:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  A pair (i, j) with i and j uniformly distributed
3753:/usr/include/c++/8/bits/stl_algo.h ****    *           over [0, __b0) and [0, __b1), respectively.
3754:/usr/include/c++/8/bits/stl_algo.h ****    *
3755:/usr/include/c++/8/bits/stl_algo.h ****    *  Requires: __b0 * __b1 <= __g.max() - __g.min().
3756:/usr/include/c++/8/bits/stl_algo.h ****    *
3757:/usr/include/c++/8/bits/stl_algo.h ****    *  Using uniform_int_distribution with a range that is very
3758:/usr/include/c++/8/bits/stl_algo.h ****    *  small relative to the range of the generator ends up wasting
3759:/usr/include/c++/8/bits/stl_algo.h ****    *  potentially expensively generated randomness, since
3760:/usr/include/c++/8/bits/stl_algo.h ****    *  uniform_int_distribution does not store leftover randomness
3761:/usr/include/c++/8/bits/stl_algo.h ****    *  between invocations.
3762:/usr/include/c++/8/bits/stl_algo.h ****    *
3763:/usr/include/c++/8/bits/stl_algo.h ****    *  If we know we want two integers in ranges that are sufficiently
3764:/usr/include/c++/8/bits/stl_algo.h ****    *  small, we can compose the ranges, use a single distribution
3765:/usr/include/c++/8/bits/stl_algo.h ****    *  invocation, and significantly reduce the waste.
3766:/usr/include/c++/8/bits/stl_algo.h ****   */
3767:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _IntType, typename _UniformRandomBitGenerator>
3768:/usr/include/c++/8/bits/stl_algo.h ****     pair<_IntType, _IntType>
3769:/usr/include/c++/8/bits/stl_algo.h ****     __gen_two_uniform_ints(_IntType __b0, _IntType __b1,
3770:/usr/include/c++/8/bits/stl_algo.h **** 			   _UniformRandomBitGenerator&& __g)
3771:/usr/include/c++/8/bits/stl_algo.h ****     {
3772:/usr/include/c++/8/bits/stl_algo.h ****       _IntType __x
3773:/usr/include/c++/8/bits/stl_algo.h **** 	= uniform_int_distribution<_IntType>{0, (__b0 * __b1) - 1}(__g);
3774:/usr/include/c++/8/bits/stl_algo.h ****       return std::make_pair(__x / __b1, __x % __b1);
3775:/usr/include/c++/8/bits/stl_algo.h ****     }
3776:/usr/include/c++/8/bits/stl_algo.h **** 
3777:/usr/include/c++/8/bits/stl_algo.h ****   /**
3778:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Shuffle the elements of a sequence using a uniform random
3779:/usr/include/c++/8/bits/stl_algo.h ****    *         number generator.
3780:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
3781:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
3782:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
3783:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __g       A UniformRandomNumberGenerator (26.5.1.3).
3784:/usr/include/c++/8/bits/stl_algo.h ****    *  @return  Nothing.
3785:/usr/include/c++/8/bits/stl_algo.h ****    *
3786:/usr/include/c++/8/bits/stl_algo.h ****    *  Reorders the elements in the range @p [__first,__last) using @p __g to
3787:/usr/include/c++/8/bits/stl_algo.h ****    *  provide random numbers.
3788:/usr/include/c++/8/bits/stl_algo.h ****   */
3789:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _RandomAccessIterator,
3790:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _UniformRandomNumberGenerator>
3791:/usr/include/c++/8/bits/stl_algo.h ****     void
3792:/usr/include/c++/8/bits/stl_algo.h ****     shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
3793:/usr/include/c++/8/bits/stl_algo.h **** 	    _UniformRandomNumberGenerator&& __g)
3794:/usr/include/c++/8/bits/stl_algo.h ****     {
3795:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3796:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
3797:/usr/include/c++/8/bits/stl_algo.h **** 	    _RandomAccessIterator>)
3798:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3799:/usr/include/c++/8/bits/stl_algo.h **** 
3800:/usr/include/c++/8/bits/stl_algo.h ****       if (__first == __last)
3801:/usr/include/c++/8/bits/stl_algo.h **** 	return;
3802:/usr/include/c++/8/bits/stl_algo.h **** 
3803:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
3804:/usr/include/c++/8/bits/stl_algo.h **** 	_DistanceType;
3805:/usr/include/c++/8/bits/stl_algo.h **** 
3806:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
3807:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
3808:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename __distr_type::param_type __p_type;
3809:/usr/include/c++/8/bits/stl_algo.h **** 
3810:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename remove_reference<_UniformRandomNumberGenerator>::type
3811:/usr/include/c++/8/bits/stl_algo.h **** 	_Gen;
3812:/usr/include/c++/8/bits/stl_algo.h ****       typedef typename common_type<typename _Gen::result_type, __ud_type>::type
3813:/usr/include/c++/8/bits/stl_algo.h **** 	__uc_type;
3814:/usr/include/c++/8/bits/stl_algo.h **** 
3815:/usr/include/c++/8/bits/stl_algo.h ****       const __uc_type __urngrange = __g.max() - __g.min();
3816:/usr/include/c++/8/bits/stl_algo.h ****       const __uc_type __urange = __uc_type(__last - __first);
3817:/usr/include/c++/8/bits/stl_algo.h **** 
3818:/usr/include/c++/8/bits/stl_algo.h ****       if (__urngrange / __urange >= __urange)
3819:/usr/include/c++/8/bits/stl_algo.h ****         // I.e. (__urngrange >= __urange * __urange) but without wrap issues.
3820:/usr/include/c++/8/bits/stl_algo.h ****       {
3821:/usr/include/c++/8/bits/stl_algo.h **** 	_RandomAccessIterator __i = __first + 1;
3822:/usr/include/c++/8/bits/stl_algo.h **** 
3823:/usr/include/c++/8/bits/stl_algo.h **** 	// Since we know the range isn't empty, an even number of elements
3824:/usr/include/c++/8/bits/stl_algo.h **** 	// means an uneven number of elements /to swap/, in which case we
3825:/usr/include/c++/8/bits/stl_algo.h **** 	// do the first one up front:
3826:/usr/include/c++/8/bits/stl_algo.h **** 
3827:/usr/include/c++/8/bits/stl_algo.h **** 	if ((__urange % 2) == 0)
3828:/usr/include/c++/8/bits/stl_algo.h **** 	{
3829:/usr/include/c++/8/bits/stl_algo.h **** 	  __distr_type __d{0, 1};
3830:/usr/include/c++/8/bits/stl_algo.h **** 	  std::iter_swap(__i++, __first + __d(__g));
3831:/usr/include/c++/8/bits/stl_algo.h **** 	}
3832:/usr/include/c++/8/bits/stl_algo.h **** 
3833:/usr/include/c++/8/bits/stl_algo.h **** 	// Now we know that __last - __i is even, so we do the rest in pairs,
3834:/usr/include/c++/8/bits/stl_algo.h **** 	// using a single distribution invocation to produce swap positions
3835:/usr/include/c++/8/bits/stl_algo.h **** 	// for two successive elements at a time:
3836:/usr/include/c++/8/bits/stl_algo.h **** 
3837:/usr/include/c++/8/bits/stl_algo.h **** 	while (__i != __last)
3838:/usr/include/c++/8/bits/stl_algo.h **** 	{
3839:/usr/include/c++/8/bits/stl_algo.h **** 	  const __uc_type __swap_range = __uc_type(__i - __first) + 1;
3840:/usr/include/c++/8/bits/stl_algo.h **** 
3841:/usr/include/c++/8/bits/stl_algo.h **** 	  const pair<__uc_type, __uc_type> __pospos =
3842:/usr/include/c++/8/bits/stl_algo.h **** 	    __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g);
3843:/usr/include/c++/8/bits/stl_algo.h **** 
3844:/usr/include/c++/8/bits/stl_algo.h **** 	  std::iter_swap(__i++, __first + __pospos.first);
3845:/usr/include/c++/8/bits/stl_algo.h **** 	  std::iter_swap(__i++, __first + __pospos.second);
3846:/usr/include/c++/8/bits/stl_algo.h **** 	}
3847:/usr/include/c++/8/bits/stl_algo.h **** 
3848:/usr/include/c++/8/bits/stl_algo.h **** 	return;
3849:/usr/include/c++/8/bits/stl_algo.h ****       }
3850:/usr/include/c++/8/bits/stl_algo.h **** 
3851:/usr/include/c++/8/bits/stl_algo.h ****       __distr_type __d;
3852:/usr/include/c++/8/bits/stl_algo.h **** 
3853:/usr/include/c++/8/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
3854:/usr/include/c++/8/bits/stl_algo.h **** 	std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
3855:/usr/include/c++/8/bits/stl_algo.h ****     }
3856:/usr/include/c++/8/bits/stl_algo.h **** #endif
3857:/usr/include/c++/8/bits/stl_algo.h **** 
3858:/usr/include/c++/8/bits/stl_algo.h **** #endif // C++11
3859:/usr/include/c++/8/bits/stl_algo.h **** 
3860:/usr/include/c++/8/bits/stl_algo.h **** _GLIBCXX_BEGIN_NAMESPACE_ALGO
3861:/usr/include/c++/8/bits/stl_algo.h **** 
3862:/usr/include/c++/8/bits/stl_algo.h ****   /**
3863:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Apply a function to every element of a sequence.
3864:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3865:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  An input iterator.
3866:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   An input iterator.
3867:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __f      A unary function object.
3868:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   @p __f
3869:/usr/include/c++/8/bits/stl_algo.h ****    *
3870:/usr/include/c++/8/bits/stl_algo.h ****    *  Applies the function object @p __f to each element in the range
3871:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [first,last).  @p __f must not modify the order of the sequence.
3872:/usr/include/c++/8/bits/stl_algo.h ****    *  If @p __f has a return value it is ignored.
3873:/usr/include/c++/8/bits/stl_algo.h ****   */
3874:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Function>
3875:/usr/include/c++/8/bits/stl_algo.h ****     _Function
3876:/usr/include/c++/8/bits/stl_algo.h ****     for_each(_InputIterator __first, _InputIterator __last, _Function __f)
3877:/usr/include/c++/8/bits/stl_algo.h ****     {
3878:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3879:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3880:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3881:/usr/include/c++/8/bits/stl_algo.h ****       for (; __first != __last; ++__first)
3882:/usr/include/c++/8/bits/stl_algo.h **** 	__f(*__first);
3883:/usr/include/c++/8/bits/stl_algo.h ****       return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
3884:/usr/include/c++/8/bits/stl_algo.h ****     }
3885:/usr/include/c++/8/bits/stl_algo.h **** 
3886:/usr/include/c++/8/bits/stl_algo.h ****   /**
3887:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Find the first occurrence of a value in a sequence.
3888:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3889:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  An input iterator.
3890:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   An input iterator.
3891:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __val    The value to find.
3892:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   The first iterator @c i in the range @p [__first,__last)
3893:/usr/include/c++/8/bits/stl_algo.h ****    *  such that @c *i == @p __val, or @p __last if no such iterator exists.
3894:/usr/include/c++/8/bits/stl_algo.h ****   */
3895:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Tp>
3896:/usr/include/c++/8/bits/stl_algo.h ****     inline _InputIterator
3897:/usr/include/c++/8/bits/stl_algo.h ****     find(_InputIterator __first, _InputIterator __last,
3898:/usr/include/c++/8/bits/stl_algo.h **** 	 const _Tp& __val)
3899:/usr/include/c++/8/bits/stl_algo.h ****     {
3900:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3901:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3902:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
3903:/usr/include/c++/8/bits/stl_algo.h **** 		typename iterator_traits<_InputIterator>::value_type, _Tp>)
3904:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3905:/usr/include/c++/8/bits/stl_algo.h ****       return std::__find_if(__first, __last,
3906:/usr/include/c++/8/bits/stl_algo.h **** 			    __gnu_cxx::__ops::__iter_equals_val(__val));
3907:/usr/include/c++/8/bits/stl_algo.h ****     }
3908:/usr/include/c++/8/bits/stl_algo.h **** 
3909:/usr/include/c++/8/bits/stl_algo.h ****   /**
3910:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Find the first element in a sequence for which a
3911:/usr/include/c++/8/bits/stl_algo.h ****    *         predicate is true.
3912:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3913:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  An input iterator.
3914:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   An input iterator.
3915:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred   A predicate.
3916:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   The first iterator @c i in the range @p [__first,__last)
3917:/usr/include/c++/8/bits/stl_algo.h ****    *  such that @p __pred(*i) is true, or @p __last if no such iterator exists.
3918:/usr/include/c++/8/bits/stl_algo.h ****   */
3919:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
3920:/usr/include/c++/8/bits/stl_algo.h ****     inline _InputIterator
3921:/usr/include/c++/8/bits/stl_algo.h ****     find_if(_InputIterator __first, _InputIterator __last,
3922:/usr/include/c++/8/bits/stl_algo.h **** 	    _Predicate __pred)
3923:/usr/include/c++/8/bits/stl_algo.h ****     {
3924:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3925:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3926:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
3927:/usr/include/c++/8/bits/stl_algo.h **** 	      typename iterator_traits<_InputIterator>::value_type>)
3928:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3929:/usr/include/c++/8/bits/stl_algo.h **** 
3930:/usr/include/c++/8/bits/stl_algo.h ****       return std::__find_if(__first, __last,
3931:/usr/include/c++/8/bits/stl_algo.h **** 			    __gnu_cxx::__ops::__pred_iter(__pred));
3932:/usr/include/c++/8/bits/stl_algo.h ****     }
3933:/usr/include/c++/8/bits/stl_algo.h **** 
3934:/usr/include/c++/8/bits/stl_algo.h ****   /**
3935:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Find element from a set in a sequence.
3936:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3937:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
3938:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
3939:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first2  Start of match candidates.
3940:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last2   End of match candidates.
3941:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   The first iterator @c i in the range
3942:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__first1,__last1) such that @c *i == @p *(i2) such that i2 is an
3943:/usr/include/c++/8/bits/stl_algo.h ****    *  iterator in [__first2,__last2), or @p __last1 if no such iterator exists.
3944:/usr/include/c++/8/bits/stl_algo.h ****    *
3945:/usr/include/c++/8/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for an element that is
3946:/usr/include/c++/8/bits/stl_algo.h ****    *  equal to some element in the range [__first2,__last2).  If
3947:/usr/include/c++/8/bits/stl_algo.h ****    *  found, returns an iterator in the range [__first1,__last1),
3948:/usr/include/c++/8/bits/stl_algo.h ****    *  otherwise returns @p __last1.
3949:/usr/include/c++/8/bits/stl_algo.h ****   */
3950:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _ForwardIterator>
3951:/usr/include/c++/8/bits/stl_algo.h ****     _InputIterator
3952:/usr/include/c++/8/bits/stl_algo.h ****     find_first_of(_InputIterator __first1, _InputIterator __last1,
3953:/usr/include/c++/8/bits/stl_algo.h **** 		  _ForwardIterator __first2, _ForwardIterator __last2)
3954:/usr/include/c++/8/bits/stl_algo.h ****     {
3955:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3956:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3957:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3958:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
3959:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type,
3960:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3961:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3962:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
3963:/usr/include/c++/8/bits/stl_algo.h **** 
3964:/usr/include/c++/8/bits/stl_algo.h ****       for (; __first1 != __last1; ++__first1)
3965:/usr/include/c++/8/bits/stl_algo.h **** 	for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
3966:/usr/include/c++/8/bits/stl_algo.h **** 	  if (*__first1 == *__iter)
3967:/usr/include/c++/8/bits/stl_algo.h **** 	    return __first1;
3968:/usr/include/c++/8/bits/stl_algo.h ****       return __last1;
3969:/usr/include/c++/8/bits/stl_algo.h ****     }
3970:/usr/include/c++/8/bits/stl_algo.h **** 
3971:/usr/include/c++/8/bits/stl_algo.h ****   /**
3972:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief  Find element from a set in a sequence using a predicate.
3973:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3974:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
3975:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
3976:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first2  Start of match candidates.
3977:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last2   End of match candidates.
3978:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __comp    Predicate to use.
3979:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   The first iterator @c i in the range
3980:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__first1,__last1) such that @c comp(*i, @p *(i2)) is true
3981:/usr/include/c++/8/bits/stl_algo.h ****    *  and i2 is an iterator in [__first2,__last2), or @p __last1 if no
3982:/usr/include/c++/8/bits/stl_algo.h ****    *  such iterator exists.
3983:/usr/include/c++/8/bits/stl_algo.h ****    *
3984:/usr/include/c++/8/bits/stl_algo.h **** 
3985:/usr/include/c++/8/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for an element that is
3986:/usr/include/c++/8/bits/stl_algo.h ****    *  equal to some element in the range [__first2,__last2).  If
3987:/usr/include/c++/8/bits/stl_algo.h ****    *  found, returns an iterator in the range [__first1,__last1),
3988:/usr/include/c++/8/bits/stl_algo.h ****    *  otherwise returns @p __last1.
3989:/usr/include/c++/8/bits/stl_algo.h ****   */
3990:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _ForwardIterator,
3991:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3992:/usr/include/c++/8/bits/stl_algo.h ****     _InputIterator
3993:/usr/include/c++/8/bits/stl_algo.h ****     find_first_of(_InputIterator __first1, _InputIterator __last1,
3994:/usr/include/c++/8/bits/stl_algo.h **** 		  _ForwardIterator __first2, _ForwardIterator __last2,
3995:/usr/include/c++/8/bits/stl_algo.h **** 		  _BinaryPredicate __comp)
3996:/usr/include/c++/8/bits/stl_algo.h ****     {
3997:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
3998:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3999:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
4000:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
4001:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type,
4002:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
4003:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
4004:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
4005:/usr/include/c++/8/bits/stl_algo.h **** 
4006:/usr/include/c++/8/bits/stl_algo.h ****       for (; __first1 != __last1; ++__first1)
4007:/usr/include/c++/8/bits/stl_algo.h **** 	for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
4008:/usr/include/c++/8/bits/stl_algo.h **** 	  if (__comp(*__first1, *__iter))
4009:/usr/include/c++/8/bits/stl_algo.h **** 	    return __first1;
4010:/usr/include/c++/8/bits/stl_algo.h ****       return __last1;
4011:/usr/include/c++/8/bits/stl_algo.h ****     }
4012:/usr/include/c++/8/bits/stl_algo.h **** 
4013:/usr/include/c++/8/bits/stl_algo.h ****   /**
4014:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Find two adjacent values in a sequence that are equal.
4015:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
4016:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
4017:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
4018:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   The first iterator @c i such that @c i and @c i+1 are both
4019:/usr/include/c++/8/bits/stl_algo.h ****    *  valid iterators in @p [__first,__last) and such that @c *i == @c *(i+1),
4020:/usr/include/c++/8/bits/stl_algo.h ****    *  or @p __last if no such iterator exists.
4021:/usr/include/c++/8/bits/stl_algo.h ****   */
4022:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator>
4023:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
4024:/usr/include/c++/8/bits/stl_algo.h ****     adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
4025:/usr/include/c++/8/bits/stl_algo.h ****     {
4026:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
4027:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
4028:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualityComparableConcept<
4029:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
4030:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
4031:/usr/include/c++/8/bits/stl_algo.h **** 
4032:/usr/include/c++/8/bits/stl_algo.h ****       return std::__adjacent_find(__first, __last,
4033:/usr/include/c++/8/bits/stl_algo.h **** 				  __gnu_cxx::__ops::__iter_equal_to_iter());
4034:/usr/include/c++/8/bits/stl_algo.h ****     }
4035:/usr/include/c++/8/bits/stl_algo.h **** 
4036:/usr/include/c++/8/bits/stl_algo.h ****   /**
4037:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Find two adjacent values in a sequence using a predicate.
4038:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
4039:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first         A forward iterator.
4040:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last          A forward iterator.
4041:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __binary_pred   A binary predicate.
4042:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   The first iterator @c i such that @c i and @c i+1 are both
4043:/usr/include/c++/8/bits/stl_algo.h ****    *  valid iterators in @p [__first,__last) and such that
4044:/usr/include/c++/8/bits/stl_algo.h ****    *  @p __binary_pred(*i,*(i+1)) is true, or @p __last if no such iterator
4045:/usr/include/c++/8/bits/stl_algo.h ****    *  exists.
4046:/usr/include/c++/8/bits/stl_algo.h ****   */
4047:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
4048:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
4049:/usr/include/c++/8/bits/stl_algo.h ****     adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
4050:/usr/include/c++/8/bits/stl_algo.h **** 		  _BinaryPredicate __binary_pred)
4051:/usr/include/c++/8/bits/stl_algo.h ****     {
4052:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
4053:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
4054:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
4055:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type,
4056:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
4057:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
4058:/usr/include/c++/8/bits/stl_algo.h **** 
4059:/usr/include/c++/8/bits/stl_algo.h ****       return std::__adjacent_find(__first, __last,
4060:/usr/include/c++/8/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
4061:/usr/include/c++/8/bits/stl_algo.h ****     }
4062:/usr/include/c++/8/bits/stl_algo.h **** 
4063:/usr/include/c++/8/bits/stl_algo.h ****   /**
4064:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Count the number of copies of a value in a sequence.
4065:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
4066:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  An input iterator.
4067:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   An input iterator.
4068:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __value  The value to be counted.
4069:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   The number of iterators @c i in the range @p [__first,__last)
4070:/usr/include/c++/8/bits/stl_algo.h ****    *  for which @c *i == @p __value
4071:/usr/include/c++/8/bits/stl_algo.h ****   */
4072:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Tp>
4073:/usr/include/c++/8/bits/stl_algo.h ****     inline typename iterator_traits<_InputIterator>::difference_type
4074:/usr/include/c++/8/bits/stl_algo.h ****     count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
4075:/usr/include/c++/8/bits/stl_algo.h ****     {
4076:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
4077:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
4078:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
4079:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
4080:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
4081:/usr/include/c++/8/bits/stl_algo.h **** 
4082:/usr/include/c++/8/bits/stl_algo.h ****       return std::__count_if(__first, __last,
4083:/usr/include/c++/8/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_equals_val(__value));
4084:/usr/include/c++/8/bits/stl_algo.h ****     }
4085:/usr/include/c++/8/bits/stl_algo.h **** 
4086:/usr/include/c++/8/bits/stl_algo.h ****   /**
4087:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Count the elements of a sequence for which a predicate is true.
4088:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
4089:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  An input iterator.
4090:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   An input iterator.
4091:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __pred   A predicate.
4092:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   The number of iterators @c i in the range @p [__first,__last)
4093:/usr/include/c++/8/bits/stl_algo.h ****    *  for which @p __pred(*i) is true.
4094:/usr/include/c++/8/bits/stl_algo.h ****   */
4095:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
4096:/usr/include/c++/8/bits/stl_algo.h ****     inline typename iterator_traits<_InputIterator>::difference_type
4097:/usr/include/c++/8/bits/stl_algo.h ****     count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
4098:/usr/include/c++/8/bits/stl_algo.h ****     {
4099:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
4100:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
4101:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
4102:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
4103:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
4104:/usr/include/c++/8/bits/stl_algo.h **** 
4105:/usr/include/c++/8/bits/stl_algo.h ****       return std::__count_if(__first, __last,
4106:/usr/include/c++/8/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__pred_iter(__pred));
4107:/usr/include/c++/8/bits/stl_algo.h ****     }
4108:/usr/include/c++/8/bits/stl_algo.h **** 
4109:/usr/include/c++/8/bits/stl_algo.h ****   /**
4110:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Search a sequence for a matching sub-sequence.
4111:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
4112:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first1  A forward iterator.
4113:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last1   A forward iterator.
4114:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first2  A forward iterator.
4115:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last2   A forward iterator.
4116:/usr/include/c++/8/bits/stl_algo.h ****    *  @return The first iterator @c i in the range @p
4117:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2)) such that @c *(i+N) == @p
4118:/usr/include/c++/8/bits/stl_algo.h ****    *  *(__first2+N) for each @c N in the range @p
4119:/usr/include/c++/8/bits/stl_algo.h ****    *  [0,__last2-__first2), or @p __last1 if no such iterator exists.
4120:/usr/include/c++/8/bits/stl_algo.h ****    *
4121:/usr/include/c++/8/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
4122:/usr/include/c++/8/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
4123:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first2,__last2) and returns an iterator to the first element
4124:/usr/include/c++/8/bits/stl_algo.h ****    *  of the sub-sequence, or @p __last1 if the sub-sequence is not
4125:/usr/include/c++/8/bits/stl_algo.h ****    *  found.
4126:/usr/include/c++/8/bits/stl_algo.h ****    *
4127:/usr/include/c++/8/bits/stl_algo.h ****    *  Because the sub-sequence must lie completely within the range @p
4128:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first1,__last1) it must start at a position less than @p
4129:/usr/include/c++/8/bits/stl_algo.h ****    *  __last1-(__last2-__first2) where @p __last2-__first2 is the
4130:/usr/include/c++/8/bits/stl_algo.h ****    *  length of the sub-sequence.
4131:/usr/include/c++/8/bits/stl_algo.h ****    *
4132:/usr/include/c++/8/bits/stl_algo.h ****    *  This means that the returned iterator @c i will be in the range
4133:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__first1,__last1-(__last2-__first2))
4134:/usr/include/c++/8/bits/stl_algo.h ****   */
4135:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
4136:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator1
4137:/usr/include/c++/8/bits/stl_algo.h ****     search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
4138:/usr/include/c++/8/bits/stl_algo.h **** 	   _ForwardIterator2 __first2, _ForwardIterator2 __last2)
4139:/usr/include/c++/8/bits/stl_algo.h ****     {
4140:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
4141:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
4142:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
4143:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
4144:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
4145:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
4146:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
4147:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
4148:/usr/include/c++/8/bits/stl_algo.h **** 
4149:/usr/include/c++/8/bits/stl_algo.h ****       return std::__search(__first1, __last1, __first2, __last2,
4150:/usr/include/c++/8/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_equal_to_iter());
4151:/usr/include/c++/8/bits/stl_algo.h ****     }
4152:/usr/include/c++/8/bits/stl_algo.h **** 
4153:/usr/include/c++/8/bits/stl_algo.h ****   /**
4154:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Search a sequence for a matching sub-sequence using a predicate.
4155:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
4156:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first1     A forward iterator.
4157:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last1      A forward iterator.
4158:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first2     A forward iterator.
4159:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last2      A forward iterator.
4160:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __predicate  A binary predicate.
4161:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   The first iterator @c i in the range
4162:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [__first1,__last1-(__last2-__first2)) such that
4163:/usr/include/c++/8/bits/stl_algo.h ****    *  @p __predicate(*(i+N),*(__first2+N)) is true for each @c N in the range
4164:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [0,__last2-__first2), or @p __last1 if no such iterator exists.
4165:/usr/include/c++/8/bits/stl_algo.h ****    *
4166:/usr/include/c++/8/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
4167:/usr/include/c++/8/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
4168:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first2,__last2), using @p __predicate to determine equality,
4169:/usr/include/c++/8/bits/stl_algo.h ****    *  and returns an iterator to the first element of the
4170:/usr/include/c++/8/bits/stl_algo.h ****    *  sub-sequence, or @p __last1 if no such iterator exists.
4171:/usr/include/c++/8/bits/stl_algo.h ****    *
4172:/usr/include/c++/8/bits/stl_algo.h ****    *  @see search(_ForwardIter1, _ForwardIter1, _ForwardIter2, _ForwardIter2)
4173:/usr/include/c++/8/bits/stl_algo.h ****   */
4174:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
4175:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
4176:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator1
4177:/usr/include/c++/8/bits/stl_algo.h ****     search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
4178:/usr/include/c++/8/bits/stl_algo.h **** 	   _ForwardIterator2 __first2, _ForwardIterator2 __last2,
4179:/usr/include/c++/8/bits/stl_algo.h **** 	   _BinaryPredicate  __predicate)
4180:/usr/include/c++/8/bits/stl_algo.h ****     {
4181:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
4182:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
4183:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
4184:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
4185:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
4186:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
4187:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
4188:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
4189:/usr/include/c++/8/bits/stl_algo.h **** 
4190:/usr/include/c++/8/bits/stl_algo.h ****       return std::__search(__first1, __last1, __first2, __last2,
4191:/usr/include/c++/8/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_comp_iter(__predicate));
4192:/usr/include/c++/8/bits/stl_algo.h ****     }
4193:/usr/include/c++/8/bits/stl_algo.h **** 
4194:/usr/include/c++/8/bits/stl_algo.h ****   /**
4195:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Search a sequence for a number of consecutive values.
4196:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
4197:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
4198:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
4199:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __count  The number of consecutive values.
4200:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __val    The value to find.
4201:/usr/include/c++/8/bits/stl_algo.h ****    *  @return The first iterator @c i in the range @p
4202:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first,__last-__count) such that @c *(i+N) == @p __val for
4203:/usr/include/c++/8/bits/stl_algo.h ****    *  each @c N in the range @p [0,__count), or @p __last if no such
4204:/usr/include/c++/8/bits/stl_algo.h ****    *  iterator exists.
4205:/usr/include/c++/8/bits/stl_algo.h ****    *
4206:/usr/include/c++/8/bits/stl_algo.h ****    *  Searches the range @p [__first,__last) for @p count consecutive elements
4207:/usr/include/c++/8/bits/stl_algo.h ****    *  equal to @p __val.
4208:/usr/include/c++/8/bits/stl_algo.h ****   */
4209:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer, typename _Tp>
4210:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
4211:/usr/include/c++/8/bits/stl_algo.h ****     search_n(_ForwardIterator __first, _ForwardIterator __last,
4212:/usr/include/c++/8/bits/stl_algo.h **** 	     _Integer __count, const _Tp& __val)
4213:/usr/include/c++/8/bits/stl_algo.h ****     {
4214:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
4215:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
4216:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
4217:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
4218:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
4219:/usr/include/c++/8/bits/stl_algo.h **** 
4220:/usr/include/c++/8/bits/stl_algo.h ****       return std::__search_n(__first, __last, __count,
4221:/usr/include/c++/8/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_equals_val(__val));
4222:/usr/include/c++/8/bits/stl_algo.h ****     }
4223:/usr/include/c++/8/bits/stl_algo.h **** 
4224:/usr/include/c++/8/bits/stl_algo.h **** 
4225:/usr/include/c++/8/bits/stl_algo.h ****   /**
4226:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Search a sequence for a number of consecutive values using a
4227:/usr/include/c++/8/bits/stl_algo.h ****    *         predicate.
4228:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
4229:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first        A forward iterator.
4230:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last         A forward iterator.
4231:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __count        The number of consecutive values.
4232:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __val          The value to find.
4233:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __binary_pred  A binary predicate.
4234:/usr/include/c++/8/bits/stl_algo.h ****    *  @return The first iterator @c i in the range @p
4235:/usr/include/c++/8/bits/stl_algo.h ****    *  [__first,__last-__count) such that @p
4236:/usr/include/c++/8/bits/stl_algo.h ****    *  __binary_pred(*(i+N),__val) is true for each @c N in the range
4237:/usr/include/c++/8/bits/stl_algo.h ****    *  @p [0,__count), or @p __last if no such iterator exists.
4238:/usr/include/c++/8/bits/stl_algo.h ****    *
4239:/usr/include/c++/8/bits/stl_algo.h ****    *  Searches the range @p [__first,__last) for @p __count
4240:/usr/include/c++/8/bits/stl_algo.h ****    *  consecutive elements for which the predicate returns true.
4241:/usr/include/c++/8/bits/stl_algo.h ****   */
4242:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer, typename _Tp,
4243:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _BinaryPredicate>
4244:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
4245:/usr/include/c++/8/bits/stl_algo.h ****     search_n(_ForwardIterator __first, _ForwardIterator __last,
4246:/usr/include/c++/8/bits/stl_algo.h **** 	     _Integer __count, const _Tp& __val,
4247:/usr/include/c++/8/bits/stl_algo.h **** 	     _BinaryPredicate __binary_pred)
4248:/usr/include/c++/8/bits/stl_algo.h ****     {
4249:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
4250:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
4251:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
4252:/usr/include/c++/8/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
4253:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
4254:/usr/include/c++/8/bits/stl_algo.h **** 
4255:/usr/include/c++/8/bits/stl_algo.h ****       return std::__search_n(__first, __last, __count,
4256:/usr/include/c++/8/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val));
4257:/usr/include/c++/8/bits/stl_algo.h ****     }
4258:/usr/include/c++/8/bits/stl_algo.h **** 
4259:/usr/include/c++/8/bits/stl_algo.h **** #if __cplusplus > 201402L
4260:/usr/include/c++/8/bits/stl_algo.h ****   /** @brief Search a sequence using a Searcher object.
4261:/usr/include/c++/8/bits/stl_algo.h ****    *
4262:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first        A forward iterator.
4263:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last         A forward iterator.
4264:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __searcher     A callable object.
4265:/usr/include/c++/8/bits/stl_algo.h ****    *  @return @p __searcher(__first,__last).first
4266:/usr/include/c++/8/bits/stl_algo.h ****   */
4267:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Searcher>
4268:/usr/include/c++/8/bits/stl_algo.h ****     inline _ForwardIterator
4269:/usr/include/c++/8/bits/stl_algo.h ****     search(_ForwardIterator __first, _ForwardIterator __last,
4270:/usr/include/c++/8/bits/stl_algo.h **** 	   const _Searcher& __searcher)
4271:/usr/include/c++/8/bits/stl_algo.h ****     { return __searcher(__first, __last).first; }
4272:/usr/include/c++/8/bits/stl_algo.h **** #endif
4273:/usr/include/c++/8/bits/stl_algo.h **** 
4274:/usr/include/c++/8/bits/stl_algo.h ****   /**
4275:/usr/include/c++/8/bits/stl_algo.h ****    *  @brief Perform an operation on a sequence.
4276:/usr/include/c++/8/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
4277:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __first     An input iterator.
4278:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __last      An input iterator.
4279:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __result    An output iterator.
4280:/usr/include/c++/8/bits/stl_algo.h ****    *  @param  __unary_op  A unary operator.
4281:/usr/include/c++/8/bits/stl_algo.h ****    *  @return   An output iterator equal to @p __result+(__last-__first).
4282:/usr/include/c++/8/bits/stl_algo.h ****    *
4283:/usr/include/c++/8/bits/stl_algo.h ****    *  Applies the operator to each element in the input range and assigns
4284:/usr/include/c++/8/bits/stl_algo.h ****    *  the results to successive elements of the output sequence.
4285:/usr/include/c++/8/bits/stl_algo.h ****    *  Evaluates @p *(__result+N)=unary_op(*(__first+N)) for each @c N in the
4286:/usr/include/c++/8/bits/stl_algo.h ****    *  range @p [0,__last-__first).
4287:/usr/include/c++/8/bits/stl_algo.h ****    *
4288:/usr/include/c++/8/bits/stl_algo.h ****    *  @p unary_op must not alter its argument.
4289:/usr/include/c++/8/bits/stl_algo.h ****   */
4290:/usr/include/c++/8/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
4291:/usr/include/c++/8/bits/stl_algo.h **** 	   typename _UnaryOperation>
4292:/usr/include/c++/8/bits/stl_algo.h ****     _OutputIterator
4293:/usr/include/c++/8/bits/stl_algo.h ****     transform(_InputIterator __first, _InputIterator __last,
 2235              		.loc 5 4293 5
 2236              		.cfi_startproc
 2237 0000 55       		pushq	%rbp	#
 2238              		.cfi_def_cfa_offset 16
 2239              		.cfi_offset 6, -16
 2240 0001 4889E5   		movq	%rsp, %rbp	#,
 2241              		.cfi_def_cfa_register 6
 2242 0004 53       		pushq	%rbx	#
 2243 0005 4883EC28 		subq	$40, %rsp	#,
 2244              		.cfi_offset 3, -24
 2245 0009 48897DE8 		movq	%rdi, -24(%rbp)	# __first, __first
 2246 000d 488975E0 		movq	%rsi, -32(%rbp)	# __last, __last
 2247 0011 488955D8 		movq	%rdx, -40(%rbp)	# __result, __result
 2248 0015 48894DD0 		movq	%rcx, -48(%rbp)	# __unary_op, __unary_op
 2249              	.L95:
 2250              	# /usr/include/c++/8/bits/stl_algo.h:4303:       for (; __first != __last; ++__first, (void)++__res
4294:/usr/include/c++/8/bits/stl_algo.h **** 	      _OutputIterator __result, _UnaryOperation __unary_op)
4295:/usr/include/c++/8/bits/stl_algo.h ****     {
4296:/usr/include/c++/8/bits/stl_algo.h ****       // concept requirements
4297:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
4298:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
4299:/usr/include/c++/8/bits/stl_algo.h **** 	    // "the type returned by a _UnaryOperation"
4300:/usr/include/c++/8/bits/stl_algo.h **** 	    __typeof__(__unary_op(*__first))>)
4301:/usr/include/c++/8/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
4302:/usr/include/c++/8/bits/stl_algo.h **** 
4303:/usr/include/c++/8/bits/stl_algo.h ****       for (; __first != __last; ++__first, (void)++__result)
 2251              		.loc 5 4303 22 discriminator 2
 2252 0019 488D55E0 		leaq	-32(%rbp), %rdx	#, tmp96
 2253 001d 488D45E8 		leaq	-24(%rbp), %rax	#, tmp97
 2254 0021 4889D6   		movq	%rdx, %rsi	# tmp96,
 2255 0024 4889C7   		movq	%rax, %rdi	# tmp97,
 2256 0027 E8000000 		call	_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iter
 2256      00
 2257 002c 84C0     		testb	%al, %al	# retval.7_10
 2258 002e 7446     		je	.L94	#,
 2259              	# /usr/include/c++/8/bits/stl_algo.h:4304: 	*__result = __unary_op(*__first);
4304:/usr/include/c++/8/bits/stl_algo.h **** 	*__result = __unary_op(*__first);
 2260              		.loc 5 4304 25 discriminator 1
 2261 0030 488D45E8 		leaq	-24(%rbp), %rax	#, tmp98
 2262 0034 4889C7   		movq	%rax, %rdi	# tmp98,
 2263 0037 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv
 2263      00
 2264              	# /usr/include/c++/8/bits/stl_algo.h:4304: 	*__result = __unary_op(*__first);
 2265              		.loc 5 4304 24 discriminator 1
 2266 003c 0FB600   		movzbl	(%rax), %eax	# *_1, _2
 2267 003f 0FBED0   		movsbl	%al, %edx	# _2, _3
 2268 0042 488B45D0 		movq	-48(%rbp), %rax	# __unary_op, tmp99
 2269 0046 89D7     		movl	%edx, %edi	# _3,
 2270 0048 FFD0     		call	*%rax	# tmp99
 2271              	.LVL0:
 2272 004a 89C3     		movl	%eax, %ebx	#, _4
 2273              	# /usr/include/c++/8/bits/stl_algo.h:4304: 	*__result = __unary_op(*__first);
 2274              		.loc 5 4304 2 discriminator 1
 2275 004c 488D45D8 		leaq	-40(%rbp), %rax	#, tmp100
 2276 0050 4889C7   		movq	%rax, %rdi	# tmp100,
 2277 0053 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv
 2277      00
 2278 0058 89DA     		movl	%ebx, %edx	# _4, _6
 2279 005a 8810     		movb	%dl, (%rax)	# _6, *_5
 2280              	# /usr/include/c++/8/bits/stl_algo.h:4303:       for (; __first != __last; ++__first, (void)++__res
4303:/usr/include/c++/8/bits/stl_algo.h **** 	*__result = __unary_op(*__first);
 2281              		.loc 5 4303 33 discriminator 1
 2282 005c 488D45E8 		leaq	-24(%rbp), %rax	#, tmp101
 2283 0060 4889C7   		movq	%rax, %rdi	# tmp101,
 2284 0063 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv	
 2284      00
 2285              	# /usr/include/c++/8/bits/stl_algo.h:4303:       for (; __first != __last; ++__first, (void)++__res
4303:/usr/include/c++/8/bits/stl_algo.h **** 	*__result = __unary_op(*__first);
 2286              		.loc 5 4303 50 discriminator 1
 2287 0068 488D45D8 		leaq	-40(%rbp), %rax	#, tmp102
 2288 006c 4889C7   		movq	%rax, %rdi	# tmp102,
 2289 006f E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv	
 2289      00
 2290              	# /usr/include/c++/8/bits/stl_algo.h:4303:       for (; __first != __last; ++__first, (void)++__res
4303:/usr/include/c++/8/bits/stl_algo.h **** 	*__result = __unary_op(*__first);
 2291              		.loc 5 4303 7 discriminator 1
 2292 0074 EBA3     		jmp	.L95	#
 2293              	.L94:
 2294              	# /usr/include/c++/8/bits/stl_algo.h:4305:       return __result;
4305:/usr/include/c++/8/bits/stl_algo.h ****       return __result;
 2295              		.loc 5 4305 14
 2296 0076 488B45D8 		movq	-40(%rbp), %rax	# __result, D.51434
 2297              	# /usr/include/c++/8/bits/stl_algo.h:4306:     }
4306:/usr/include/c++/8/bits/stl_algo.h ****     }
 2298              		.loc 5 4306 5
 2299 007a 4883C428 		addq	$40, %rsp	#,
 2300 007e 5B       		popq	%rbx	#
 2301 007f 5D       		popq	%rbp	#
 2302              		.cfi_def_cfa 7, 8
 2303 0080 C3       		ret	
 2304              		.cfi_endproc
 2305              	.LFE2465:
 2307              		.section	.text._ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__n
 2308              		.weak	_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_ite
 2310              	_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT
 2311              	.LFB2639:
 2312              		.file 6 "/usr/include/c++/8/bits/stl_iterator.h"
   1:/usr/include/c++/8/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/8/bits/stl_iterator.h **** 
   3:/usr/include/c++/8/bits/stl_iterator.h **** // Copyright (C) 2001-2018 Free Software Foundation, Inc.
   4:/usr/include/c++/8/bits/stl_iterator.h **** //
   5:/usr/include/c++/8/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/8/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/8/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/8/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/8/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/8/bits/stl_iterator.h **** 
  11:/usr/include/c++/8/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/8/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/8/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/8/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/8/bits/stl_iterator.h **** 
  16:/usr/include/c++/8/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/8/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/8/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/8/bits/stl_iterator.h **** 
  20:/usr/include/c++/8/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/8/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/8/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/8/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/8/bits/stl_iterator.h **** 
  25:/usr/include/c++/8/bits/stl_iterator.h **** /*
  26:/usr/include/c++/8/bits/stl_iterator.h ****  *
  27:/usr/include/c++/8/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/8/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/8/bits/stl_iterator.h ****  *
  30:/usr/include/c++/8/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/8/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/8/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/8/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/8/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/8/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/8/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/8/bits/stl_iterator.h ****  *
  38:/usr/include/c++/8/bits/stl_iterator.h ****  *
  39:/usr/include/c++/8/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/8/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/8/bits/stl_iterator.h ****  *
  42:/usr/include/c++/8/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/8/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/8/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/8/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/8/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/8/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/8/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/8/bits/stl_iterator.h ****  */
  50:/usr/include/c++/8/bits/stl_iterator.h **** 
  51:/usr/include/c++/8/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/8/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/8/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/8/bits/stl_iterator.h ****  *
  55:/usr/include/c++/8/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/8/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/8/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/8/bits/stl_iterator.h ****  */
  59:/usr/include/c++/8/bits/stl_iterator.h **** 
  60:/usr/include/c++/8/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/8/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/8/bits/stl_iterator.h **** 
  63:/usr/include/c++/8/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/8/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/usr/include/c++/8/bits/stl_iterator.h **** #include <bits/move.h>
  66:/usr/include/c++/8/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  67:/usr/include/c++/8/bits/stl_iterator.h **** 
  68:/usr/include/c++/8/bits/stl_iterator.h **** #if __cplusplus > 201402L
  69:/usr/include/c++/8/bits/stl_iterator.h **** # define __cpp_lib_array_constexpr 201603
  70:/usr/include/c++/8/bits/stl_iterator.h **** #endif
  71:/usr/include/c++/8/bits/stl_iterator.h **** 
  72:/usr/include/c++/8/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  73:/usr/include/c++/8/bits/stl_iterator.h **** {
  74:/usr/include/c++/8/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  75:/usr/include/c++/8/bits/stl_iterator.h **** 
  76:/usr/include/c++/8/bits/stl_iterator.h ****   /**
  77:/usr/include/c++/8/bits/stl_iterator.h ****    * @addtogroup iterators
  78:/usr/include/c++/8/bits/stl_iterator.h ****    * @{
  79:/usr/include/c++/8/bits/stl_iterator.h ****    */
  80:/usr/include/c++/8/bits/stl_iterator.h **** 
  81:/usr/include/c++/8/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  82:/usr/include/c++/8/bits/stl_iterator.h ****   /**
  83:/usr/include/c++/8/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  84:/usr/include/c++/8/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  85:/usr/include/c++/8/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  86:/usr/include/c++/8/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  87:/usr/include/c++/8/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  88:/usr/include/c++/8/bits/stl_iterator.h ****    *  @code
  89:/usr/include/c++/8/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  90:/usr/include/c++/8/bits/stl_iterator.h ****    *  @endcode
  91:/usr/include/c++/8/bits/stl_iterator.h ****    *
  92:/usr/include/c++/8/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  93:/usr/include/c++/8/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  94:/usr/include/c++/8/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  95:/usr/include/c++/8/bits/stl_iterator.h ****    *
  96:/usr/include/c++/8/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
  97:/usr/include/c++/8/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
  98:/usr/include/c++/8/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
  99:/usr/include/c++/8/bits/stl_iterator.h ****   */
 100:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 101:/usr/include/c++/8/bits/stl_iterator.h ****     class reverse_iterator
 102:/usr/include/c++/8/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 103:/usr/include/c++/8/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 104:/usr/include/c++/8/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 105:/usr/include/c++/8/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 106:/usr/include/c++/8/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 107:/usr/include/c++/8/bits/stl_iterator.h ****     {
 108:/usr/include/c++/8/bits/stl_iterator.h ****     protected:
 109:/usr/include/c++/8/bits/stl_iterator.h ****       _Iterator current;
 110:/usr/include/c++/8/bits/stl_iterator.h **** 
 111:/usr/include/c++/8/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 112:/usr/include/c++/8/bits/stl_iterator.h **** 
 113:/usr/include/c++/8/bits/stl_iterator.h ****     public:
 114:/usr/include/c++/8/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 115:/usr/include/c++/8/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 116:/usr/include/c++/8/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 117:/usr/include/c++/8/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 118:/usr/include/c++/8/bits/stl_iterator.h **** 
 119:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 120:/usr/include/c++/8/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 121:/usr/include/c++/8/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 122:/usr/include/c++/8/bits/stl_iterator.h ****       */
 123:/usr/include/c++/8/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 124:/usr/include/c++/8/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 125:/usr/include/c++/8/bits/stl_iterator.h ****       // 1012. reverse_iterator default ctor should value initialize
 126:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 127:/usr/include/c++/8/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 128:/usr/include/c++/8/bits/stl_iterator.h **** 
 129:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 130:/usr/include/c++/8/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 131:/usr/include/c++/8/bits/stl_iterator.h ****       */
 132:/usr/include/c++/8/bits/stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 133:/usr/include/c++/8/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 134:/usr/include/c++/8/bits/stl_iterator.h **** 
 135:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 136:/usr/include/c++/8/bits/stl_iterator.h ****        *  The copy constructor is normal.
 137:/usr/include/c++/8/bits/stl_iterator.h ****       */
 138:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 139:/usr/include/c++/8/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 140:/usr/include/c++/8/bits/stl_iterator.h ****       : current(__x.current) { }
 141:/usr/include/c++/8/bits/stl_iterator.h **** 
 142:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 143:/usr/include/c++/8/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 144:/usr/include/c++/8/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 145:/usr/include/c++/8/bits/stl_iterator.h ****       */
 146:/usr/include/c++/8/bits/stl_iterator.h ****       template<typename _Iter>
 147:/usr/include/c++/8/bits/stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 148:/usr/include/c++/8/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 149:/usr/include/c++/8/bits/stl_iterator.h **** 	: current(__x.base()) { }
 150:/usr/include/c++/8/bits/stl_iterator.h **** 
 151:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 152:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 153:/usr/include/c++/8/bits/stl_iterator.h ****       */
 154:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 155:/usr/include/c++/8/bits/stl_iterator.h ****       base() const
 156:/usr/include/c++/8/bits/stl_iterator.h ****       { return current; }
 157:/usr/include/c++/8/bits/stl_iterator.h **** 
 158:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 159:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 160:/usr/include/c++/8/bits/stl_iterator.h ****        *
 161:/usr/include/c++/8/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 162:/usr/include/c++/8/bits/stl_iterator.h ****        *
 163:/usr/include/c++/8/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 164:/usr/include/c++/8/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 165:/usr/include/c++/8/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 166:/usr/include/c++/8/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 167:/usr/include/c++/8/bits/stl_iterator.h ****       */
 168:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 169:/usr/include/c++/8/bits/stl_iterator.h ****       operator*() const
 170:/usr/include/c++/8/bits/stl_iterator.h ****       {
 171:/usr/include/c++/8/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 172:/usr/include/c++/8/bits/stl_iterator.h **** 	return *--__tmp;
 173:/usr/include/c++/8/bits/stl_iterator.h ****       }
 174:/usr/include/c++/8/bits/stl_iterator.h **** 
 175:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 176:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 177:/usr/include/c++/8/bits/stl_iterator.h ****        *
 178:/usr/include/c++/8/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 179:/usr/include/c++/8/bits/stl_iterator.h ****       */
 180:/usr/include/c++/8/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/usr/include/c++/8/bits/stl_iterator.h ****       // 2188. Reverse iterator does not fully support targets that overload &
 182:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 183:/usr/include/c++/8/bits/stl_iterator.h ****       operator->() const
 184:/usr/include/c++/8/bits/stl_iterator.h ****       { return std::__addressof(operator*()); }
 185:/usr/include/c++/8/bits/stl_iterator.h **** 
 186:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 187:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  @c *this
 188:/usr/include/c++/8/bits/stl_iterator.h ****        *
 189:/usr/include/c++/8/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 190:/usr/include/c++/8/bits/stl_iterator.h ****       */
 191:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 192:/usr/include/c++/8/bits/stl_iterator.h ****       operator++()
 193:/usr/include/c++/8/bits/stl_iterator.h ****       {
 194:/usr/include/c++/8/bits/stl_iterator.h **** 	--current;
 195:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 196:/usr/include/c++/8/bits/stl_iterator.h ****       }
 197:/usr/include/c++/8/bits/stl_iterator.h **** 
 198:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 199:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 200:/usr/include/c++/8/bits/stl_iterator.h ****        *
 201:/usr/include/c++/8/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 202:/usr/include/c++/8/bits/stl_iterator.h ****       */
 203:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 204:/usr/include/c++/8/bits/stl_iterator.h ****       operator++(int)
 205:/usr/include/c++/8/bits/stl_iterator.h ****       {
 206:/usr/include/c++/8/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 207:/usr/include/c++/8/bits/stl_iterator.h **** 	--current;
 208:/usr/include/c++/8/bits/stl_iterator.h **** 	return __tmp;
 209:/usr/include/c++/8/bits/stl_iterator.h ****       }
 210:/usr/include/c++/8/bits/stl_iterator.h **** 
 211:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 212:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  @c *this
 213:/usr/include/c++/8/bits/stl_iterator.h ****        *
 214:/usr/include/c++/8/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 215:/usr/include/c++/8/bits/stl_iterator.h ****       */
 216:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 217:/usr/include/c++/8/bits/stl_iterator.h ****       operator--()
 218:/usr/include/c++/8/bits/stl_iterator.h ****       {
 219:/usr/include/c++/8/bits/stl_iterator.h **** 	++current;
 220:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 221:/usr/include/c++/8/bits/stl_iterator.h ****       }
 222:/usr/include/c++/8/bits/stl_iterator.h **** 
 223:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 224:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 225:/usr/include/c++/8/bits/stl_iterator.h ****        *
 226:/usr/include/c++/8/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 227:/usr/include/c++/8/bits/stl_iterator.h ****       */
 228:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 229:/usr/include/c++/8/bits/stl_iterator.h ****       operator--(int)
 230:/usr/include/c++/8/bits/stl_iterator.h ****       {
 231:/usr/include/c++/8/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 232:/usr/include/c++/8/bits/stl_iterator.h **** 	++current;
 233:/usr/include/c++/8/bits/stl_iterator.h **** 	return __tmp;
 234:/usr/include/c++/8/bits/stl_iterator.h ****       }
 235:/usr/include/c++/8/bits/stl_iterator.h **** 
 236:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 237:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 238:/usr/include/c++/8/bits/stl_iterator.h ****        *
 239:/usr/include/c++/8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 240:/usr/include/c++/8/bits/stl_iterator.h ****       */
 241:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 242:/usr/include/c++/8/bits/stl_iterator.h ****       operator+(difference_type __n) const
 243:/usr/include/c++/8/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 244:/usr/include/c++/8/bits/stl_iterator.h **** 
 245:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 246:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  *this
 247:/usr/include/c++/8/bits/stl_iterator.h ****        *
 248:/usr/include/c++/8/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 249:/usr/include/c++/8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 250:/usr/include/c++/8/bits/stl_iterator.h ****       */
 251:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 252:/usr/include/c++/8/bits/stl_iterator.h ****       operator+=(difference_type __n)
 253:/usr/include/c++/8/bits/stl_iterator.h ****       {
 254:/usr/include/c++/8/bits/stl_iterator.h **** 	current -= __n;
 255:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 256:/usr/include/c++/8/bits/stl_iterator.h ****       }
 257:/usr/include/c++/8/bits/stl_iterator.h **** 
 258:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 259:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 260:/usr/include/c++/8/bits/stl_iterator.h ****        *
 261:/usr/include/c++/8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 262:/usr/include/c++/8/bits/stl_iterator.h ****       */
 263:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 264:/usr/include/c++/8/bits/stl_iterator.h ****       operator-(difference_type __n) const
 265:/usr/include/c++/8/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 266:/usr/include/c++/8/bits/stl_iterator.h **** 
 267:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 268:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  *this
 269:/usr/include/c++/8/bits/stl_iterator.h ****        *
 270:/usr/include/c++/8/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 271:/usr/include/c++/8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 272:/usr/include/c++/8/bits/stl_iterator.h ****       */
 273:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 274:/usr/include/c++/8/bits/stl_iterator.h ****       operator-=(difference_type __n)
 275:/usr/include/c++/8/bits/stl_iterator.h ****       {
 276:/usr/include/c++/8/bits/stl_iterator.h **** 	current += __n;
 277:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 278:/usr/include/c++/8/bits/stl_iterator.h ****       }
 279:/usr/include/c++/8/bits/stl_iterator.h **** 
 280:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 281:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 282:/usr/include/c++/8/bits/stl_iterator.h ****        *
 283:/usr/include/c++/8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 284:/usr/include/c++/8/bits/stl_iterator.h ****       */
 285:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 286:/usr/include/c++/8/bits/stl_iterator.h ****       operator[](difference_type __n) const
 287:/usr/include/c++/8/bits/stl_iterator.h ****       { return *(*this + __n); }
 288:/usr/include/c++/8/bits/stl_iterator.h ****     };
 289:/usr/include/c++/8/bits/stl_iterator.h **** 
 290:/usr/include/c++/8/bits/stl_iterator.h ****   //@{
 291:/usr/include/c++/8/bits/stl_iterator.h ****   /**
 292:/usr/include/c++/8/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 293:/usr/include/c++/8/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 294:/usr/include/c++/8/bits/stl_iterator.h ****    *  @return  A simple bool.
 295:/usr/include/c++/8/bits/stl_iterator.h ****    *
 296:/usr/include/c++/8/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 297:/usr/include/c++/8/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 298:/usr/include/c++/8/bits/stl_iterator.h ****    *
 299:/usr/include/c++/8/bits/stl_iterator.h ****   */
 300:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 301:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 302:/usr/include/c++/8/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 303:/usr/include/c++/8/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 304:/usr/include/c++/8/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 305:/usr/include/c++/8/bits/stl_iterator.h **** 
 306:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 307:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 308:/usr/include/c++/8/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 309:/usr/include/c++/8/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 310:/usr/include/c++/8/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 311:/usr/include/c++/8/bits/stl_iterator.h **** 
 312:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 313:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 314:/usr/include/c++/8/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 315:/usr/include/c++/8/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 316:/usr/include/c++/8/bits/stl_iterator.h ****     { return !(__x == __y); }
 317:/usr/include/c++/8/bits/stl_iterator.h **** 
 318:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 319:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 320:/usr/include/c++/8/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 321:/usr/include/c++/8/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 322:/usr/include/c++/8/bits/stl_iterator.h ****     { return __y < __x; }
 323:/usr/include/c++/8/bits/stl_iterator.h **** 
 324:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 325:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 326:/usr/include/c++/8/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 327:/usr/include/c++/8/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 328:/usr/include/c++/8/bits/stl_iterator.h ****     { return !(__y < __x); }
 329:/usr/include/c++/8/bits/stl_iterator.h **** 
 330:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 331:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 332:/usr/include/c++/8/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 333:/usr/include/c++/8/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 334:/usr/include/c++/8/bits/stl_iterator.h ****     { return !(__x < __y); }
 335:/usr/include/c++/8/bits/stl_iterator.h **** 
 336:/usr/include/c++/8/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 337:/usr/include/c++/8/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 338:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 339:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 340:/usr/include/c++/8/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 341:/usr/include/c++/8/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 342:/usr/include/c++/8/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 343:/usr/include/c++/8/bits/stl_iterator.h **** 
 344:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 345:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 346:/usr/include/c++/8/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 347:/usr/include/c++/8/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 348:/usr/include/c++/8/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 349:/usr/include/c++/8/bits/stl_iterator.h **** 
 350:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 351:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 352:/usr/include/c++/8/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 353:/usr/include/c++/8/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 354:/usr/include/c++/8/bits/stl_iterator.h ****     { return !(__x == __y); }
 355:/usr/include/c++/8/bits/stl_iterator.h **** 
 356:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 357:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 358:/usr/include/c++/8/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 359:/usr/include/c++/8/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 360:/usr/include/c++/8/bits/stl_iterator.h ****     { return __y < __x; }
 361:/usr/include/c++/8/bits/stl_iterator.h **** 
 362:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 363:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 364:/usr/include/c++/8/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 365:/usr/include/c++/8/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 366:/usr/include/c++/8/bits/stl_iterator.h ****     { return !(__y < __x); }
 367:/usr/include/c++/8/bits/stl_iterator.h **** 
 368:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 369:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 370:/usr/include/c++/8/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 371:/usr/include/c++/8/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 372:/usr/include/c++/8/bits/stl_iterator.h ****     { return !(__x < __y); }
 373:/usr/include/c++/8/bits/stl_iterator.h ****   //@}
 374:/usr/include/c++/8/bits/stl_iterator.h **** 
 375:/usr/include/c++/8/bits/stl_iterator.h **** #if __cplusplus < 201103L
 376:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 377:/usr/include/c++/8/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 378:/usr/include/c++/8/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 379:/usr/include/c++/8/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 380:/usr/include/c++/8/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 381:/usr/include/c++/8/bits/stl_iterator.h **** 
 382:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 383:/usr/include/c++/8/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 384:/usr/include/c++/8/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 385:/usr/include/c++/8/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 386:/usr/include/c++/8/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 387:/usr/include/c++/8/bits/stl_iterator.h **** #else
 388:/usr/include/c++/8/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 389:/usr/include/c++/8/bits/stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 390:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 391:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
 392:/usr/include/c++/8/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 393:/usr/include/c++/8/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 394:/usr/include/c++/8/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 395:/usr/include/c++/8/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 396:/usr/include/c++/8/bits/stl_iterator.h **** #endif
 397:/usr/include/c++/8/bits/stl_iterator.h **** 
 398:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 399:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 400:/usr/include/c++/8/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 401:/usr/include/c++/8/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 402:/usr/include/c++/8/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 403:/usr/include/c++/8/bits/stl_iterator.h **** 
 404:/usr/include/c++/8/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 405:/usr/include/c++/8/bits/stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++03 mode too.
 406:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 407:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 408:/usr/include/c++/8/bits/stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 409:/usr/include/c++/8/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 410:/usr/include/c++/8/bits/stl_iterator.h **** 
 411:/usr/include/c++/8/bits/stl_iterator.h **** # if __cplusplus > 201103L
 412:/usr/include/c++/8/bits/stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402
 413:/usr/include/c++/8/bits/stl_iterator.h **** 
 414:/usr/include/c++/8/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 415:/usr/include/c++/8/bits/stl_iterator.h ****   // DR 2285. make_reverse_iterator
 416:/usr/include/c++/8/bits/stl_iterator.h ****   /// Generator function for reverse_iterator.
 417:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 418:/usr/include/c++/8/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 419:/usr/include/c++/8/bits/stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 420:/usr/include/c++/8/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 421:/usr/include/c++/8/bits/stl_iterator.h **** # endif
 422:/usr/include/c++/8/bits/stl_iterator.h **** #endif
 423:/usr/include/c++/8/bits/stl_iterator.h **** 
 424:/usr/include/c++/8/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 425:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 426:/usr/include/c++/8/bits/stl_iterator.h ****     auto
 427:/usr/include/c++/8/bits/stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 428:/usr/include/c++/8/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 429:/usr/include/c++/8/bits/stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 430:/usr/include/c++/8/bits/stl_iterator.h **** 
 431:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 432:/usr/include/c++/8/bits/stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 433:/usr/include/c++/8/bits/stl_iterator.h ****       : __is_move_iterator<_Iterator>
 434:/usr/include/c++/8/bits/stl_iterator.h ****     { };
 435:/usr/include/c++/8/bits/stl_iterator.h **** 
 436:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator>
 437:/usr/include/c++/8/bits/stl_iterator.h ****     auto
 438:/usr/include/c++/8/bits/stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 439:/usr/include/c++/8/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 440:/usr/include/c++/8/bits/stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 441:/usr/include/c++/8/bits/stl_iterator.h **** #endif
 442:/usr/include/c++/8/bits/stl_iterator.h **** 
 443:/usr/include/c++/8/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 444:/usr/include/c++/8/bits/stl_iterator.h ****   /**
 445:/usr/include/c++/8/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 446:/usr/include/c++/8/bits/stl_iterator.h ****    *
 447:/usr/include/c++/8/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 448:/usr/include/c++/8/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 449:/usr/include/c++/8/bits/stl_iterator.h ****    *  push_back.
 450:/usr/include/c++/8/bits/stl_iterator.h ****    *
 451:/usr/include/c++/8/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 452:/usr/include/c++/8/bits/stl_iterator.h ****    *  save typing.
 453:/usr/include/c++/8/bits/stl_iterator.h ****   */
 454:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Container>
 455:/usr/include/c++/8/bits/stl_iterator.h ****     class back_insert_iterator
 456:/usr/include/c++/8/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 457:/usr/include/c++/8/bits/stl_iterator.h ****     {
 458:/usr/include/c++/8/bits/stl_iterator.h ****     protected:
 459:/usr/include/c++/8/bits/stl_iterator.h ****       _Container* container;
 460:/usr/include/c++/8/bits/stl_iterator.h **** 
 461:/usr/include/c++/8/bits/stl_iterator.h ****     public:
 462:/usr/include/c++/8/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 463:/usr/include/c++/8/bits/stl_iterator.h ****       typedef _Container          container_type;
 464:/usr/include/c++/8/bits/stl_iterator.h **** 
 465:/usr/include/c++/8/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 466:/usr/include/c++/8/bits/stl_iterator.h ****       explicit
 467:/usr/include/c++/8/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x)
 468:/usr/include/c++/8/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 469:/usr/include/c++/8/bits/stl_iterator.h **** 
 470:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 471:/usr/include/c++/8/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 472:/usr/include/c++/8/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 473:/usr/include/c++/8/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 474:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 475:/usr/include/c++/8/bits/stl_iterator.h ****        *
 476:/usr/include/c++/8/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 477:/usr/include/c++/8/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 478:/usr/include/c++/8/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 479:/usr/include/c++/8/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 480:/usr/include/c++/8/bits/stl_iterator.h ****       */
 481:/usr/include/c++/8/bits/stl_iterator.h **** #if __cplusplus < 201103L
 482:/usr/include/c++/8/bits/stl_iterator.h ****       back_insert_iterator&
 483:/usr/include/c++/8/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 484:/usr/include/c++/8/bits/stl_iterator.h ****       {
 485:/usr/include/c++/8/bits/stl_iterator.h **** 	container->push_back(__value);
 486:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 487:/usr/include/c++/8/bits/stl_iterator.h ****       }
 488:/usr/include/c++/8/bits/stl_iterator.h **** #else
 489:/usr/include/c++/8/bits/stl_iterator.h ****       back_insert_iterator&
 490:/usr/include/c++/8/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 491:/usr/include/c++/8/bits/stl_iterator.h ****       {
 492:/usr/include/c++/8/bits/stl_iterator.h **** 	container->push_back(__value);
 493:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 494:/usr/include/c++/8/bits/stl_iterator.h ****       }
 495:/usr/include/c++/8/bits/stl_iterator.h **** 
 496:/usr/include/c++/8/bits/stl_iterator.h ****       back_insert_iterator&
 497:/usr/include/c++/8/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 498:/usr/include/c++/8/bits/stl_iterator.h ****       {
 499:/usr/include/c++/8/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 500:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 501:/usr/include/c++/8/bits/stl_iterator.h ****       }
 502:/usr/include/c++/8/bits/stl_iterator.h **** #endif
 503:/usr/include/c++/8/bits/stl_iterator.h **** 
 504:/usr/include/c++/8/bits/stl_iterator.h ****       /// Simply returns *this.
 505:/usr/include/c++/8/bits/stl_iterator.h ****       back_insert_iterator&
 506:/usr/include/c++/8/bits/stl_iterator.h ****       operator*()
 507:/usr/include/c++/8/bits/stl_iterator.h ****       { return *this; }
 508:/usr/include/c++/8/bits/stl_iterator.h **** 
 509:/usr/include/c++/8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 510:/usr/include/c++/8/bits/stl_iterator.h ****       back_insert_iterator&
 511:/usr/include/c++/8/bits/stl_iterator.h ****       operator++()
 512:/usr/include/c++/8/bits/stl_iterator.h ****       { return *this; }
 513:/usr/include/c++/8/bits/stl_iterator.h **** 
 514:/usr/include/c++/8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 515:/usr/include/c++/8/bits/stl_iterator.h ****       back_insert_iterator
 516:/usr/include/c++/8/bits/stl_iterator.h ****       operator++(int)
 517:/usr/include/c++/8/bits/stl_iterator.h ****       { return *this; }
 518:/usr/include/c++/8/bits/stl_iterator.h ****     };
 519:/usr/include/c++/8/bits/stl_iterator.h **** 
 520:/usr/include/c++/8/bits/stl_iterator.h ****   /**
 521:/usr/include/c++/8/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 522:/usr/include/c++/8/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 523:/usr/include/c++/8/bits/stl_iterator.h ****    *
 524:/usr/include/c++/8/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 525:/usr/include/c++/8/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 526:/usr/include/c++/8/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 527:/usr/include/c++/8/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 528:/usr/include/c++/8/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 529:/usr/include/c++/8/bits/stl_iterator.h ****    *  types for you.
 530:/usr/include/c++/8/bits/stl_iterator.h ****   */
 531:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Container>
 532:/usr/include/c++/8/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 533:/usr/include/c++/8/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 534:/usr/include/c++/8/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 535:/usr/include/c++/8/bits/stl_iterator.h **** 
 536:/usr/include/c++/8/bits/stl_iterator.h ****   /**
 537:/usr/include/c++/8/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 538:/usr/include/c++/8/bits/stl_iterator.h ****    *
 539:/usr/include/c++/8/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 540:/usr/include/c++/8/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 541:/usr/include/c++/8/bits/stl_iterator.h ****    *  push_front.
 542:/usr/include/c++/8/bits/stl_iterator.h ****    *
 543:/usr/include/c++/8/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 544:/usr/include/c++/8/bits/stl_iterator.h ****    *  save typing.
 545:/usr/include/c++/8/bits/stl_iterator.h ****   */
 546:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Container>
 547:/usr/include/c++/8/bits/stl_iterator.h ****     class front_insert_iterator
 548:/usr/include/c++/8/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 549:/usr/include/c++/8/bits/stl_iterator.h ****     {
 550:/usr/include/c++/8/bits/stl_iterator.h ****     protected:
 551:/usr/include/c++/8/bits/stl_iterator.h ****       _Container* container;
 552:/usr/include/c++/8/bits/stl_iterator.h **** 
 553:/usr/include/c++/8/bits/stl_iterator.h ****     public:
 554:/usr/include/c++/8/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 555:/usr/include/c++/8/bits/stl_iterator.h ****       typedef _Container          container_type;
 556:/usr/include/c++/8/bits/stl_iterator.h **** 
 557:/usr/include/c++/8/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 558:/usr/include/c++/8/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x)
 559:/usr/include/c++/8/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 560:/usr/include/c++/8/bits/stl_iterator.h **** 
 561:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 562:/usr/include/c++/8/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 563:/usr/include/c++/8/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 564:/usr/include/c++/8/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 565:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 566:/usr/include/c++/8/bits/stl_iterator.h ****        *
 567:/usr/include/c++/8/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 568:/usr/include/c++/8/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 569:/usr/include/c++/8/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 570:/usr/include/c++/8/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 571:/usr/include/c++/8/bits/stl_iterator.h ****       */
 572:/usr/include/c++/8/bits/stl_iterator.h **** #if __cplusplus < 201103L
 573:/usr/include/c++/8/bits/stl_iterator.h ****       front_insert_iterator&
 574:/usr/include/c++/8/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 575:/usr/include/c++/8/bits/stl_iterator.h ****       {
 576:/usr/include/c++/8/bits/stl_iterator.h **** 	container->push_front(__value);
 577:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 578:/usr/include/c++/8/bits/stl_iterator.h ****       }
 579:/usr/include/c++/8/bits/stl_iterator.h **** #else
 580:/usr/include/c++/8/bits/stl_iterator.h ****       front_insert_iterator&
 581:/usr/include/c++/8/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 582:/usr/include/c++/8/bits/stl_iterator.h ****       {
 583:/usr/include/c++/8/bits/stl_iterator.h **** 	container->push_front(__value);
 584:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 585:/usr/include/c++/8/bits/stl_iterator.h ****       }
 586:/usr/include/c++/8/bits/stl_iterator.h **** 
 587:/usr/include/c++/8/bits/stl_iterator.h ****       front_insert_iterator&
 588:/usr/include/c++/8/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 589:/usr/include/c++/8/bits/stl_iterator.h ****       {
 590:/usr/include/c++/8/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 591:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 592:/usr/include/c++/8/bits/stl_iterator.h ****       }
 593:/usr/include/c++/8/bits/stl_iterator.h **** #endif
 594:/usr/include/c++/8/bits/stl_iterator.h **** 
 595:/usr/include/c++/8/bits/stl_iterator.h ****       /// Simply returns *this.
 596:/usr/include/c++/8/bits/stl_iterator.h ****       front_insert_iterator&
 597:/usr/include/c++/8/bits/stl_iterator.h ****       operator*()
 598:/usr/include/c++/8/bits/stl_iterator.h ****       { return *this; }
 599:/usr/include/c++/8/bits/stl_iterator.h **** 
 600:/usr/include/c++/8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 601:/usr/include/c++/8/bits/stl_iterator.h ****       front_insert_iterator&
 602:/usr/include/c++/8/bits/stl_iterator.h ****       operator++()
 603:/usr/include/c++/8/bits/stl_iterator.h ****       { return *this; }
 604:/usr/include/c++/8/bits/stl_iterator.h **** 
 605:/usr/include/c++/8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 606:/usr/include/c++/8/bits/stl_iterator.h ****       front_insert_iterator
 607:/usr/include/c++/8/bits/stl_iterator.h ****       operator++(int)
 608:/usr/include/c++/8/bits/stl_iterator.h ****       { return *this; }
 609:/usr/include/c++/8/bits/stl_iterator.h ****     };
 610:/usr/include/c++/8/bits/stl_iterator.h **** 
 611:/usr/include/c++/8/bits/stl_iterator.h ****   /**
 612:/usr/include/c++/8/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 613:/usr/include/c++/8/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 614:/usr/include/c++/8/bits/stl_iterator.h ****    *
 615:/usr/include/c++/8/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 616:/usr/include/c++/8/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 617:/usr/include/c++/8/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 618:/usr/include/c++/8/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 619:/usr/include/c++/8/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 620:/usr/include/c++/8/bits/stl_iterator.h ****    *  types for you.
 621:/usr/include/c++/8/bits/stl_iterator.h ****   */
 622:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Container>
 623:/usr/include/c++/8/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 624:/usr/include/c++/8/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 625:/usr/include/c++/8/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 626:/usr/include/c++/8/bits/stl_iterator.h **** 
 627:/usr/include/c++/8/bits/stl_iterator.h ****   /**
 628:/usr/include/c++/8/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 629:/usr/include/c++/8/bits/stl_iterator.h ****    *
 630:/usr/include/c++/8/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 631:/usr/include/c++/8/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 632:/usr/include/c++/8/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 633:/usr/include/c++/8/bits/stl_iterator.h ****    *  position.
 634:/usr/include/c++/8/bits/stl_iterator.h ****    *
 635:/usr/include/c++/8/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 636:/usr/include/c++/8/bits/stl_iterator.h ****    *  %iterator's position.)
 637:/usr/include/c++/8/bits/stl_iterator.h ****    *
 638:/usr/include/c++/8/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 639:/usr/include/c++/8/bits/stl_iterator.h ****    *  save typing.
 640:/usr/include/c++/8/bits/stl_iterator.h ****   */
 641:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Container>
 642:/usr/include/c++/8/bits/stl_iterator.h ****     class insert_iterator
 643:/usr/include/c++/8/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 644:/usr/include/c++/8/bits/stl_iterator.h ****     {
 645:/usr/include/c++/8/bits/stl_iterator.h ****     protected:
 646:/usr/include/c++/8/bits/stl_iterator.h ****       _Container* container;
 647:/usr/include/c++/8/bits/stl_iterator.h ****       typename _Container::iterator iter;
 648:/usr/include/c++/8/bits/stl_iterator.h **** 
 649:/usr/include/c++/8/bits/stl_iterator.h ****     public:
 650:/usr/include/c++/8/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 651:/usr/include/c++/8/bits/stl_iterator.h ****       typedef _Container          container_type;
 652:/usr/include/c++/8/bits/stl_iterator.h **** 
 653:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 654:/usr/include/c++/8/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 655:/usr/include/c++/8/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 656:/usr/include/c++/8/bits/stl_iterator.h ****       */
 657:/usr/include/c++/8/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 658:/usr/include/c++/8/bits/stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 659:/usr/include/c++/8/bits/stl_iterator.h **** 
 660:/usr/include/c++/8/bits/stl_iterator.h ****       /**
 661:/usr/include/c++/8/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 662:/usr/include/c++/8/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 663:/usr/include/c++/8/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 664:/usr/include/c++/8/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 665:/usr/include/c++/8/bits/stl_iterator.h ****        *
 666:/usr/include/c++/8/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 667:/usr/include/c++/8/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 668:/usr/include/c++/8/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 669:/usr/include/c++/8/bits/stl_iterator.h ****        *
 670:/usr/include/c++/8/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 671:/usr/include/c++/8/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 672:/usr/include/c++/8/bits/stl_iterator.h ****        *  @code
 673:/usr/include/c++/8/bits/stl_iterator.h ****        *     // vector v contains A and Z
 674:/usr/include/c++/8/bits/stl_iterator.h ****        *
 675:/usr/include/c++/8/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 676:/usr/include/c++/8/bits/stl_iterator.h ****        *     i = 1;
 677:/usr/include/c++/8/bits/stl_iterator.h ****        *     i = 2;
 678:/usr/include/c++/8/bits/stl_iterator.h ****        *     i = 3;
 679:/usr/include/c++/8/bits/stl_iterator.h ****        *
 680:/usr/include/c++/8/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 681:/usr/include/c++/8/bits/stl_iterator.h ****        *  @endcode
 682:/usr/include/c++/8/bits/stl_iterator.h ****       */
 683:/usr/include/c++/8/bits/stl_iterator.h **** #if __cplusplus < 201103L
 684:/usr/include/c++/8/bits/stl_iterator.h ****       insert_iterator&
 685:/usr/include/c++/8/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 686:/usr/include/c++/8/bits/stl_iterator.h ****       {
 687:/usr/include/c++/8/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 688:/usr/include/c++/8/bits/stl_iterator.h **** 	++iter;
 689:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 690:/usr/include/c++/8/bits/stl_iterator.h ****       }
 691:/usr/include/c++/8/bits/stl_iterator.h **** #else
 692:/usr/include/c++/8/bits/stl_iterator.h ****       insert_iterator&
 693:/usr/include/c++/8/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 694:/usr/include/c++/8/bits/stl_iterator.h ****       {
 695:/usr/include/c++/8/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 696:/usr/include/c++/8/bits/stl_iterator.h **** 	++iter;
 697:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 698:/usr/include/c++/8/bits/stl_iterator.h ****       }
 699:/usr/include/c++/8/bits/stl_iterator.h **** 
 700:/usr/include/c++/8/bits/stl_iterator.h ****       insert_iterator&
 701:/usr/include/c++/8/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 702:/usr/include/c++/8/bits/stl_iterator.h ****       {
 703:/usr/include/c++/8/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 704:/usr/include/c++/8/bits/stl_iterator.h **** 	++iter;
 705:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 706:/usr/include/c++/8/bits/stl_iterator.h ****       }
 707:/usr/include/c++/8/bits/stl_iterator.h **** #endif
 708:/usr/include/c++/8/bits/stl_iterator.h **** 
 709:/usr/include/c++/8/bits/stl_iterator.h ****       /// Simply returns *this.
 710:/usr/include/c++/8/bits/stl_iterator.h ****       insert_iterator&
 711:/usr/include/c++/8/bits/stl_iterator.h ****       operator*()
 712:/usr/include/c++/8/bits/stl_iterator.h ****       { return *this; }
 713:/usr/include/c++/8/bits/stl_iterator.h **** 
 714:/usr/include/c++/8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 715:/usr/include/c++/8/bits/stl_iterator.h ****       insert_iterator&
 716:/usr/include/c++/8/bits/stl_iterator.h ****       operator++()
 717:/usr/include/c++/8/bits/stl_iterator.h ****       { return *this; }
 718:/usr/include/c++/8/bits/stl_iterator.h **** 
 719:/usr/include/c++/8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 720:/usr/include/c++/8/bits/stl_iterator.h ****       insert_iterator&
 721:/usr/include/c++/8/bits/stl_iterator.h ****       operator++(int)
 722:/usr/include/c++/8/bits/stl_iterator.h ****       { return *this; }
 723:/usr/include/c++/8/bits/stl_iterator.h ****     };
 724:/usr/include/c++/8/bits/stl_iterator.h **** 
 725:/usr/include/c++/8/bits/stl_iterator.h ****   /**
 726:/usr/include/c++/8/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 727:/usr/include/c++/8/bits/stl_iterator.h ****    *  @param __i  An iterator into the container.
 728:/usr/include/c++/8/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 729:/usr/include/c++/8/bits/stl_iterator.h ****    *
 730:/usr/include/c++/8/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 731:/usr/include/c++/8/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 732:/usr/include/c++/8/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 733:/usr/include/c++/8/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 734:/usr/include/c++/8/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 735:/usr/include/c++/8/bits/stl_iterator.h ****    *  types for you.
 736:/usr/include/c++/8/bits/stl_iterator.h ****   */
 737:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 738:/usr/include/c++/8/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 739:/usr/include/c++/8/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 740:/usr/include/c++/8/bits/stl_iterator.h ****     {
 741:/usr/include/c++/8/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 742:/usr/include/c++/8/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 743:/usr/include/c++/8/bits/stl_iterator.h ****     }
 744:/usr/include/c++/8/bits/stl_iterator.h **** 
 745:/usr/include/c++/8/bits/stl_iterator.h ****   // @} group iterators
 746:/usr/include/c++/8/bits/stl_iterator.h **** 
 747:/usr/include/c++/8/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 748:/usr/include/c++/8/bits/stl_iterator.h **** } // namespace
 749:/usr/include/c++/8/bits/stl_iterator.h **** 
 750:/usr/include/c++/8/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 751:/usr/include/c++/8/bits/stl_iterator.h **** {
 752:/usr/include/c++/8/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 753:/usr/include/c++/8/bits/stl_iterator.h **** 
 754:/usr/include/c++/8/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 755:/usr/include/c++/8/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 756:/usr/include/c++/8/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 757:/usr/include/c++/8/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 758:/usr/include/c++/8/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 759:/usr/include/c++/8/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 760:/usr/include/c++/8/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 761:/usr/include/c++/8/bits/stl_iterator.h ****   using std::iterator_traits;
 762:/usr/include/c++/8/bits/stl_iterator.h ****   using std::iterator;
 763:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 764:/usr/include/c++/8/bits/stl_iterator.h ****     class __normal_iterator
 765:/usr/include/c++/8/bits/stl_iterator.h ****     {
 766:/usr/include/c++/8/bits/stl_iterator.h ****     protected:
 767:/usr/include/c++/8/bits/stl_iterator.h ****       _Iterator _M_current;
 768:/usr/include/c++/8/bits/stl_iterator.h **** 
 769:/usr/include/c++/8/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 770:/usr/include/c++/8/bits/stl_iterator.h **** 
 771:/usr/include/c++/8/bits/stl_iterator.h ****     public:
 772:/usr/include/c++/8/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 773:/usr/include/c++/8/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 774:/usr/include/c++/8/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 775:/usr/include/c++/8/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 776:/usr/include/c++/8/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 777:/usr/include/c++/8/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 778:/usr/include/c++/8/bits/stl_iterator.h **** 
 779:/usr/include/c++/8/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 780:/usr/include/c++/8/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
 781:/usr/include/c++/8/bits/stl_iterator.h **** 
 782:/usr/include/c++/8/bits/stl_iterator.h ****       explicit
 783:/usr/include/c++/8/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 784:/usr/include/c++/8/bits/stl_iterator.h ****       : _M_current(__i) { }
 785:/usr/include/c++/8/bits/stl_iterator.h **** 
 786:/usr/include/c++/8/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 787:/usr/include/c++/8/bits/stl_iterator.h ****       template<typename _Iter>
 788:/usr/include/c++/8/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 789:/usr/include/c++/8/bits/stl_iterator.h **** 			  typename __enable_if<
 790:/usr/include/c++/8/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 791:/usr/include/c++/8/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 792:/usr/include/c++/8/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 793:/usr/include/c++/8/bits/stl_iterator.h **** 
 794:/usr/include/c++/8/bits/stl_iterator.h ****       // Forward iterator requirements
 795:/usr/include/c++/8/bits/stl_iterator.h ****       reference
 796:/usr/include/c++/8/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 797:/usr/include/c++/8/bits/stl_iterator.h ****       { return *_M_current; }
 798:/usr/include/c++/8/bits/stl_iterator.h **** 
 799:/usr/include/c++/8/bits/stl_iterator.h ****       pointer
 800:/usr/include/c++/8/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 801:/usr/include/c++/8/bits/stl_iterator.h ****       { return _M_current; }
 802:/usr/include/c++/8/bits/stl_iterator.h **** 
 803:/usr/include/c++/8/bits/stl_iterator.h ****       __normal_iterator&
 804:/usr/include/c++/8/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
 805:/usr/include/c++/8/bits/stl_iterator.h ****       {
 806:/usr/include/c++/8/bits/stl_iterator.h **** 	++_M_current;
 807:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 808:/usr/include/c++/8/bits/stl_iterator.h ****       }
 809:/usr/include/c++/8/bits/stl_iterator.h **** 
 810:/usr/include/c++/8/bits/stl_iterator.h ****       __normal_iterator
 811:/usr/include/c++/8/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 812:/usr/include/c++/8/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 813:/usr/include/c++/8/bits/stl_iterator.h **** 
 814:/usr/include/c++/8/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 815:/usr/include/c++/8/bits/stl_iterator.h ****       __normal_iterator&
 816:/usr/include/c++/8/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
 817:/usr/include/c++/8/bits/stl_iterator.h ****       {
 818:/usr/include/c++/8/bits/stl_iterator.h **** 	--_M_current;
 819:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 820:/usr/include/c++/8/bits/stl_iterator.h ****       }
 821:/usr/include/c++/8/bits/stl_iterator.h **** 
 822:/usr/include/c++/8/bits/stl_iterator.h ****       __normal_iterator
 823:/usr/include/c++/8/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 824:/usr/include/c++/8/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 825:/usr/include/c++/8/bits/stl_iterator.h **** 
 826:/usr/include/c++/8/bits/stl_iterator.h ****       // Random access iterator requirements
 827:/usr/include/c++/8/bits/stl_iterator.h ****       reference
 828:/usr/include/c++/8/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 829:/usr/include/c++/8/bits/stl_iterator.h ****       { return _M_current[__n]; }
 830:/usr/include/c++/8/bits/stl_iterator.h **** 
 831:/usr/include/c++/8/bits/stl_iterator.h ****       __normal_iterator&
 832:/usr/include/c++/8/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 833:/usr/include/c++/8/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 834:/usr/include/c++/8/bits/stl_iterator.h **** 
 835:/usr/include/c++/8/bits/stl_iterator.h ****       __normal_iterator
 836:/usr/include/c++/8/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 837:/usr/include/c++/8/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 838:/usr/include/c++/8/bits/stl_iterator.h **** 
 839:/usr/include/c++/8/bits/stl_iterator.h ****       __normal_iterator&
 840:/usr/include/c++/8/bits/stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 841:/usr/include/c++/8/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 842:/usr/include/c++/8/bits/stl_iterator.h **** 
 843:/usr/include/c++/8/bits/stl_iterator.h ****       __normal_iterator
 844:/usr/include/c++/8/bits/stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 845:/usr/include/c++/8/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 846:/usr/include/c++/8/bits/stl_iterator.h **** 
 847:/usr/include/c++/8/bits/stl_iterator.h ****       const _Iterator&
 848:/usr/include/c++/8/bits/stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
 849:/usr/include/c++/8/bits/stl_iterator.h ****       { return _M_current; }
 850:/usr/include/c++/8/bits/stl_iterator.h ****     };
 851:/usr/include/c++/8/bits/stl_iterator.h **** 
 852:/usr/include/c++/8/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 853:/usr/include/c++/8/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
 854:/usr/include/c++/8/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
 855:/usr/include/c++/8/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 856:/usr/include/c++/8/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 857:/usr/include/c++/8/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 858:/usr/include/c++/8/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 859:/usr/include/c++/8/bits/stl_iterator.h **** 
 860:/usr/include/c++/8/bits/stl_iterator.h ****   // Forward iterator requirements
 861:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 862:/usr/include/c++/8/bits/stl_iterator.h ****     inline bool
 863:/usr/include/c++/8/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 864:/usr/include/c++/8/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 865:/usr/include/c++/8/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 866:/usr/include/c++/8/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 867:/usr/include/c++/8/bits/stl_iterator.h **** 
 868:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 869:/usr/include/c++/8/bits/stl_iterator.h ****     inline bool
 870:/usr/include/c++/8/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 871:/usr/include/c++/8/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 872:/usr/include/c++/8/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 873:/usr/include/c++/8/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 874:/usr/include/c++/8/bits/stl_iterator.h **** 
 875:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 876:/usr/include/c++/8/bits/stl_iterator.h ****     inline bool
 877:/usr/include/c++/8/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 878:/usr/include/c++/8/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 879:/usr/include/c++/8/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 880:/usr/include/c++/8/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 881:/usr/include/c++/8/bits/stl_iterator.h **** 
 882:/usr/include/c++/8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 883:/usr/include/c++/8/bits/stl_iterator.h ****     inline bool
 884:/usr/include/c++/8/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 2313              		.loc 6 884 5
 2314              		.cfi_startproc
 2315 0000 55       		pushq	%rbp	#
 2316              		.cfi_def_cfa_offset 16
 2317              		.cfi_offset 6, -16
 2318 0001 4889E5   		movq	%rsp, %rbp	#,
 2319              		.cfi_def_cfa_register 6
 2320 0004 53       		pushq	%rbx	#
 2321 0005 4883EC18 		subq	$24, %rsp	#,
 2322              		.cfi_offset 3, -24
 2323 0009 48897DE8 		movq	%rdi, -24(%rbp)	# __lhs, __lhs
 2324 000d 488975E0 		movq	%rsi, -32(%rbp)	# __rhs, __rhs
 2325              	# /usr/include/c++/8/bits/stl_iterator.h:887:     { return __lhs.base() != __rhs.base(); }
 885:/usr/include/c++/8/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 886:/usr/include/c++/8/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 887:/usr/include/c++/8/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 2326              		.loc 6 887 27
 2327 0011 488B45E8 		movq	-24(%rbp), %rax	# __lhs, tmp93
 2328 0015 4889C7   		movq	%rax, %rdi	# tmp93,
 2329 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4bas
 2329      00
 2330 001d 488B18   		movq	(%rax), %rbx	# *_1, _2
 2331 0020 488B45E0 		movq	-32(%rbp), %rax	# __rhs, tmp94
 2332 0024 4889C7   		movq	%rax, %rdi	# tmp94,
 2333 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4bas
 2333      00
 2334 002c 488B00   		movq	(%rax), %rax	# *_3, _4
 2335              	# /usr/include/c++/8/bits/stl_iterator.h:887:     { return __lhs.base() != __rhs.base(); }
 2336              		.loc 6 887 41
 2337 002f 4839C3   		cmpq	%rax, %rbx	# _4, _2
 2338 0032 0F95C0   		setne	%al	#, _10
 2339              	# /usr/include/c++/8/bits/stl_iterator.h:887:     { return __lhs.base() != __rhs.base(); }
 2340              		.loc 6 887 44
 2341 0035 4883C418 		addq	$24, %rsp	#,
 2342 0039 5B       		popq	%rbx	#
 2343 003a 5D       		popq	%rbp	#
 2344              		.cfi_def_cfa 7, 8
 2345 003b C3       		ret	
 2346              		.cfi_endproc
 2347              	.LFE2639:
 2349              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 2350              		.align 2
 2351              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv
 2353              	_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv:
 2354              	.LFB2640:
 804:/usr/include/c++/8/bits/stl_iterator.h ****       {
 2355              		.loc 6 804 7
 2356              		.cfi_startproc
 2357 0000 55       		pushq	%rbp	#
 2358              		.cfi_def_cfa_offset 16
 2359              		.cfi_offset 6, -16
 2360 0001 4889E5   		movq	%rsp, %rbp	#,
 2361              		.cfi_def_cfa_register 6
 2362 0004 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2363              	# /usr/include/c++/8/bits/stl_iterator.h:806: 	++_M_current;
 806:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 2364              		.loc 6 806 4
 2365 0008 488B45F8 		movq	-8(%rbp), %rax	# this, tmp91
 2366 000c 488B00   		movq	(%rax), %rax	# this_4(D)->_M_current, _1
 2367              	# /usr/include/c++/8/bits/stl_iterator.h:806: 	++_M_current;
 806:/usr/include/c++/8/bits/stl_iterator.h **** 	return *this;
 2368              		.loc 6 806 2
 2369 000f 488D5001 		leaq	1(%rax), %rdx	#, _2
 2370 0013 488B45F8 		movq	-8(%rbp), %rax	# this, tmp92
 2371 0017 488910   		movq	%rdx, (%rax)	# _2, this_4(D)->_M_current
 2372              	# /usr/include/c++/8/bits/stl_iterator.h:807: 	return *this;
 807:/usr/include/c++/8/bits/stl_iterator.h ****       }
 2373              		.loc 6 807 10
 2374 001a 488B45F8 		movq	-8(%rbp), %rax	# this, _6
 2375              	# /usr/include/c++/8/bits/stl_iterator.h:808:       }
 808:/usr/include/c++/8/bits/stl_iterator.h **** 
 2376              		.loc 6 808 7
 2377 001e 5D       		popq	%rbp	#
 2378              		.cfi_def_cfa 7, 8
 2379 001f C3       		ret	
 2380              		.cfi_endproc
 2381              	.LFE2640:
 2383              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 2384              		.align 2
 2385              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeE
 2387              	_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv:
 2388              	.LFB2641:
 796:/usr/include/c++/8/bits/stl_iterator.h ****       { return *_M_current; }
 2389              		.loc 6 796 7
 2390              		.cfi_startproc
 2391 0000 55       		pushq	%rbp	#
 2392              		.cfi_def_cfa_offset 16
 2393              		.cfi_offset 6, -16
 2394 0001 4889E5   		movq	%rsp, %rbp	#,
 2395              		.cfi_def_cfa_register 6
 2396 0004 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2397              	# /usr/include/c++/8/bits/stl_iterator.h:797:       { return *_M_current; }
 797:/usr/include/c++/8/bits/stl_iterator.h **** 
 2398              		.loc 6 797 17
 2399 0008 488B45F8 		movq	-8(%rbp), %rax	# this, tmp89
 2400 000c 488B00   		movq	(%rax), %rax	# this_2(D)->_M_current, _3
 2401              	# /usr/include/c++/8/bits/stl_iterator.h:797:       { return *_M_current; }
 797:/usr/include/c++/8/bits/stl_iterator.h **** 
 2402              		.loc 6 797 29
 2403 000f 5D       		popq	%rbp	#
 2404              		.cfi_def_cfa 7, 8
 2405 0010 C3       		ret	
 2406              		.cfi_endproc
 2407              	.LFE2641:
 2409              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 2410              		.align 2
 2411              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4ba
 2413              	_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv:
 2414              	.LFB2710:
 848:/usr/include/c++/8/bits/stl_iterator.h ****       { return _M_current; }
 2415              		.loc 6 848 7
 2416              		.cfi_startproc
 2417 0000 55       		pushq	%rbp	#
 2418              		.cfi_def_cfa_offset 16
 2419              		.cfi_offset 6, -16
 2420 0001 4889E5   		movq	%rsp, %rbp	#,
 2421              		.cfi_def_cfa_register 6
 2422 0004 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2423              	# /usr/include/c++/8/bits/stl_iterator.h:849:       { return _M_current; }
 849:/usr/include/c++/8/bits/stl_iterator.h ****     };
 2424              		.loc 6 849 16
 2425 0008 488B45F8 		movq	-8(%rbp), %rax	# this, _2
 2426              	# /usr/include/c++/8/bits/stl_iterator.h:849:       { return _M_current; }
 849:/usr/include/c++/8/bits/stl_iterator.h ****     };
 2427              		.loc 6 849 28
 2428 000c 5D       		popq	%rbp	#
 2429              		.cfi_def_cfa 7, 8
 2430 000d C3       		ret	
 2431              		.cfi_endproc
 2432              	.LFE2710:
 2434              		.text
 2436              	_Z41__static_initialization_and_destruction_0ii:
 2437              	.LFB2832:
 2438              		.loc 2 304 1
 2439              		.cfi_startproc
 2440 0ec5 55       		pushq	%rbp	#
 2441              		.cfi_def_cfa_offset 16
 2442              		.cfi_offset 6, -16
 2443 0ec6 4889E5   		movq	%rsp, %rbp	#,
 2444              		.cfi_def_cfa_register 6
 2445 0ec9 4883EC10 		subq	$16, %rsp	#,
 2446 0ecd 897DFC   		movl	%edi, -4(%rbp)	# __initialize_p, __initialize_p
 2447 0ed0 8975F8   		movl	%esi, -8(%rbp)	# __priority, __priority
 2448              	# Catalog.cpp:304: }
 2449              		.loc 2 304 1
 2450 0ed3 837DFC01 		cmpl	$1, -4(%rbp)	#, __initialize_p
 2451 0ed7 7532     		jne	.L107	#,
 2452              	# Catalog.cpp:304: }
 2453              		.loc 2 304 1 is_stmt 0 discriminator 1
 2454 0ed9 817DF8FF 		cmpl	$65535, -8(%rbp)	#, __priority
 2454      FF0000
 2455 0ee0 7529     		jne	.L107	#,
 2456              	# /usr/include/c++/8/iostream:74:   static ios_base::Init __ioinit;
 2457              		.file 7 "/usr/include/c++/8/iostream"
   1:/usr/include/c++/8/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/8/iostream **** 
   3:/usr/include/c++/8/iostream **** // Copyright (C) 1997-2018 Free Software Foundation, Inc.
   4:/usr/include/c++/8/iostream **** //
   5:/usr/include/c++/8/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/8/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/8/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/8/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/8/iostream **** // any later version.
  10:/usr/include/c++/8/iostream **** 
  11:/usr/include/c++/8/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/8/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/8/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/8/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/8/iostream **** 
  16:/usr/include/c++/8/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/8/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/8/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/8/iostream **** 
  20:/usr/include/c++/8/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/8/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/8/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/8/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/8/iostream **** 
  25:/usr/include/c++/8/iostream **** /** @file include/iostream
  26:/usr/include/c++/8/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/8/iostream ****  */
  28:/usr/include/c++/8/iostream **** 
  29:/usr/include/c++/8/iostream **** //
  30:/usr/include/c++/8/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/8/iostream **** //
  32:/usr/include/c++/8/iostream **** 
  33:/usr/include/c++/8/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/8/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/8/iostream **** 
  36:/usr/include/c++/8/iostream **** #pragma GCC system_header
  37:/usr/include/c++/8/iostream **** 
  38:/usr/include/c++/8/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/8/iostream **** #include <ostream>
  40:/usr/include/c++/8/iostream **** #include <istream>
  41:/usr/include/c++/8/iostream **** 
  42:/usr/include/c++/8/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/8/iostream **** {
  44:/usr/include/c++/8/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/8/iostream **** 
  46:/usr/include/c++/8/iostream ****   /**
  47:/usr/include/c++/8/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/8/iostream ****    *
  49:/usr/include/c++/8/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/8/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/8/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/8/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/8/iostream ****    *
  54:/usr/include/c++/8/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/8/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/8/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/8/iostream ****    *  manual linked to above.
  58:/usr/include/c++/8/iostream ****   */
  59:/usr/include/c++/8/iostream ****   //@{
  60:/usr/include/c++/8/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/8/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/8/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/8/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/8/iostream **** 
  65:/usr/include/c++/8/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/8/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/8/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/8/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/8/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/8/iostream **** #endif
  71:/usr/include/c++/8/iostream ****   //@}
  72:/usr/include/c++/8/iostream **** 
  73:/usr/include/c++/8/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/8/iostream ****   static ios_base::Init __ioinit;
 2458              		.loc 7 74 25 is_stmt 1
 2459 0ee2 488D3D00 		leaq	_ZStL8__ioinit(%rip), %rdi	#,
 2459      000000
 2460 0ee9 E8000000 		call	_ZNSt8ios_base4InitC1Ev@PLT	#
 2460      00
 2461 0eee 488D1500 		leaq	__dso_handle(%rip), %rdx	#,
 2461      000000
 2462 0ef5 488D3500 		leaq	_ZStL8__ioinit(%rip), %rsi	#,
 2462      000000
 2463 0efc 488B0500 		movq	_ZNSt8ios_base4InitD1Ev@GOTPCREL(%rip), %rax	#, tmp87
 2463      000000
 2464 0f03 4889C7   		movq	%rax, %rdi	# tmp87,
 2465 0f06 E8000000 		call	__cxa_atexit@PLT	#
 2465      00
 2466              	.L107:
 2467              	# Catalog.cpp:304: }
 2468              		.loc 2 304 1
 2469 0f0b 90       		nop	
 2470 0f0c C9       		leave	
 2471              		.cfi_def_cfa 7, 8
 2472 0f0d C3       		ret	
 2473              		.cfi_endproc
 2474              	.LFE2832:
 2477              	_GLOBAL__sub_I_INIT_COUNT:
 2478              	.LFB2833:
 2479              		.loc 2 304 1
 2480              		.cfi_startproc
 2481 0f0e 55       		pushq	%rbp	#
 2482              		.cfi_def_cfa_offset 16
 2483              		.cfi_offset 6, -16
 2484 0f0f 4889E5   		movq	%rsp, %rbp	#,
 2485              		.cfi_def_cfa_register 6
 2486              	# Catalog.cpp:304: }
 2487              		.loc 2 304 1
 2488 0f12 BEFFFF00 		movl	$65535, %esi	#,
 2488      00
 2489 0f17 BF010000 		movl	$1, %edi	#,
 2489      00
 2490 0f1c E8A4FFFF 		call	_Z41__static_initialization_and_destruction_0ii	#
 2490      FF
 2491 0f21 5D       		popq	%rbp	#
 2492              		.cfi_def_cfa 7, 8
 2493 0f22 C3       		ret	
 2494              		.cfi_endproc
 2495              	.LFE2833:
 2497              		.section	.init_array,"aw"
 2498              		.align 8
 2499 0000 00000000 		.quad	_GLOBAL__sub_I_INIT_COUNT
 2499      00000000 
 2500              		.section	.rodata
 2501 015c 00000000 		.align 8
 2502              	.LC9:
 2503 0160 00000000 		.long	0
 2504 0164 00005940 		.long	1079574528
 2505              		.text
 2506              	.Letext0:
 2507              		.file 8 "<built-in>"
 2508              		.file 9 "/usr/lib/gcc/x86_64-linux-gnu/8/include/stddef.h"
 2509              		.file 10 "/usr/include/x86_64-linux-gnu/bits/types.h"
 2510              		.file 11 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h"
 2511              		.file 12 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h"
 2512              		.file 13 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h"
 2513              		.file 14 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 2514              		.file 15 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 2515              		.file 16 "/usr/include/stdio.h"
 2516              		.file 17 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 2517              		.file 18 "/usr/include/c++/8/bits/stringfwd.h"
 2518              		.file 19 "/usr/include/c++/8/cwchar"
 2519              		.file 20 "/usr/include/c++/8/new"
 2520              		.file 21 "/usr/include/c++/8/bits/exception_ptr.h"
 2521              		.file 22 "/usr/include/x86_64-linux-gnu/c++/8/bits/c++config.h"
 2522              		.file 23 "/usr/include/c++/8/type_traits"
 2523              		.file 24 "/usr/include/c++/8/bits/cpp_type_traits.h"
 2524              		.file 25 "/usr/include/c++/8/bits/stl_pair.h"
 2525              		.file 26 "/usr/include/c++/8/debug/debug.h"
 2526              		.file 27 "/usr/include/c++/8/bits/char_traits.h"
 2527              		.file 28 "/usr/include/c++/8/cstdint"
 2528              		.file 29 "/usr/include/c++/8/clocale"
 2529              		.file 30 "/usr/include/c++/8/bits/allocator.h"
 2530              		.file 31 "/usr/include/c++/8/cstdlib"
 2531              		.file 32 "/usr/include/c++/8/cstdio"
 2532              		.file 33 "/usr/include/c++/8/bits/alloc_traits.h"
 2533              		.file 34 "/usr/include/c++/8/initializer_list"
 2534              		.file 35 "/usr/include/c++/8/system_error"
 2535              		.file 36 "/usr/include/c++/8/cwctype"
 2536              		.file 37 "/usr/include/c++/8/iosfwd"
 2537              		.file 38 "/usr/include/c++/8/bits/stl_iterator_base_types.h"
 2538              		.file 39 "/usr/include/c++/8/bits/move.h"
 2539              		.file 40 "/usr/include/c++/8/bits/predefined_ops.h"
 2540              		.file 41 "/usr/include/c++/8/ext/new_allocator.h"
 2541              		.file 42 "/usr/include/c++/8/ext/numeric_traits.h"
 2542              		.file 43 "/usr/include/c++/8/ext/alloc_traits.h"
 2543              		.file 44 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h"
 2544              		.file 45 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h"
 2545              		.file 46 "/usr/include/wchar.h"
 2546              		.file 47 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
 2547              		.file 48 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h"
 2548              		.file 49 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 2549              		.file 50 "/usr/include/stdint.h"
 2550              		.file 51 "/usr/include/locale.h"
 2551              		.file 52 "/usr/include/time.h"
 2552              		.file 53 "/usr/include/x86_64-linux-gnu/c++/8/bits/atomic_word.h"
 2553              		.file 54 "/usr/include/stdlib.h"
 2554              		.file 55 "/usr/include/errno.h"
 2555              		.file 56 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h"
 2556              		.file 57 "/usr/include/wctype.h"
 17928              		.align 8
 17931              	DW.ref._ZTISt9exception:
 17932 0000 00000000 		.quad	_ZTISt9exception
 17932      00000000 
 17933              		.hidden	DW.ref.__gxx_personality_v0
 17934              		.weak	DW.ref.__gxx_personality_v0
 17935              		.section	.data.rel.local.DW.ref.__gxx_personality_v0,"awG",@progbits,DW.ref.__gxx_personality_v0,c
 17936              		.align 8
 17939              	DW.ref.__gxx_personality_v0:
 17940 0000 00000000 		.quad	__gxx_personality_v0
 17940      00000000 
 17941              		.hidden	__dso_handle
 17942              		.ident	"GCC: (Ubuntu 8.3.0-6ubuntu1) 8.3.0"
 17943              		.section	.note.GNU-stack,"",@progbits
